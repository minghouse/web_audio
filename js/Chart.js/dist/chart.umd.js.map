{"version":3,"file":"chart.umd.js","sources":["../src/helpers/helpers.core.ts","../src/helpers/helpers.math.ts","../src/helpers/helpers.collection.ts","../src/helpers/helpers.extras.js","../src/core/core.animator.js","../node_modules/@kurkle/color/dist/color.esm.js","../src/helpers/helpers.color.ts","../src/core/core.animations.defaults.js","../src/helpers/helpers.intl.ts","../src/core/core.ticks.js","../src/core/core.defaults.js","../src/core/core.layouts.defaults.js","../src/core/core.scale.defaults.js","../src/helpers/helpers.dom.js","../src/helpers/helpers.canvas.js","../src/helpers/helpers.config.js","../src/helpers/helpers.curve.js","../src/helpers/helpers.easing.ts","../src/helpers/helpers.interpolation.ts","../src/helpers/helpers.options.js","../src/helpers/helpers.rtl.ts","../src/helpers/helpers.segment.js","../src/core/core.interaction.js","../src/core/core.layouts.js","../src/platform/platform.base.js","../src/platform/platform.basic.js","../src/platform/platform.dom.js","../src/platform/index.js","../src/core/core.animation.js","../src/core/core.animations.js","../src/core/core.datasetController.js","../src/core/core.element.ts","../src/core/core.scale.autoskip.js","../src/core/core.scale.js","../src/core/core.typedRegistry.js","../src/core/core.registry.js","../src/core/core.plugins.js","../src/core/core.config.js","../src/core/core.controller.js","../src/core/core.adapters.ts","../src/controllers/controller.bar.js","../src/controllers/controller.doughnut.js","../src/controllers/controller.bubble.js","../src/controllers/controller.line.js","../src/controllers/controller.polarArea.js","../src/controllers/controller.pie.js","../src/controllers/controller.radar.js","../src/controllers/controller.scatter.js","../src/elements/element.arc.js","../src/elements/element.line.js","../src/elements/element.point.js","../src/elements/element.bar.js","../src/plugins/plugin.decimation.js","../src/plugins/plugin.filler/filler.segment.js","../src/plugins/plugin.filler/filler.helper.js","../src/plugins/plugin.filler/filler.options.js","../src/plugins/plugin.filler/filler.target.stack.js","../src/plugins/plugin.filler/simpleArc.js","../src/plugins/plugin.filler/filler.target.js","../src/plugins/plugin.filler/filler.drawing.js","../src/plugins/plugin.filler/index.js","../src/plugins/plugin.legend.js","../src/plugins/plugin.title.js","../src/plugins/plugin.subtitle.js","../src/plugins/plugin.tooltip.js","../src/scales/scale.category.js","../src/scales/scale.linearbase.js","../src/scales/scale.linear.js","../src/scales/scale.logarithmic.js","../src/scales/scale.radialLinear.js","../src/scales/scale.time.js","../src/scales/scale.timeseries.js","../src/index.umd.ts"],"sourcesContent":["/**\r\n * @namespace Chart.helpers\r\n */\r\n\r\nimport type {AnyObject} from '../../types/basic';\r\nimport type {ActiveDataPoint, ChartEvent} from '../../types';\r\n\r\n/**\r\n * An empty function that can be used, for example, for optional callback.\r\n */\r\nexport function noop() {\r\n  /* noop */\r\n}\r\n\r\n/**\r\n * Returns a unique id, sequentially generated from a global variable.\r\n */\r\nexport const uid = (() => {\r\n  let id = 0;\r\n  return () => id++;\r\n})();\r\n\r\n/**\r\n * Returns true if `value` is neither null nor undefined, else returns false.\r\n * @param value - The value to test.\r\n * @since 2.7.0\r\n */\r\nexport function isNullOrUndef(value: unknown): value is null | undefined {\r\n  return value === null || typeof value === 'undefined';\r\n}\r\n\r\n/**\r\n * Returns true if `value` is an array (including typed arrays), else returns false.\r\n * @param value - The value to test.\r\n * @function\r\n */\r\nexport function isArray<T = unknown>(value: unknown): value is T[] {\r\n  if (Array.isArray && Array.isArray(value)) {\r\n    return true;\r\n  }\r\n  const type = Object.prototype.toString.call(value);\r\n  if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Returns true if `value` is an object (excluding null), else returns false.\r\n * @param value - The value to test.\r\n * @since 2.7.0\r\n */\r\nexport function isObject(value: unknown): value is AnyObject {\r\n  return value !== null && Object.prototype.toString.call(value) === '[object Object]';\r\n}\r\n\r\n/**\r\n * Returns true if `value` is a finite number, else returns false\r\n * @param value  - The value to test.\r\n */\r\nfunction isNumberFinite(value: unknown): value is number {\r\n  return (typeof value === 'number' || value instanceof Number) && isFinite(+value);\r\n}\r\nexport {\r\n  isNumberFinite as isFinite,\r\n};\r\n\r\n/**\r\n * Returns `value` if finite, else returns `defaultValue`.\r\n * @param value - The value to return if defined.\r\n * @param defaultValue - The value to return if `value` is not finite.\r\n */\r\nexport function finiteOrDefault(value: unknown, defaultValue: number) {\r\n  return isNumberFinite(value) ? value : defaultValue;\r\n}\r\n\r\n/**\r\n * Returns `value` if defined, else returns `defaultValue`.\r\n * @param value - The value to return if defined.\r\n * @param defaultValue - The value to return if `value` is undefined.\r\n */\r\nexport function valueOrDefault<T>(value: T | undefined, defaultValue: T) {\r\n  return typeof value === 'undefined' ? defaultValue : value;\r\n}\r\n\r\nexport const toPercentage = (value: number | string, dimension: number) =>\r\n  typeof value === 'string' && value.endsWith('%') ?\r\n    parseFloat(value) / 100\r\n    : +value / dimension;\r\n\r\nexport const toDimension = (value: number | string, dimension: number) =>\r\n  typeof value === 'string' && value.endsWith('%') ?\r\n    parseFloat(value) / 100 * dimension\r\n    : +value;\r\n\r\n/**\r\n * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\r\n * value returned by `fn`. If `fn` is not a function, this method returns undefined.\r\n * @param fn - The function to call.\r\n * @param args - The arguments with which `fn` should be called.\r\n * @param [thisArg] - The value of `this` provided for the call to `fn`.\r\n */\r\nexport function callback<T extends (this: TA, ...restArgs: unknown[]) => R, TA, R>(\r\n  fn: T | undefined,\r\n  args: unknown[],\r\n  thisArg?: TA\r\n): R | undefined {\r\n  if (fn && typeof fn.call === 'function') {\r\n    return fn.apply(thisArg, args);\r\n  }\r\n}\r\n\r\n/**\r\n * Note(SB) for performance sake, this method should only be used when loopable type\r\n * is unknown or in none intensive code (not called often and small loopable). Else\r\n * it's preferable to use a regular for() loop and save extra function calls.\r\n * @param loopable - The object or array to be iterated.\r\n * @param fn - The function to call for each item.\r\n * @param [thisArg] - The value of `this` provided for the call to `fn`.\r\n * @param [reverse] - If true, iterates backward on the loopable.\r\n */\r\nexport function each<T, TA>(\r\n  loopable: Record<string, T>,\r\n  fn: (this: TA, v: T, i: string) => void,\r\n  thisArg?: TA,\r\n  reverse?: boolean\r\n): void;\r\nexport function each<T, TA>(\r\n  loopable: T[],\r\n  fn: (this: TA, v: T, i: number) => void,\r\n  thisArg?: TA,\r\n  reverse?: boolean\r\n): void;\r\nexport function each<T, TA>(\r\n  loopable: T[] | Record<string, T>,\r\n  fn: (this: TA, v: T, i: any) => void,\r\n  thisArg?: TA,\r\n  reverse?: boolean\r\n) {\r\n  let i: number, len: number, keys: string[];\r\n  if (isArray(loopable)) {\r\n    len = loopable.length;\r\n    if (reverse) {\r\n      for (i = len - 1; i >= 0; i--) {\r\n        fn.call(thisArg, loopable[i], i);\r\n      }\r\n    } else {\r\n      for (i = 0; i < len; i++) {\r\n        fn.call(thisArg, loopable[i], i);\r\n      }\r\n    }\r\n  } else if (isObject(loopable)) {\r\n    keys = Object.keys(loopable);\r\n    len = keys.length;\r\n    for (i = 0; i < len; i++) {\r\n      fn.call(thisArg, loopable[keys[i]], keys[i]);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\r\n * @param a0 - The array to compare\r\n * @param a1 - The array to compare\r\n * @private\r\n */\r\nexport function _elementsEqual(a0: ActiveDataPoint[], a1: ActiveDataPoint[]) {\r\n  let i: number, ilen: number, v0: ActiveDataPoint, v1: ActiveDataPoint;\r\n\r\n  if (!a0 || !a1 || a0.length !== a1.length) {\r\n    return false;\r\n  }\r\n\r\n  for (i = 0, ilen = a0.length; i < ilen; ++i) {\r\n    v0 = a0[i];\r\n    v1 = a1[i];\r\n\r\n    if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Returns a deep copy of `source` without keeping references on objects and arrays.\r\n * @param source - The value to clone.\r\n */\r\nexport function clone<T>(source: T): T {\r\n  if (isArray(source)) {\r\n    return source.map(clone) as unknown as T;\r\n  }\r\n\r\n  if (isObject(source)) {\r\n    const target = Object.create(null);\r\n    const keys = Object.keys(source);\r\n    const klen = keys.length;\r\n    let k = 0;\r\n\r\n    for (; k < klen; ++k) {\r\n      target[keys[k]] = clone(source[keys[k]]);\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  return source;\r\n}\r\n\r\nfunction isValidKey(key: string) {\r\n  return ['__proto__', 'prototype', 'constructor'].indexOf(key) === -1;\r\n}\r\n\r\n/**\r\n * The default merger when Chart.helpers.merge is called without merger option.\r\n * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\r\n * @private\r\n */\r\nexport function _merger(key: string, target: AnyObject, source: AnyObject, options: AnyObject) {\r\n  if (!isValidKey(key)) {\r\n    return;\r\n  }\r\n\r\n  const tval = target[key];\r\n  const sval = source[key];\r\n\r\n  if (isObject(tval) && isObject(sval)) {\r\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n    merge(tval, sval, options);\r\n  } else {\r\n    target[key] = clone(sval);\r\n  }\r\n}\r\n\r\nexport interface MergeOptions {\r\n  merger?: (key: string, target: AnyObject, source: AnyObject, options?: AnyObject) => void;\r\n}\r\n\r\n/**\r\n * Recursively deep copies `source` properties into `target` with the given `options`.\r\n * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\r\n * @param target - The target object in which all sources are merged into.\r\n * @param source - Object(s) to merge into `target`.\r\n * @param [options] - Merging options:\r\n * @param [options.merger] - The merge method (key, target, source, options)\r\n * @returns The `target` object.\r\n */\r\nexport function merge<T>(target: T, source: [], options?: MergeOptions): T;\r\nexport function merge<T, S1>(target: T, source: S1, options?: MergeOptions): T & S1;\r\nexport function merge<T, S1>(target: T, source: [S1], options?: MergeOptions): T & S1;\r\nexport function merge<T, S1, S2>(target: T, source: [S1, S2], options?: MergeOptions): T & S1 & S2;\r\nexport function merge<T, S1, S2, S3>(target: T, source: [S1, S2, S3], options?: MergeOptions): T & S1 & S2 & S3;\r\nexport function merge<T, S1, S2, S3, S4>(\r\n  target: T,\r\n  source: [S1, S2, S3, S4],\r\n  options?: MergeOptions\r\n): T & S1 & S2 & S3 & S4;\r\nexport function merge<T>(target: T, source: AnyObject[], options?: MergeOptions): AnyObject;\r\nexport function merge<T>(target: T, source: AnyObject[], options?: MergeOptions): AnyObject {\r\n  const sources = isArray(source) ? source : [source];\r\n  const ilen = sources.length;\r\n\r\n  if (!isObject(target)) {\r\n    return target as AnyObject;\r\n  }\r\n\r\n  options = options || {};\r\n  const merger = options.merger || _merger;\r\n  let current: AnyObject;\r\n\r\n  for (let i = 0; i < ilen; ++i) {\r\n    current = sources[i];\r\n    if (!isObject(current)) {\r\n      continue;\r\n    }\r\n\r\n    const keys = Object.keys(current);\r\n    for (let k = 0, klen = keys.length; k < klen; ++k) {\r\n      merger(keys[k], target, current, options as AnyObject);\r\n    }\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\n/**\r\n * Recursively deep copies `source` properties into `target` *only* if not defined in target.\r\n * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\r\n * @param target - The target object in which all sources are merged into.\r\n * @param source - Object(s) to merge into `target`.\r\n * @returns The `target` object.\r\n */\r\nexport function mergeIf<T>(target: T, source: []): T;\r\nexport function mergeIf<T, S1>(target: T, source: S1): T & S1;\r\nexport function mergeIf<T, S1>(target: T, source: [S1]): T & S1;\r\nexport function mergeIf<T, S1, S2>(target: T, source: [S1, S2]): T & S1 & S2;\r\nexport function mergeIf<T, S1, S2, S3>(target: T, source: [S1, S2, S3]): T & S1 & S2 & S3;\r\nexport function mergeIf<T, S1, S2, S3, S4>(target: T, source: [S1, S2, S3, S4]): T & S1 & S2 & S3 & S4;\r\nexport function mergeIf<T>(target: T, source: AnyObject[]): AnyObject;\r\nexport function mergeIf<T>(target: T, source: AnyObject[]): AnyObject {\r\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n  return merge<T>(target, source, {merger: _mergerIf});\r\n}\r\n\r\n/**\r\n * Merges source[key] in target[key] only if target[key] is undefined.\r\n * @private\r\n */\r\nexport function _mergerIf(key: string, target: AnyObject, source: AnyObject) {\r\n  if (!isValidKey(key)) {\r\n    return;\r\n  }\r\n\r\n  const tval = target[key];\r\n  const sval = source[key];\r\n\r\n  if (isObject(tval) && isObject(sval)) {\r\n    mergeIf(tval, sval);\r\n  } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\r\n    target[key] = clone(sval);\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _deprecated(scope: string, value: unknown, previous: string, current: string) {\r\n  if (value !== undefined) {\r\n    console.warn(scope + ': \"' + previous +\r\n      '\" is deprecated. Please use \"' + current + '\" instead');\r\n  }\r\n}\r\n\r\n// resolveObjectKey resolver cache\r\nconst keyResolvers = {\r\n  // Chart.helpers.core resolveObjectKey should resolve empty key to root object\r\n  '': v => v,\r\n  // default resolvers\r\n  x: o => o.x,\r\n  y: o => o.y\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _splitKey(key: string) {\r\n  const parts = key.split('.');\r\n  const keys: string[] = [];\r\n  let tmp = '';\r\n  for (const part of parts) {\r\n    tmp += part;\r\n    if (tmp.endsWith('\\\\')) {\r\n      tmp = tmp.slice(0, -1) + '.';\r\n    } else {\r\n      keys.push(tmp);\r\n      tmp = '';\r\n    }\r\n  }\r\n  return keys;\r\n}\r\n\r\nfunction _getKeyResolver(key: string) {\r\n  const keys = _splitKey(key);\r\n  return obj => {\r\n    for (const k of keys) {\r\n      if (k === '') {\r\n        // For backward compatibility:\r\n        // Chart.helpers.core resolveObjectKey should break at empty key\r\n        break;\r\n      }\r\n      obj = obj && obj[k];\r\n    }\r\n    return obj;\r\n  };\r\n}\r\n\r\nexport function resolveObjectKey(obj: AnyObject, key: string): AnyObject {\r\n  const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));\r\n  return resolver(obj);\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _capitalize(str: string) {\r\n  return str.charAt(0).toUpperCase() + str.slice(1);\r\n}\r\n\r\n\r\nexport const defined = (value: unknown) => typeof value !== 'undefined';\r\n\r\nexport const isFunction = (value: unknown): value is (...args: any[]) => any => typeof value === 'function';\r\n\r\n// Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384\r\nexport const setsEqual = <T>(a: Set<T>, b: Set<T>) => {\r\n  if (a.size !== b.size) {\r\n    return false;\r\n  }\r\n\r\n  for (const item of a) {\r\n    if (!b.has(item)) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\n/**\r\n * @param e - The event\r\n * @private\r\n */\r\nexport function _isClickEvent(e: ChartEvent) {\r\n  return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';\r\n}\r\n","import type {Point} from '../../types/geometric';\r\nimport {isFinite as isFiniteNumber} from './helpers.core';\r\n\r\n/**\r\n * @alias Chart.helpers.math\r\n * @namespace\r\n */\r\n\r\nexport const PI = Math.PI;\r\nexport const TAU = 2 * PI;\r\nexport const PITAU = TAU + PI;\r\nexport const INFINITY = Number.POSITIVE_INFINITY;\r\nexport const RAD_PER_DEG = PI / 180;\r\nexport const HALF_PI = PI / 2;\r\nexport const QUARTER_PI = PI / 4;\r\nexport const TWO_THIRDS_PI = PI * 2 / 3;\r\n\r\nexport const log10 = Math.log10;\r\nexport const sign = Math.sign;\r\n\r\nexport function almostEquals(x: number, y: number, epsilon: number) {\r\n  return Math.abs(x - y) < epsilon;\r\n}\r\n\r\n/**\r\n * Implementation of the nice number algorithm used in determining where axis labels will go\r\n */\r\nexport function niceNum(range: number) {\r\n  const roundedRange = Math.round(range);\r\n  range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;\r\n  const niceRange = Math.pow(10, Math.floor(log10(range)));\r\n  const fraction = range / niceRange;\r\n  const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\r\n  return niceFraction * niceRange;\r\n}\r\n\r\n/**\r\n * Returns an array of factors sorted from 1 to sqrt(value)\r\n * @private\r\n */\r\nexport function _factorize(value: number) {\r\n  const result: number[] = [];\r\n  const sqrt = Math.sqrt(value);\r\n  let i: number;\r\n\r\n  for (i = 1; i < sqrt; i++) {\r\n    if (value % i === 0) {\r\n      result.push(i);\r\n      result.push(value / i);\r\n    }\r\n  }\r\n  if (sqrt === (sqrt | 0)) { // if value is a square number\r\n    result.push(sqrt);\r\n  }\r\n\r\n  result.sort((a, b) => a - b).pop();\r\n  return result;\r\n}\r\n\r\nexport function isNumber(n: unknown): n is number {\r\n  return !isNaN(parseFloat(n as string)) && isFinite(n as number);\r\n}\r\n\r\nexport function almostWhole(x: number, epsilon: number) {\r\n  const rounded = Math.round(x);\r\n  return ((rounded - epsilon) <= x) && ((rounded + epsilon) >= x);\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _setMinAndMaxByKey(\r\n  array: Record<string, number>[],\r\n  target: { min: number, max: number },\r\n  property: string\r\n) {\r\n  let i: number, ilen: number, value: number;\r\n\r\n  for (i = 0, ilen = array.length; i < ilen; i++) {\r\n    value = array[i][property];\r\n    if (!isNaN(value)) {\r\n      target.min = Math.min(target.min, value);\r\n      target.max = Math.max(target.max, value);\r\n    }\r\n  }\r\n}\r\n\r\nexport function toRadians(degrees: number) {\r\n  return degrees * (PI / 180);\r\n}\r\n\r\nexport function toDegrees(radians: number) {\r\n  return radians * (180 / PI);\r\n}\r\n\r\n/**\r\n * Returns the number of decimal places\r\n * i.e. the number of digits after the decimal point, of the value of this Number.\r\n * @param x - A number.\r\n * @returns The number of decimal places.\r\n * @private\r\n */\r\nexport function _decimalPlaces(x: number) {\r\n  if (!isFiniteNumber(x)) {\r\n    return;\r\n  }\r\n  let e = 1;\r\n  let p = 0;\r\n  while (Math.round(x * e) / e !== x) {\r\n    e *= 10;\r\n    p++;\r\n  }\r\n  return p;\r\n}\r\n\r\n// Gets the angle from vertical upright to the point about a centre.\r\nexport function getAngleFromPoint(\r\n  centrePoint: Point,\r\n  anglePoint: Point\r\n) {\r\n  const distanceFromXCenter = anglePoint.x - centrePoint.x;\r\n  const distanceFromYCenter = anglePoint.y - centrePoint.y;\r\n  const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\r\n\r\n  let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\r\n\r\n  if (angle < (-0.5 * PI)) {\r\n    angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\r\n  }\r\n\r\n  return {\r\n    angle,\r\n    distance: radialDistanceFromCenter\r\n  };\r\n}\r\n\r\nexport function distanceBetweenPoints(pt1: Point, pt2: Point) {\r\n  return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\r\n}\r\n\r\n/**\r\n * Shortest distance between angles, in either direction.\r\n * @private\r\n */\r\nexport function _angleDiff(a: number, b: number) {\r\n  return (a - b + PITAU) % TAU - PI;\r\n}\r\n\r\n/**\r\n * Normalize angle to be between 0 and 2*PI\r\n * @private\r\n */\r\nexport function _normalizeAngle(a: number) {\r\n  return (a % TAU + TAU) % TAU;\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _angleBetween(angle: number, start: number, end: number, sameAngleIsFullCircle?: boolean) {\r\n  const a = _normalizeAngle(angle);\r\n  const s = _normalizeAngle(start);\r\n  const e = _normalizeAngle(end);\r\n  const angleToStart = _normalizeAngle(s - a);\r\n  const angleToEnd = _normalizeAngle(e - a);\r\n  const startToAngle = _normalizeAngle(a - s);\r\n  const endToAngle = _normalizeAngle(a - e);\r\n  return a === s || a === e || (sameAngleIsFullCircle && s === e)\r\n    || (angleToStart > angleToEnd && startToAngle < endToAngle);\r\n}\r\n\r\n/**\r\n * Limit `value` between `min` and `max`\r\n * @param value\r\n * @param min\r\n * @param max\r\n * @private\r\n */\r\nexport function _limitValue(value: number, min: number, max: number) {\r\n  return Math.max(min, Math.min(max, value));\r\n}\r\n\r\n/**\r\n * @param {number} value\r\n * @private\r\n */\r\nexport function _int16Range(value: number) {\r\n  return _limitValue(value, -32768, 32767);\r\n}\r\n\r\n/**\r\n * @param value\r\n * @param start\r\n * @param end\r\n * @param [epsilon]\r\n * @private\r\n */\r\nexport function _isBetween(value: number, start: number, end: number, epsilon = 1e-6) {\r\n  return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;\r\n}\r\n","import {_capitalize} from './helpers.core';\r\n\r\n/**\r\n * Binary search\r\n * @param table - the table search. must be sorted!\r\n * @param value - value to find\r\n * @param cmp\r\n * @private\r\n */\r\nexport function _lookup(\r\n  table: number[],\r\n  value: number,\r\n  cmp?: (value: number) => boolean\r\n): {lo: number, hi: number};\r\nexport function _lookup<T>(\r\n  table: T[],\r\n  value: number,\r\n  cmp: (value: number) => boolean\r\n): {lo: number, hi: number};\r\nexport function _lookup(\r\n  table: unknown[],\r\n  value: number,\r\n  cmp?: (value: number) => boolean\r\n) {\r\n  cmp = cmp || ((index) => table[index] < value);\r\n  let hi = table.length - 1;\r\n  let lo = 0;\r\n  let mid: number;\r\n\r\n  while (hi - lo > 1) {\r\n    mid = (lo + hi) >> 1;\r\n    if (cmp(mid)) {\r\n      lo = mid;\r\n    } else {\r\n      hi = mid;\r\n    }\r\n  }\r\n\r\n  return {lo, hi};\r\n}\r\n\r\n/**\r\n * Binary search\r\n * @param table - the table search. must be sorted!\r\n * @param key - property name for the value in each entry\r\n * @param value - value to find\r\n * @param last - lookup last index\r\n * @private\r\n */\r\nexport const _lookupByKey = (\r\n  table: Record<string, number>[],\r\n  key: string,\r\n  value: number,\r\n  last?: boolean\r\n) =>\r\n  _lookup(table, value, last\r\n    ? index => {\r\n      const ti = table[index][key];\r\n      return ti < value || ti === value && table[index + 1][key] === value;\r\n    }\r\n    : index => table[index][key] < value);\r\n\r\n/**\r\n * Reverse binary search\r\n * @param table - the table search. must be sorted!\r\n * @param key - property name for the value in each entry\r\n * @param value - value to find\r\n * @private\r\n */\r\nexport const _rlookupByKey = (\r\n  table: Record<string, number>[],\r\n  key: string,\r\n  value: number\r\n) =>\r\n  _lookup(table, value, index => table[index][key] >= value);\r\n\r\n/**\r\n * Return subset of `values` between `min` and `max` inclusive.\r\n * Values are assumed to be in sorted order.\r\n * @param values - sorted array of values\r\n * @param min - min value\r\n * @param max - max value\r\n */\r\nexport function _filterBetween(values: number[], min: number, max: number) {\r\n  let start = 0;\r\n  let end = values.length;\r\n\r\n  while (start < end && values[start] < min) {\r\n    start++;\r\n  }\r\n  while (end > start && values[end - 1] > max) {\r\n    end--;\r\n  }\r\n\r\n  return start > 0 || end < values.length\r\n    ? values.slice(start, end)\r\n    : values;\r\n}\r\n\r\nconst arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'] as const;\r\n\r\nexport interface ArrayListener<T> {\r\n  _onDataPush?(...item: T[]): void;\r\n  _onDataPop?(): void;\r\n  _onDataShift?(): void;\r\n  _onDataSplice?(index: number, deleteCount: number, ...items: T[]): void;\r\n  _onDataUnshift?(...item: T[]): void;\r\n}\r\n\r\n/**\r\n * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',\r\n * 'unshift') and notify the listener AFTER the array has been altered. Listeners are\r\n * called on the '_onData*' callbacks (e.g. _onDataPush, etc.) with same arguments.\r\n */\r\nexport function listenArrayEvents<T>(array: T[], listener: ArrayListener<T>): void;\r\nexport function listenArrayEvents(array, listener) {\r\n  if (array._chartjs) {\r\n    array._chartjs.listeners.push(listener);\r\n    return;\r\n  }\r\n\r\n  Object.defineProperty(array, '_chartjs', {\r\n    configurable: true,\r\n    enumerable: false,\r\n    value: {\r\n      listeners: [listener]\r\n    }\r\n  });\r\n\r\n  arrayEvents.forEach((key) => {\r\n    const method = '_onData' + _capitalize(key);\r\n    const base = array[key];\r\n\r\n    Object.defineProperty(array, key, {\r\n      configurable: true,\r\n      enumerable: false,\r\n      value(...args) {\r\n        const res = base.apply(this, args);\r\n\r\n        array._chartjs.listeners.forEach((object) => {\r\n          if (typeof object[method] === 'function') {\r\n            object[method](...args);\r\n          }\r\n        });\r\n\r\n        return res;\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n\r\n/**\r\n * Removes the given array event listener and cleanup extra attached properties (such as\r\n * the _chartjs stub and overridden methods) if array doesn't have any more listeners.\r\n */\r\nexport function unlistenArrayEvents<T>(array: T[], listener: ArrayListener<T>): void;\r\nexport function unlistenArrayEvents(array, listener) {\r\n  const stub = array._chartjs;\r\n  if (!stub) {\r\n    return;\r\n  }\r\n\r\n  const listeners = stub.listeners;\r\n  const index = listeners.indexOf(listener);\r\n  if (index !== -1) {\r\n    listeners.splice(index, 1);\r\n  }\r\n\r\n  if (listeners.length > 0) {\r\n    return;\r\n  }\r\n\r\n  arrayEvents.forEach((key) => {\r\n    delete array[key];\r\n  });\r\n\r\n  delete array._chartjs;\r\n}\r\n\r\n/**\r\n * @param items\r\n */\r\nexport function _arrayUnique<T>(items: T[]) {\r\n  const set = new Set<T>();\r\n  let i: number, ilen: number;\r\n\r\n  for (i = 0, ilen = items.length; i < ilen; ++i) {\r\n    set.add(items[i]);\r\n  }\r\n\r\n  if (set.size === ilen) {\r\n    return items;\r\n  }\r\n\r\n  return Array.from(set);\r\n}\r\n","import {_limitValue} from './helpers.math';\r\nimport {_lookupByKey} from './helpers.collection';\r\n\r\nexport function fontString(pixelSize, fontStyle, fontFamily) {\r\n  return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\r\n}\r\n\r\n/**\r\n* Request animation polyfill\r\n*/\r\nexport const requestAnimFrame = (function() {\r\n  if (typeof window === 'undefined') {\r\n    return function(callback) {\r\n      return callback();\r\n    };\r\n  }\r\n  return window.requestAnimationFrame;\r\n}());\r\n\r\n/**\r\n * Throttles calling `fn` once per animation frame\r\n * Latest arguments are used on the actual call\r\n * @param {function} fn\r\n * @param {*} thisArg\r\n * @param {function} [updateFn]\r\n */\r\nexport function throttled(fn, thisArg, updateFn) {\r\n  const updateArgs = updateFn || ((args) => Array.prototype.slice.call(args));\r\n  let ticking = false;\r\n  let args = [];\r\n\r\n  return function(...rest) {\r\n    args = updateArgs(rest);\r\n\r\n    if (!ticking) {\r\n      ticking = true;\r\n      requestAnimFrame.call(window, () => {\r\n        ticking = false;\r\n        fn.apply(thisArg, args);\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Debounces calling `fn` for `delay` ms\r\n * @param {function} fn - Function to call.\r\n * @param {number} delay - Delay in ms. 0 = immediate invocation.\r\n * @returns {function}\r\n */\r\nexport function debounce(fn, delay) {\r\n  let timeout;\r\n  return function(...args) {\r\n    if (delay) {\r\n      clearTimeout(timeout);\r\n      timeout = setTimeout(fn, delay, args);\r\n    } else {\r\n      fn.apply(this, args);\r\n    }\r\n    return delay;\r\n  };\r\n}\r\n\r\n/**\r\n * Converts 'start' to 'left', 'end' to 'right' and others to 'center'\r\n * @param {string} align start, end, center\r\n * @private\r\n */\r\nexport const _toLeftRightCenter = (align) => align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\r\n\r\n/**\r\n * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`\r\n * @param {string} align start, end, center\r\n * @param {number} start value for start\r\n * @param {number} end value for end\r\n * @private\r\n */\r\nexport const _alignStartEnd = (align, start, end) => align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\r\n\r\n/**\r\n * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`\r\n * @param {string} align start, end, center\r\n * @param {number} left value for start\r\n * @param {number} right value for end\r\n * @param {boolean} rtl Is this an RTL draw\r\n * @private\r\n */\r\nexport const _textX = (align, left, right, rtl) => {\r\n  const check = rtl ? 'left' : 'right';\r\n  return align === check ? right : align === 'center' ? (left + right) / 2 : left;\r\n};\r\n\r\n/**\r\n * Return start and count of visible points.\r\n * @param {object} meta - dataset meta.\r\n * @param {array} points - array of point elements.\r\n * @param {boolean} animationsDisabled - if true animation is disabled.\r\n * @returns {{start: number; count: number}}\r\n * @private\r\n */\r\nexport function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {\r\n  const pointCount = points.length;\r\n\r\n  let start = 0;\r\n  let count = pointCount;\r\n\r\n  if (meta._sorted) {\r\n    const {iScale, _parsed} = meta;\r\n    const axis = iScale.axis;\r\n    const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\r\n\r\n    if (minDefined) {\r\n      start = _limitValue(Math.min(\r\n        _lookupByKey(_parsed, iScale.axis, min).lo,\r\n        animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo),\r\n      0, pointCount - 1);\r\n    }\r\n    if (maxDefined) {\r\n      count = _limitValue(Math.max(\r\n        _lookupByKey(_parsed, iScale.axis, max, true).hi + 1,\r\n        animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1),\r\n      start, pointCount) - start;\r\n    } else {\r\n      count = pointCount - start;\r\n    }\r\n  }\r\n\r\n  return {start, count};\r\n}\r\n\r\n/**\r\n * Checks if the scale ranges have changed.\r\n * @param {object} meta - dataset meta.\r\n * @returns {boolean}\r\n * @private\r\n */\r\nexport function _scaleRangesChanged(meta) {\r\n  const {xScale, yScale, _scaleRanges} = meta;\r\n  const newRanges = {\r\n    xmin: xScale.min,\r\n    xmax: xScale.max,\r\n    ymin: yScale.min,\r\n    ymax: yScale.max\r\n  };\r\n  if (!_scaleRanges) {\r\n    meta._scaleRanges = newRanges;\r\n    return true;\r\n  }\r\n  const changed = _scaleRanges.xmin !== xScale.min\r\n\t\t|| _scaleRanges.xmax !== xScale.max\r\n\t\t|| _scaleRanges.ymin !== yScale.min\r\n\t\t|| _scaleRanges.ymax !== yScale.max;\r\n\r\n  Object.assign(_scaleRanges, newRanges);\r\n  return changed;\r\n}\r\n","import {requestAnimFrame} from '../helpers/helpers.extras';\r\n\r\n/**\r\n * @typedef { import(\"./core.animation\").default } Animation\r\n * @typedef { import(\"./core.controller\").default } Chart\r\n */\r\n\r\n/**\r\n * Please use the module's default export which provides a singleton instance\r\n * Note: class is export for typedoc\r\n */\r\nexport class Animator {\r\n  constructor() {\r\n    this._request = null;\r\n    this._charts = new Map();\r\n    this._running = false;\r\n    this._lastDate = undefined;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _notify(chart, anims, date, type) {\r\n    const callbacks = anims.listeners[type];\r\n    const numSteps = anims.duration;\r\n\r\n    callbacks.forEach(fn => fn({\r\n      chart,\r\n      initial: anims.initial,\r\n      numSteps,\r\n      currentStep: Math.min(date - anims.start, numSteps)\r\n    }));\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _refresh() {\r\n    if (this._request) {\r\n      return;\r\n    }\r\n    this._running = true;\r\n\r\n    this._request = requestAnimFrame.call(window, () => {\r\n      this._update();\r\n      this._request = null;\r\n\r\n      if (this._running) {\r\n        this._refresh();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _update(date = Date.now()) {\r\n    let remaining = 0;\r\n\r\n    this._charts.forEach((anims, chart) => {\r\n      if (!anims.running || !anims.items.length) {\r\n        return;\r\n      }\r\n      const items = anims.items;\r\n      let i = items.length - 1;\r\n      let draw = false;\r\n      let item;\r\n\r\n      for (; i >= 0; --i) {\r\n        item = items[i];\r\n\r\n        if (item._active) {\r\n          if (item._total > anims.duration) {\r\n            // if the animation has been updated and its duration prolonged,\r\n            // update to total duration of current animations run (for progress event)\r\n            anims.duration = item._total;\r\n          }\r\n          item.tick(date);\r\n          draw = true;\r\n        } else {\r\n          // Remove the item by replacing it with last item and removing the last\r\n          // A lot faster than splice.\r\n          items[i] = items[items.length - 1];\r\n          items.pop();\r\n        }\r\n      }\r\n\r\n      if (draw) {\r\n        chart.draw();\r\n        this._notify(chart, anims, date, 'progress');\r\n      }\r\n\r\n      if (!items.length) {\r\n        anims.running = false;\r\n        this._notify(chart, anims, date, 'complete');\r\n        anims.initial = false;\r\n      }\r\n\r\n      remaining += items.length;\r\n    });\r\n\r\n    this._lastDate = date;\r\n\r\n    if (remaining === 0) {\r\n      this._running = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getAnims(chart) {\r\n    const charts = this._charts;\r\n    let anims = charts.get(chart);\r\n    if (!anims) {\r\n      anims = {\r\n        running: false,\r\n        initial: true,\r\n        items: [],\r\n        listeners: {\r\n          complete: [],\r\n          progress: []\r\n        }\r\n      };\r\n      charts.set(chart, anims);\r\n    }\r\n    return anims;\r\n  }\r\n\r\n  /**\r\n\t * @param {Chart} chart\r\n\t * @param {string} event - event name\r\n\t * @param {Function} cb - callback\r\n\t */\r\n  listen(chart, event, cb) {\r\n    this._getAnims(chart).listeners[event].push(cb);\r\n  }\r\n\r\n  /**\r\n\t * Add animations\r\n\t * @param {Chart} chart\r\n\t * @param {Animation[]} items - animations\r\n\t */\r\n  add(chart, items) {\r\n    if (!items || !items.length) {\r\n      return;\r\n    }\r\n    this._getAnims(chart).items.push(...items);\r\n  }\r\n\r\n  /**\r\n\t * Counts number of active animations for the chart\r\n\t * @param {Chart} chart\r\n\t */\r\n  has(chart) {\r\n    return this._getAnims(chart).items.length > 0;\r\n  }\r\n\r\n  /**\r\n\t * Start animating (all charts)\r\n\t * @param {Chart} chart\r\n\t */\r\n  start(chart) {\r\n    const anims = this._charts.get(chart);\r\n    if (!anims) {\r\n      return;\r\n    }\r\n    anims.running = true;\r\n    anims.start = Date.now();\r\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\r\n    this._refresh();\r\n  }\r\n\r\n  running(chart) {\r\n    if (!this._running) {\r\n      return false;\r\n    }\r\n    const anims = this._charts.get(chart);\r\n    if (!anims || !anims.running || !anims.items.length) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n\t * Stop all animations for the chart\r\n\t * @param {Chart} chart\r\n\t */\r\n  stop(chart) {\r\n    const anims = this._charts.get(chart);\r\n    if (!anims || !anims.items.length) {\r\n      return;\r\n    }\r\n    const items = anims.items;\r\n    let i = items.length - 1;\r\n\r\n    for (; i >= 0; --i) {\r\n      items[i].cancel();\r\n    }\r\n    anims.items = [];\r\n    this._notify(chart, anims, Date.now(), 'complete');\r\n  }\r\n\r\n  /**\r\n\t * Remove chart from Animator\r\n\t * @param {Chart} chart\r\n\t */\r\n  remove(chart) {\r\n    return this._charts.delete(chart);\r\n  }\r\n}\r\n\r\n// singleton instance\r\nexport default /* #__PURE__ */ new Animator();\r\n","/*!\n * @kurkle/color v0.2.1\n * https://github.com/kurkle/color#readme\n * (c) 2022 Jukka Kurkela\n * Released under the MIT License\n */\nfunction round(v) {\n  return v + 0.5 | 0;\n}\nconst lim = (v, l, h) => Math.max(Math.min(v, h), l);\nfunction p2b(v) {\n  return lim(round(v * 2.55), 0, 255);\n}\nfunction b2p(v) {\n  return lim(round(v / 2.55), 0, 100);\n}\nfunction n2b(v) {\n  return lim(round(v * 255), 0, 255);\n}\nfunction b2n(v) {\n  return lim(round(v / 2.55) / 100, 0, 1);\n}\nfunction n2p(v) {\n  return lim(round(v * 100), 0, 100);\n}\n\nconst map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};\nconst hex = [...'0123456789ABCDEF'];\nconst h1 = b => hex[b & 0xF];\nconst h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];\nconst eq = b => ((b & 0xF0) >> 4) === (b & 0xF);\nconst isShort = v => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\nfunction hexParse(str) {\n  var len = str.length;\n  var ret;\n  if (str[0] === '#') {\n    if (len === 4 || len === 5) {\n      ret = {\n        r: 255 & map$1[str[1]] * 17,\n        g: 255 & map$1[str[2]] * 17,\n        b: 255 & map$1[str[3]] * 17,\n        a: len === 5 ? map$1[str[4]] * 17 : 255\n      };\n    } else if (len === 7 || len === 9) {\n      ret = {\n        r: map$1[str[1]] << 4 | map$1[str[2]],\n        g: map$1[str[3]] << 4 | map$1[str[4]],\n        b: map$1[str[5]] << 4 | map$1[str[6]],\n        a: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255\n      };\n    }\n  }\n  return ret;\n}\nconst alpha = (a, f) => a < 255 ? f(a) : '';\nfunction hexString(v) {\n  var f = isShort(v) ? h1 : h2;\n  return v\n    ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f)\n    : undefined;\n}\n\nconst HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction hsl2rgbn(h, s, l) {\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  return [f(0), f(8), f(4)];\n}\nfunction hsv2rgbn(h, s, v) {\n  const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  return [f(5), f(3), f(1)];\n}\nfunction hwb2rgbn(h, w, b) {\n  const rgb = hsl2rgbn(h, 1, 0.5);\n  let i;\n  if (w + b > 1) {\n    i = 1 / (w + b);\n    w *= i;\n    b *= i;\n  }\n  for (i = 0; i < 3; i++) {\n    rgb[i] *= 1 - w - b;\n    rgb[i] += w;\n  }\n  return rgb;\n}\nfunction hueValue(r, g, b, d, max) {\n  if (r === max) {\n    return ((g - b) / d) + (g < b ? 6 : 0);\n  }\n  if (g === max) {\n    return (b - r) / d + 2;\n  }\n  return (r - g) / d + 4;\n}\nfunction rgb2hsl(v) {\n  const range = 255;\n  const r = v.r / range;\n  const g = v.g / range;\n  const b = v.b / range;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const l = (max + min) / 2;\n  let h, s, d;\n  if (max !== min) {\n    d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    h = hueValue(r, g, b, d, max);\n    h = h * 60 + 0.5;\n  }\n  return [h | 0, s || 0, l];\n}\nfunction calln(f, a, b, c) {\n  return (\n    Array.isArray(a)\n      ? f(a[0], a[1], a[2])\n      : f(a, b, c)\n  ).map(n2b);\n}\nfunction hsl2rgb(h, s, l) {\n  return calln(hsl2rgbn, h, s, l);\n}\nfunction hwb2rgb(h, w, b) {\n  return calln(hwb2rgbn, h, w, b);\n}\nfunction hsv2rgb(h, s, v) {\n  return calln(hsv2rgbn, h, s, v);\n}\nfunction hue(h) {\n  return (h % 360 + 360) % 360;\n}\nfunction hueParse(str) {\n  const m = HUE_RE.exec(str);\n  let a = 255;\n  let v;\n  if (!m) {\n    return;\n  }\n  if (m[5] !== v) {\n    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);\n  }\n  const h = hue(+m[2]);\n  const p1 = +m[3] / 100;\n  const p2 = +m[4] / 100;\n  if (m[1] === 'hwb') {\n    v = hwb2rgb(h, p1, p2);\n  } else if (m[1] === 'hsv') {\n    v = hsv2rgb(h, p1, p2);\n  } else {\n    v = hsl2rgb(h, p1, p2);\n  }\n  return {\n    r: v[0],\n    g: v[1],\n    b: v[2],\n    a: a\n  };\n}\nfunction rotate(v, deg) {\n  var h = rgb2hsl(v);\n  h[0] = hue(h[0] + deg);\n  h = hsl2rgb(h);\n  v.r = h[0];\n  v.g = h[1];\n  v.b = h[2];\n}\nfunction hslString(v) {\n  if (!v) {\n    return;\n  }\n  const a = rgb2hsl(v);\n  const h = a[0];\n  const s = n2p(a[1]);\n  const l = n2p(a[2]);\n  return v.a < 255\n    ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`\n    : `hsl(${h}, ${s}%, ${l}%)`;\n}\n\nconst map = {\n  x: 'dark',\n  Z: 'light',\n  Y: 're',\n  X: 'blu',\n  W: 'gr',\n  V: 'medium',\n  U: 'slate',\n  A: 'ee',\n  T: 'ol',\n  S: 'or',\n  B: 'ra',\n  C: 'lateg',\n  D: 'ights',\n  R: 'in',\n  Q: 'turquois',\n  E: 'hi',\n  P: 'ro',\n  O: 'al',\n  N: 'le',\n  M: 'de',\n  L: 'yello',\n  F: 'en',\n  K: 'ch',\n  G: 'arks',\n  H: 'ea',\n  I: 'ightg',\n  J: 'wh'\n};\nconst names$1 = {\n  OiceXe: 'f0f8ff',\n  antiquewEte: 'faebd7',\n  aqua: 'ffff',\n  aquamarRe: '7fffd4',\n  azuY: 'f0ffff',\n  beige: 'f5f5dc',\n  bisque: 'ffe4c4',\n  black: '0',\n  blanKedOmond: 'ffebcd',\n  Xe: 'ff',\n  XeviTet: '8a2be2',\n  bPwn: 'a52a2a',\n  burlywood: 'deb887',\n  caMtXe: '5f9ea0',\n  KartYuse: '7fff00',\n  KocTate: 'd2691e',\n  cSO: 'ff7f50',\n  cSnflowerXe: '6495ed',\n  cSnsilk: 'fff8dc',\n  crimson: 'dc143c',\n  cyan: 'ffff',\n  xXe: '8b',\n  xcyan: '8b8b',\n  xgTMnPd: 'b8860b',\n  xWay: 'a9a9a9',\n  xgYF: '6400',\n  xgYy: 'a9a9a9',\n  xkhaki: 'bdb76b',\n  xmagFta: '8b008b',\n  xTivegYF: '556b2f',\n  xSange: 'ff8c00',\n  xScEd: '9932cc',\n  xYd: '8b0000',\n  xsOmon: 'e9967a',\n  xsHgYF: '8fbc8f',\n  xUXe: '483d8b',\n  xUWay: '2f4f4f',\n  xUgYy: '2f4f4f',\n  xQe: 'ced1',\n  xviTet: '9400d3',\n  dAppRk: 'ff1493',\n  dApskyXe: 'bfff',\n  dimWay: '696969',\n  dimgYy: '696969',\n  dodgerXe: '1e90ff',\n  fiYbrick: 'b22222',\n  flSOwEte: 'fffaf0',\n  foYstWAn: '228b22',\n  fuKsia: 'ff00ff',\n  gaRsbSo: 'dcdcdc',\n  ghostwEte: 'f8f8ff',\n  gTd: 'ffd700',\n  gTMnPd: 'daa520',\n  Way: '808080',\n  gYF: '8000',\n  gYFLw: 'adff2f',\n  gYy: '808080',\n  honeyMw: 'f0fff0',\n  hotpRk: 'ff69b4',\n  RdianYd: 'cd5c5c',\n  Rdigo: '4b0082',\n  ivSy: 'fffff0',\n  khaki: 'f0e68c',\n  lavFMr: 'e6e6fa',\n  lavFMrXsh: 'fff0f5',\n  lawngYF: '7cfc00',\n  NmoncEffon: 'fffacd',\n  ZXe: 'add8e6',\n  ZcSO: 'f08080',\n  Zcyan: 'e0ffff',\n  ZgTMnPdLw: 'fafad2',\n  ZWay: 'd3d3d3',\n  ZgYF: '90ee90',\n  ZgYy: 'd3d3d3',\n  ZpRk: 'ffb6c1',\n  ZsOmon: 'ffa07a',\n  ZsHgYF: '20b2aa',\n  ZskyXe: '87cefa',\n  ZUWay: '778899',\n  ZUgYy: '778899',\n  ZstAlXe: 'b0c4de',\n  ZLw: 'ffffe0',\n  lime: 'ff00',\n  limegYF: '32cd32',\n  lRF: 'faf0e6',\n  magFta: 'ff00ff',\n  maPon: '800000',\n  VaquamarRe: '66cdaa',\n  VXe: 'cd',\n  VScEd: 'ba55d3',\n  VpurpN: '9370db',\n  VsHgYF: '3cb371',\n  VUXe: '7b68ee',\n  VsprRggYF: 'fa9a',\n  VQe: '48d1cc',\n  VviTetYd: 'c71585',\n  midnightXe: '191970',\n  mRtcYam: 'f5fffa',\n  mistyPse: 'ffe4e1',\n  moccasR: 'ffe4b5',\n  navajowEte: 'ffdead',\n  navy: '80',\n  Tdlace: 'fdf5e6',\n  Tive: '808000',\n  TivedBb: '6b8e23',\n  Sange: 'ffa500',\n  SangeYd: 'ff4500',\n  ScEd: 'da70d6',\n  pOegTMnPd: 'eee8aa',\n  pOegYF: '98fb98',\n  pOeQe: 'afeeee',\n  pOeviTetYd: 'db7093',\n  papayawEp: 'ffefd5',\n  pHKpuff: 'ffdab9',\n  peru: 'cd853f',\n  pRk: 'ffc0cb',\n  plum: 'dda0dd',\n  powMrXe: 'b0e0e6',\n  purpN: '800080',\n  YbeccapurpN: '663399',\n  Yd: 'ff0000',\n  Psybrown: 'bc8f8f',\n  PyOXe: '4169e1',\n  saddNbPwn: '8b4513',\n  sOmon: 'fa8072',\n  sandybPwn: 'f4a460',\n  sHgYF: '2e8b57',\n  sHshell: 'fff5ee',\n  siFna: 'a0522d',\n  silver: 'c0c0c0',\n  skyXe: '87ceeb',\n  UXe: '6a5acd',\n  UWay: '708090',\n  UgYy: '708090',\n  snow: 'fffafa',\n  sprRggYF: 'ff7f',\n  stAlXe: '4682b4',\n  tan: 'd2b48c',\n  teO: '8080',\n  tEstN: 'd8bfd8',\n  tomato: 'ff6347',\n  Qe: '40e0d0',\n  viTet: 'ee82ee',\n  JHt: 'f5deb3',\n  wEte: 'ffffff',\n  wEtesmoke: 'f5f5f5',\n  Lw: 'ffff00',\n  LwgYF: '9acd32'\n};\nfunction unpack() {\n  const unpacked = {};\n  const keys = Object.keys(names$1);\n  const tkeys = Object.keys(map);\n  let i, j, k, ok, nk;\n  for (i = 0; i < keys.length; i++) {\n    ok = nk = keys[i];\n    for (j = 0; j < tkeys.length; j++) {\n      k = tkeys[j];\n      nk = nk.replace(k, map[k]);\n    }\n    k = parseInt(names$1[ok], 16);\n    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];\n  }\n  return unpacked;\n}\n\nlet names;\nfunction nameParse(str) {\n  if (!names) {\n    names = unpack();\n    names.transparent = [0, 0, 0, 0];\n  }\n  const a = names[str.toLowerCase()];\n  return a && {\n    r: a[0],\n    g: a[1],\n    b: a[2],\n    a: a.length === 4 ? a[3] : 255\n  };\n}\n\nconst RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction rgbParse(str) {\n  const m = RGB_RE.exec(str);\n  let a = 255;\n  let r, g, b;\n  if (!m) {\n    return;\n  }\n  if (m[7] !== r) {\n    const v = +m[7];\n    a = m[8] ? p2b(v) : lim(v * 255, 0, 255);\n  }\n  r = +m[1];\n  g = +m[3];\n  b = +m[5];\n  r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));\n  g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));\n  b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n}\nfunction rgbString(v) {\n  return v && (\n    v.a < 255\n      ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`\n      : `rgb(${v.r}, ${v.g}, ${v.b})`\n  );\n}\n\nconst to = v => v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;\nconst from = v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\nfunction interpolate(rgb1, rgb2, t) {\n  const r = from(b2n(rgb1.r));\n  const g = from(b2n(rgb1.g));\n  const b = from(b2n(rgb1.b));\n  return {\n    r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),\n    g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),\n    b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),\n    a: rgb1.a + t * (rgb2.a - rgb1.a)\n  };\n}\n\nfunction modHSL(v, i, ratio) {\n  if (v) {\n    let tmp = rgb2hsl(v);\n    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n    tmp = hsl2rgb(tmp);\n    v.r = tmp[0];\n    v.g = tmp[1];\n    v.b = tmp[2];\n  }\n}\nfunction clone(v, proto) {\n  return v ? Object.assign(proto || {}, v) : v;\n}\nfunction fromObject(input) {\n  var v = {r: 0, g: 0, b: 0, a: 255};\n  if (Array.isArray(input)) {\n    if (input.length >= 3) {\n      v = {r: input[0], g: input[1], b: input[2], a: 255};\n      if (input.length > 3) {\n        v.a = n2b(input[3]);\n      }\n    }\n  } else {\n    v = clone(input, {r: 0, g: 0, b: 0, a: 1});\n    v.a = n2b(v.a);\n  }\n  return v;\n}\nfunction functionParse(str) {\n  if (str.charAt(0) === 'r') {\n    return rgbParse(str);\n  }\n  return hueParse(str);\n}\nclass Color {\n  constructor(input) {\n    if (input instanceof Color) {\n      return input;\n    }\n    const type = typeof input;\n    let v;\n    if (type === 'object') {\n      v = fromObject(input);\n    } else if (type === 'string') {\n      v = hexParse(input) || nameParse(input) || functionParse(input);\n    }\n    this._rgb = v;\n    this._valid = !!v;\n  }\n  get valid() {\n    return this._valid;\n  }\n  get rgb() {\n    var v = clone(this._rgb);\n    if (v) {\n      v.a = b2n(v.a);\n    }\n    return v;\n  }\n  set rgb(obj) {\n    this._rgb = fromObject(obj);\n  }\n  rgbString() {\n    return this._valid ? rgbString(this._rgb) : undefined;\n  }\n  hexString() {\n    return this._valid ? hexString(this._rgb) : undefined;\n  }\n  hslString() {\n    return this._valid ? hslString(this._rgb) : undefined;\n  }\n  mix(color, weight) {\n    if (color) {\n      const c1 = this.rgb;\n      const c2 = color.rgb;\n      let w2;\n      const p = weight === w2 ? 0.5 : weight;\n      const w = 2 * p - 1;\n      const a = c1.a - c2.a;\n      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      w2 = 1 - w1;\n      c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n      c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n      c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n      c1.a = p * c1.a + (1 - p) * c2.a;\n      this.rgb = c1;\n    }\n    return this;\n  }\n  interpolate(color, t) {\n    if (color) {\n      this._rgb = interpolate(this._rgb, color._rgb, t);\n    }\n    return this;\n  }\n  clone() {\n    return new Color(this.rgb);\n  }\n  alpha(a) {\n    this._rgb.a = n2b(a);\n    return this;\n  }\n  clearer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 - ratio;\n    return this;\n  }\n  greyscale() {\n    const rgb = this._rgb;\n    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n    rgb.r = rgb.g = rgb.b = val;\n    return this;\n  }\n  opaquer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 + ratio;\n    return this;\n  }\n  negate() {\n    const v = this._rgb;\n    v.r = 255 - v.r;\n    v.g = 255 - v.g;\n    v.b = 255 - v.b;\n    return this;\n  }\n  lighten(ratio) {\n    modHSL(this._rgb, 2, ratio);\n    return this;\n  }\n  darken(ratio) {\n    modHSL(this._rgb, 2, -ratio);\n    return this;\n  }\n  saturate(ratio) {\n    modHSL(this._rgb, 1, ratio);\n    return this;\n  }\n  desaturate(ratio) {\n    modHSL(this._rgb, 1, -ratio);\n    return this;\n  }\n  rotate(deg) {\n    rotate(this._rgb, deg);\n    return this;\n  }\n}\n\nfunction index_esm(input) {\n  return new Color(input);\n}\n\nexport { Color, b2n, b2p, index_esm as default, hexParse, hexString, hsl2rgb, hslString, hsv2rgb, hueParse, hwb2rgb, lim, n2b, n2p, nameParse, p2b, rgb2hsl, rgbParse, rgbString, rotate, round };\n","import colorLib, {Color} from '@kurkle/color';\r\n\r\nexport function isPatternOrGradient(value: unknown): value is CanvasPattern | CanvasGradient {\r\n  if (value && typeof value === 'object') {\r\n    const type = value.toString();\r\n    return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport function color(value: CanvasGradient): CanvasGradient;\r\nexport function color(value: CanvasPattern): CanvasPattern;\r\nexport function color(\r\n  value:\r\n  | string\r\n  | { r: number; g: number; b: number; a: number }\r\n  | [number, number, number]\r\n  | [number, number, number, number]\r\n): Color;\r\nexport function color(value) {\r\n  return isPatternOrGradient(value) ? value : colorLib(value);\r\n}\r\n\r\nexport function getHoverColor(value: CanvasGradient): CanvasGradient;\r\nexport function getHoverColor(value: CanvasPattern): CanvasPattern;\r\nexport function getHoverColor(value: string): string;\r\nexport function getHoverColor(value) {\r\n  return isPatternOrGradient(value)\r\n    ? value\r\n    : colorLib(value).saturate(0.5).darken(0.1).hexString();\r\n}\r\n","const numbers = ['x', 'y', 'borderWidth', 'radius', 'tension'];\r\nconst colors = ['color', 'borderColor', 'backgroundColor'];\r\n\r\nexport function applyAnimationsDefaults(defaults) {\r\n  defaults.set('animation', {\r\n    delay: undefined,\r\n    duration: 1000,\r\n    easing: 'easeOutQuart',\r\n    fn: undefined,\r\n    from: undefined,\r\n    loop: undefined,\r\n    to: undefined,\r\n    type: undefined,\r\n  });\r\n\r\n  defaults.describe('animation', {\r\n    _fallback: false,\r\n    _indexable: false,\r\n    _scriptable: (name) => name !== 'onProgress' && name !== 'onComplete' && name !== 'fn',\r\n  });\r\n\r\n  defaults.set('animations', {\r\n    colors: {\r\n      type: 'color',\r\n      properties: colors\r\n    },\r\n    numbers: {\r\n      type: 'number',\r\n      properties: numbers\r\n    },\r\n  });\r\n\r\n  defaults.describe('animations', {\r\n    _fallback: 'animation',\r\n  });\r\n\r\n  defaults.set('transitions', {\r\n    active: {\r\n      animation: {\r\n        duration: 400\r\n      }\r\n    },\r\n    resize: {\r\n      animation: {\r\n        duration: 0\r\n      }\r\n    },\r\n    show: {\r\n      animations: {\r\n        colors: {\r\n          from: 'transparent'\r\n        },\r\n        visible: {\r\n          type: 'boolean',\r\n          duration: 0 // show immediately\r\n        },\r\n      }\r\n    },\r\n    hide: {\r\n      animations: {\r\n        colors: {\r\n          to: 'transparent'\r\n        },\r\n        visible: {\r\n          type: 'boolean',\r\n          easing: 'linear',\r\n          fn: v => v | 0 // for keeping the dataset visible all the way through the animation\r\n        },\r\n      }\r\n    }\r\n  });\r\n}\r\n","\r\nconst intlCache = new Map<string, Intl.NumberFormat>();\r\n\r\nfunction getNumberFormat(locale: string, options?: Intl.NumberFormatOptions) {\r\n  options = options || {};\r\n  const cacheKey = locale + JSON.stringify(options);\r\n  let formatter = intlCache.get(cacheKey);\r\n  if (!formatter) {\r\n    formatter = new Intl.NumberFormat(locale, options);\r\n    intlCache.set(cacheKey, formatter);\r\n  }\r\n  return formatter;\r\n}\r\n\r\nexport function formatNumber(num: number, locale: string, options?: Intl.NumberFormatOptions) {\r\n  return getNumberFormat(locale, options).format(num);\r\n}\r\n","import {isArray} from '../helpers/helpers.core';\r\nimport {formatNumber} from '../helpers/helpers.intl';\r\nimport {log10} from '../helpers/helpers.math';\r\n\r\n/**\r\n * Namespace to hold formatters for different types of ticks\r\n * @namespace Chart.Ticks.formatters\r\n */\r\nconst formatters = {\r\n  /**\r\n   * Formatter for value labels\r\n   * @method Chart.Ticks.formatters.values\r\n   * @param value the value to display\r\n   * @return {string|string[]} the label to display\r\n   */\r\n  values(value) {\r\n    return isArray(value) ? /** @type {string[]} */ (value) : '' + value;\r\n  },\r\n\r\n  /**\r\n   * Formatter for numeric ticks\r\n   * @method Chart.Ticks.formatters.numeric\r\n   * @param tickValue {number} the value to be formatted\r\n   * @param index {number} the position of the tickValue parameter in the ticks array\r\n   * @param ticks {object[]} the list of ticks being converted\r\n   * @return {string} string representation of the tickValue parameter\r\n   */\r\n  numeric(tickValue, index, ticks) {\r\n    if (tickValue === 0) {\r\n      return '0'; // never show decimal places for 0\r\n    }\r\n\r\n    const locale = this.chart.options.locale;\r\n    let notation;\r\n    let delta = tickValue; // This is used when there are less than 2 ticks as the tick interval.\r\n\r\n    if (ticks.length > 1) {\r\n      // all ticks are small or there huge numbers; use scientific notation\r\n      const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\r\n      if (maxTick < 1e-4 || maxTick > 1e+15) {\r\n        notation = 'scientific';\r\n      }\r\n\r\n      delta = calculateDelta(tickValue, ticks);\r\n    }\r\n\r\n    const logDelta = log10(Math.abs(delta));\r\n    const numDecimal = Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0); // toFixed has a max of 20 decimal places\r\n\r\n    const options = {notation, minimumFractionDigits: numDecimal, maximumFractionDigits: numDecimal};\r\n    Object.assign(options, this.options.ticks.format);\r\n\r\n    return formatNumber(tickValue, locale, options);\r\n  },\r\n\r\n\r\n  /**\r\n   * Formatter for logarithmic ticks\r\n   * @method Chart.Ticks.formatters.logarithmic\r\n   * @param tickValue {number} the value to be formatted\r\n   * @param index {number} the position of the tickValue parameter in the ticks array\r\n   * @param ticks {object[]} the list of ticks being converted\r\n   * @return {string} string representation of the tickValue parameter\r\n   */\r\n  logarithmic(tickValue, index, ticks) {\r\n    if (tickValue === 0) {\r\n      return '0';\r\n    }\r\n    const remain = ticks[index].significand || (tickValue / (Math.pow(10, Math.floor(log10(tickValue)))));\r\n    if ([1, 2, 3, 5, 10, 15].includes(remain) || index > 0.8 * ticks.length) {\r\n      return formatters.numeric.call(this, tickValue, index, ticks);\r\n    }\r\n    return '';\r\n  }\r\n\r\n};\r\n\r\n\r\nfunction calculateDelta(tickValue, ticks) {\r\n  // Figure out how many digits to show\r\n  // The space between the first two ticks might be smaller than normal spacing\r\n  let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\r\n\r\n  // If we have a number like 2.5 as the delta, figure out how many decimal places we need\r\n  if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\r\n    // not an integer\r\n    delta = tickValue - Math.floor(tickValue);\r\n  }\r\n  return delta;\r\n}\r\n\r\n/**\r\n * Namespace to hold static tick generation functions\r\n * @namespace Chart.Ticks\r\n */\r\nexport default {formatters};\r\n","import {getHoverColor} from '../helpers/helpers.color';\r\nimport {isObject, merge, valueOrDefault} from '../helpers/helpers.core';\r\nimport {applyAnimationsDefaults} from './core.animations.defaults';\r\nimport {applyLayoutsDefaults} from './core.layouts.defaults';\r\nimport {applyScaleDefaults} from './core.scale.defaults';\r\n\r\nexport const overrides = Object.create(null);\r\nexport const descriptors = Object.create(null);\r\n\r\n/**\r\n * @param {object} node\r\n * @param {string} key\r\n * @return {object}\r\n */\r\nfunction getScope(node, key) {\r\n  if (!key) {\r\n    return node;\r\n  }\r\n  const keys = key.split('.');\r\n  for (let i = 0, n = keys.length; i < n; ++i) {\r\n    const k = keys[i];\r\n    node = node[k] || (node[k] = Object.create(null));\r\n  }\r\n  return node;\r\n}\r\n\r\nfunction set(root, scope, values) {\r\n  if (typeof scope === 'string') {\r\n    return merge(getScope(root, scope), values);\r\n  }\r\n  return merge(getScope(root, ''), scope);\r\n}\r\n\r\n/**\r\n * Please use the module's default export which provides a singleton instance\r\n * Note: class is exported for typedoc\r\n */\r\nexport class Defaults {\r\n  constructor(_descriptors, _appliers) {\r\n    this.animation = undefined;\r\n    this.backgroundColor = 'rgba(0,0,0,0.1)';\r\n    this.borderColor = 'rgba(0,0,0,0.1)';\r\n    this.color = '#666';\r\n    this.datasets = {};\r\n    this.devicePixelRatio = (context) => context.chart.platform.getDevicePixelRatio();\r\n    this.elements = {};\r\n    this.events = [\r\n      'mousemove',\r\n      'mouseout',\r\n      'click',\r\n      'touchstart',\r\n      'touchmove'\r\n    ];\r\n    this.font = {\r\n      family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\r\n      size: 12,\r\n      style: 'normal',\r\n      lineHeight: 1.2,\r\n      weight: null\r\n    };\r\n    this.hover = {};\r\n    this.hoverBackgroundColor = (ctx, options) => getHoverColor(options.backgroundColor);\r\n    this.hoverBorderColor = (ctx, options) => getHoverColor(options.borderColor);\r\n    this.hoverColor = (ctx, options) => getHoverColor(options.color);\r\n    this.indexAxis = 'x';\r\n    this.interaction = {\r\n      mode: 'nearest',\r\n      intersect: true,\r\n      includeInvisible: false\r\n    };\r\n    this.maintainAspectRatio = true;\r\n    this.onHover = null;\r\n    this.onClick = null;\r\n    this.parsing = true;\r\n    this.plugins = {};\r\n    this.responsive = true;\r\n    this.scale = undefined;\r\n    this.scales = {};\r\n    this.showLine = true;\r\n    this.drawActiveElementsOnTop = true;\r\n\r\n    this.describe(_descriptors);\r\n    this.apply(_appliers);\r\n  }\r\n\r\n  /**\r\n\t * @param {string|object} scope\r\n\t * @param {object} [values]\r\n\t */\r\n  set(scope, values) {\r\n    return set(this, scope, values);\r\n  }\r\n\r\n  /**\r\n\t * @param {string} scope\r\n\t */\r\n  get(scope) {\r\n    return getScope(this, scope);\r\n  }\r\n\r\n  /**\r\n\t * @param {string|object} scope\r\n\t * @param {object} [values]\r\n\t */\r\n  describe(scope, values) {\r\n    return set(descriptors, scope, values);\r\n  }\r\n\r\n  override(scope, values) {\r\n    return set(overrides, scope, values);\r\n  }\r\n\r\n  /**\r\n\t * Routes the named defaults to fallback to another scope/name.\r\n\t * This routing is useful when those target values, like defaults.color, are changed runtime.\r\n\t * If the values would be copied, the runtime change would not take effect. By routing, the\r\n\t * fallback is evaluated at each access, so its always up to date.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * \tdefaults.route('elements.arc', 'backgroundColor', '', 'color')\r\n\t *   - reads the backgroundColor from defaults.color when undefined locally\r\n\t *\r\n\t * @param {string} scope Scope this route applies to.\r\n\t * @param {string} name Property name that should be routed to different namespace when not defined here.\r\n\t * @param {string} targetScope The namespace where those properties should be routed to.\r\n\t * Empty string ('') is the root of defaults.\r\n\t * @param {string} targetName The target name in the target scope the property should be routed to.\r\n\t */\r\n  route(scope, name, targetScope, targetName) {\r\n    const scopeObject = getScope(this, scope);\r\n    const targetScopeObject = getScope(this, targetScope);\r\n    const privateName = '_' + name;\r\n\r\n    Object.defineProperties(scopeObject, {\r\n      // A private property is defined to hold the actual value, when this property is set in its scope (set in the setter)\r\n      [privateName]: {\r\n        value: scopeObject[name],\r\n        writable: true\r\n      },\r\n      // The actual property is defined as getter/setter so we can do the routing when value is not locally set.\r\n      [name]: {\r\n        enumerable: true,\r\n        get() {\r\n          const local = this[privateName];\r\n          const target = targetScopeObject[targetName];\r\n          if (isObject(local)) {\r\n            return Object.assign({}, target, local);\r\n          }\r\n          return valueOrDefault(local, target);\r\n        },\r\n        set(value) {\r\n          this[privateName] = value;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  apply(appliers) {\r\n    appliers.forEach((apply) => apply(this));\r\n  }\r\n}\r\n\r\n// singleton instance\r\nexport default /* #__PURE__ */ new Defaults({\r\n  _scriptable: (name) => !name.startsWith('on'),\r\n  _indexable: (name) => name !== 'events',\r\n  hover: {\r\n    _fallback: 'interaction'\r\n  },\r\n  interaction: {\r\n    _scriptable: false,\r\n    _indexable: false,\r\n  }\r\n}, [applyAnimationsDefaults, applyLayoutsDefaults, applyScaleDefaults]);\r\n","export function applyLayoutsDefaults(defaults) {\r\n  defaults.set('layout', {\r\n    autoPadding: true,\r\n    padding: {\r\n      top: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      left: 0\r\n    }\r\n  });\r\n}\r\n","import Ticks from './core.ticks';\r\n\r\nexport function applyScaleDefaults(defaults) {\r\n  defaults.set('scale', {\r\n    display: true,\r\n    offset: false,\r\n    reverse: false,\r\n    beginAtZero: false,\r\n\r\n    /**\r\n     * Scale boundary strategy (bypassed by min/max time options)\r\n     * - `data`: make sure data are fully visible, ticks outside are removed\r\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\r\n     * @see https://github.com/chartjs/Chart.js/pull/4556\r\n     * @since 3.0.0\r\n     */\r\n    bounds: 'ticks',\r\n\r\n    /**\r\n     * Addition grace added to max and reduced from min data value.\r\n     * @since 3.0.0\r\n     */\r\n    grace: 0,\r\n\r\n    // grid line settings\r\n    grid: {\r\n      display: true,\r\n      lineWidth: 1,\r\n      drawOnChartArea: true,\r\n      drawTicks: true,\r\n      tickLength: 8,\r\n      tickWidth: (_ctx, options) => options.lineWidth,\r\n      tickColor: (_ctx, options) => options.color,\r\n      offset: false,\r\n    },\r\n\r\n    border: {\r\n      display: true,\r\n      dash: [],\r\n      dashOffset: 0.0,\r\n      width: 1\r\n    },\r\n\r\n    // scale title\r\n    title: {\r\n      // display property\r\n      display: false,\r\n\r\n      // actual label\r\n      text: '',\r\n\r\n      // top/bottom padding\r\n      padding: {\r\n        top: 4,\r\n        bottom: 4\r\n      }\r\n    },\r\n\r\n    // label settings\r\n    ticks: {\r\n      minRotation: 0,\r\n      maxRotation: 50,\r\n      mirror: false,\r\n      textStrokeWidth: 0,\r\n      textStrokeColor: '',\r\n      padding: 3,\r\n      display: true,\r\n      autoSkip: true,\r\n      autoSkipPadding: 3,\r\n      labelOffset: 0,\r\n      // We pass through arrays to be rendered as multiline labels, we convert Others to strings here.\r\n      callback: Ticks.formatters.values,\r\n      minor: {},\r\n      major: {},\r\n      align: 'center',\r\n      crossAlign: 'near',\r\n\r\n      showLabelBackdrop: false,\r\n      backdropColor: 'rgba(255, 255, 255, 0.75)',\r\n      backdropPadding: 2,\r\n    }\r\n  });\r\n\r\n  defaults.route('scale.ticks', 'color', '', 'color');\r\n  defaults.route('scale.grid', 'color', '', 'borderColor');\r\n  defaults.route('scale.border', 'color', '', 'borderColor');\r\n  defaults.route('scale.title', 'color', '', 'color');\r\n\r\n  defaults.describe('scale', {\r\n    _fallback: false,\r\n    _scriptable: (name) => !name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\r\n    _indexable: (name) => name !== 'borderDash' && name !== 'tickBorderDash' && name !== 'dash',\r\n  });\r\n\r\n  defaults.describe('scales', {\r\n    _fallback: 'scale',\r\n  });\r\n\r\n  defaults.describe('scale.ticks', {\r\n    _scriptable: (name) => name !== 'backdropPadding' && name !== 'callback',\r\n    _indexable: (name) => name !== 'backdropPadding',\r\n  });\r\n}\r\n","import {INFINITY} from './helpers.math';\r\n\r\n/**\r\n * Note: typedefs are auto-exported, so use a made-up `dom` namespace where\r\n * necessary to avoid duplicates with `export * from './helpers`; see\r\n * https://github.com/microsoft/TypeScript/issues/46011\r\n * @typedef { import(\"../core/core.controller\").default } dom.Chart\r\n * @typedef { import('../../types').ChartEvent } ChartEvent\r\n */\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _isDomSupported() {\r\n  return typeof window !== 'undefined' && typeof document !== 'undefined';\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _getParentNode(domNode) {\r\n  let parent = domNode.parentNode;\r\n  if (parent && parent.toString() === '[object ShadowRoot]') {\r\n    parent = parent.host;\r\n  }\r\n  return parent;\r\n}\r\n\r\n/**\r\n * convert max-width/max-height values that may be percentages into a number\r\n * @private\r\n */\r\nfunction parseMaxStyle(styleValue, node, parentProperty) {\r\n  let valueInPixels;\r\n  if (typeof styleValue === 'string') {\r\n    valueInPixels = parseInt(styleValue, 10);\r\n\r\n    if (styleValue.indexOf('%') !== -1) {\r\n      // percentage * size in dimension\r\n      valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\r\n    }\r\n  } else {\r\n    valueInPixels = styleValue;\r\n  }\r\n\r\n  return valueInPixels;\r\n}\r\n\r\nconst getComputedStyle = (element) => element.ownerDocument.defaultView.getComputedStyle(element, null);\r\n\r\nexport function getStyle(el, property) {\r\n  return getComputedStyle(el).getPropertyValue(property);\r\n}\r\n\r\nconst positions = ['top', 'right', 'bottom', 'left'];\r\nfunction getPositionedStyle(styles, style, suffix) {\r\n  const result = {};\r\n  suffix = suffix ? '-' + suffix : '';\r\n  for (let i = 0; i < 4; i++) {\r\n    const pos = positions[i];\r\n    result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\r\n  }\r\n  result.width = result.left + result.right;\r\n  result.height = result.top + result.bottom;\r\n  return result;\r\n}\r\n\r\nconst useOffsetPos = (x, y, target) => (x > 0 || y > 0) && (!target || !target.shadowRoot);\r\n\r\n/**\r\n * @param {Event} e\r\n * @param {HTMLCanvasElement} canvas\r\n * @returns {{x: number, y: number, box: boolean}}\r\n */\r\nfunction getCanvasPosition(e, canvas) {\r\n  // @ts-ignore\r\n  const touches = e.touches;\r\n  const source = touches && touches.length ? touches[0] : e;\r\n  const {offsetX, offsetY} = source;\r\n  let box = false;\r\n  let x, y;\r\n  if (useOffsetPos(offsetX, offsetY, e.target)) {\r\n    x = offsetX;\r\n    y = offsetY;\r\n  } else {\r\n    const rect = canvas.getBoundingClientRect();\r\n    x = source.clientX - rect.left;\r\n    y = source.clientY - rect.top;\r\n    box = true;\r\n  }\r\n  return {x, y, box};\r\n}\r\n\r\n/**\r\n * Gets an event's x, y coordinates, relative to the chart area\r\n * @param {Event|ChartEvent} evt\r\n * @param {dom.Chart} chart\r\n * @returns {{x: number, y: number}}\r\n */\r\nexport function getRelativePosition(evt, chart) {\r\n  if ('native' in evt) {\r\n    return evt;\r\n  }\r\n\r\n  const {canvas, currentDevicePixelRatio} = chart;\r\n  const style = getComputedStyle(canvas);\r\n  const borderBox = style.boxSizing === 'border-box';\r\n  const paddings = getPositionedStyle(style, 'padding');\r\n  const borders = getPositionedStyle(style, 'border', 'width');\r\n  const {x, y, box} = getCanvasPosition(evt, canvas);\r\n  const xOffset = paddings.left + (box && borders.left);\r\n  const yOffset = paddings.top + (box && borders.top);\r\n\r\n  let {width, height} = chart;\r\n  if (borderBox) {\r\n    width -= paddings.width + borders.width;\r\n    height -= paddings.height + borders.height;\r\n  }\r\n  return {\r\n    x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\r\n    y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\r\n  };\r\n}\r\n\r\nfunction getContainerSize(canvas, width, height) {\r\n  let maxWidth, maxHeight;\r\n\r\n  if (width === undefined || height === undefined) {\r\n    const container = _getParentNode(canvas);\r\n    if (!container) {\r\n      width = canvas.clientWidth;\r\n      height = canvas.clientHeight;\r\n    } else {\r\n      const rect = container.getBoundingClientRect(); // this is the border box of the container\r\n      const containerStyle = getComputedStyle(container);\r\n      const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\r\n      const containerPadding = getPositionedStyle(containerStyle, 'padding');\r\n      width = rect.width - containerPadding.width - containerBorder.width;\r\n      height = rect.height - containerPadding.height - containerBorder.height;\r\n      maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\r\n      maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\r\n    }\r\n  }\r\n  return {\r\n    width,\r\n    height,\r\n    maxWidth: maxWidth || INFINITY,\r\n    maxHeight: maxHeight || INFINITY\r\n  };\r\n}\r\n\r\nconst round1 = v => Math.round(v * 10) / 10;\r\n\r\nexport function getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {\r\n  const style = getComputedStyle(canvas);\r\n  const margins = getPositionedStyle(style, 'margin');\r\n  const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\r\n  const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\r\n  const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\r\n  let {width, height} = containerSize;\r\n\r\n  if (style.boxSizing === 'content-box') {\r\n    const borders = getPositionedStyle(style, 'border', 'width');\r\n    const paddings = getPositionedStyle(style, 'padding');\r\n    width -= paddings.width + borders.width;\r\n    height -= paddings.height + borders.height;\r\n  }\r\n  width = Math.max(0, width - margins.width);\r\n  height = Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height - margins.height);\r\n  width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\r\n  height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\r\n  if (width && !height) {\r\n    // https://github.com/chartjs/Chart.js/issues/4659\r\n    // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)\r\n    height = round1(width / 2);\r\n  }\r\n\r\n  const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;\r\n\r\n  if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {\r\n    height = containerSize.height;\r\n    width = round1(Math.floor(height * aspectRatio));\r\n  }\r\n\r\n  return {\r\n    width,\r\n    height\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import('../core/core.controller').default} chart\r\n * @param {number} [forceRatio]\r\n * @param {boolean} [forceStyle]\r\n * @returns {boolean} True if the canvas context size or transformation has changed.\r\n */\r\nexport function retinaScale(chart, forceRatio, forceStyle) {\r\n  const pixelRatio = forceRatio || 1;\r\n  const deviceHeight = Math.floor(chart.height * pixelRatio);\r\n  const deviceWidth = Math.floor(chart.width * pixelRatio);\r\n\r\n  chart.height = deviceHeight / pixelRatio;\r\n  chart.width = deviceWidth / pixelRatio;\r\n\r\n  const canvas = chart.canvas;\r\n\r\n  // If no style has been set on the canvas, the render size is used as display size,\r\n  // making the chart visually bigger, so let's enforce it to the \"correct\" values.\r\n  // See https://github.com/chartjs/Chart.js/issues/3575\r\n  if (canvas.style && (forceStyle || (!canvas.style.height && !canvas.style.width))) {\r\n    canvas.style.height = `${chart.height}px`;\r\n    canvas.style.width = `${chart.width}px`;\r\n  }\r\n\r\n  if (chart.currentDevicePixelRatio !== pixelRatio\r\n      || canvas.height !== deviceHeight\r\n      || canvas.width !== deviceWidth) {\r\n    chart.currentDevicePixelRatio = pixelRatio;\r\n    canvas.height = deviceHeight;\r\n    canvas.width = deviceWidth;\r\n    chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Detects support for options object argument in addEventListener.\r\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\r\n * @private\r\n */\r\nexport const supportsEventListenerOptions = (function() {\r\n  let passiveSupported = false;\r\n  try {\r\n    const options = {\r\n      get passive() { // This function will be called when the browser attempts to access the passive property.\r\n        passiveSupported = true;\r\n        return false;\r\n      }\r\n    };\r\n    // @ts-ignore\r\n    window.addEventListener('test', null, options);\r\n    // @ts-ignore\r\n    window.removeEventListener('test', null, options);\r\n  } catch (e) {\r\n    // continue regardless of error\r\n  }\r\n  return passiveSupported;\r\n}());\r\n\r\n/**\r\n * The \"used\" size is the final value of a dimension property after all calculations have\r\n * been performed. This method uses the computed style of `element` but returns undefined\r\n * if the computed style is not expressed in pixels. That can happen in some cases where\r\n * `element` has a size relative to its parent and this last one is not yet displayed,\r\n * for example because of `display: none` on a parent node.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\r\n * @returns {number=} Size in pixels or undefined if unknown.\r\n */\r\nexport function readUsedSize(element, property) {\r\n  const value = getStyle(element, property);\r\n  const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\r\n  return matches ? +matches[1] : undefined;\r\n}\r\n","import {isArray, isNullOrUndef} from './helpers.core';\r\nimport {PI, TAU, HALF_PI, QUARTER_PI, TWO_THIRDS_PI, RAD_PER_DEG} from './helpers.math';\r\n\r\n/**\r\n * Note: typedefs are auto-exported, so use a made-up `canvas` namespace where\r\n * necessary to avoid duplicates with `export * from './helpers`; see\r\n * https://github.com/microsoft/TypeScript/issues/46011\r\n * @typedef { import(\"../core/core.controller\").default } canvas.Chart\r\n * @typedef { import(\"../../types\").Point } Point\r\n */\r\n\r\n/**\r\n * @namespace Chart.helpers.canvas\r\n */\r\n\r\n/**\r\n * Converts the given font object into a CSS font string.\r\n * @param {object} font - A font object.\r\n * @return {string|null} The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\r\n * @private\r\n */\r\nexport function toFontString(font) {\r\n  if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\r\n    return null;\r\n  }\r\n\r\n  return (font.style ? font.style + ' ' : '')\r\n\t\t+ (font.weight ? font.weight + ' ' : '')\r\n\t\t+ font.size + 'px '\r\n\t\t+ font.family;\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _measureText(ctx, data, gc, longest, string) {\r\n  let textWidth = data[string];\r\n  if (!textWidth) {\r\n    textWidth = data[string] = ctx.measureText(string).width;\r\n    gc.push(string);\r\n  }\r\n  if (textWidth > longest) {\r\n    longest = textWidth;\r\n  }\r\n  return longest;\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _longestText(ctx, font, arrayOfThings, cache) {\r\n  cache = cache || {};\r\n  let data = cache.data = cache.data || {};\r\n  let gc = cache.garbageCollect = cache.garbageCollect || [];\r\n\r\n  if (cache.font !== font) {\r\n    data = cache.data = {};\r\n    gc = cache.garbageCollect = [];\r\n    cache.font = font;\r\n  }\r\n\r\n  ctx.save();\r\n\r\n  ctx.font = font;\r\n  let longest = 0;\r\n  const ilen = arrayOfThings.length;\r\n  let i, j, jlen, thing, nestedThing;\r\n  for (i = 0; i < ilen; i++) {\r\n    thing = arrayOfThings[i];\r\n\r\n    // Undefined strings and arrays should not be measured\r\n    if (thing !== undefined && thing !== null && isArray(thing) !== true) {\r\n      longest = _measureText(ctx, data, gc, longest, thing);\r\n    } else if (isArray(thing)) {\r\n      // if it is an array lets measure each element\r\n      // to do maybe simplify this function a bit so we can do this more recursively?\r\n      for (j = 0, jlen = thing.length; j < jlen; j++) {\r\n        nestedThing = thing[j];\r\n        // Undefined strings and arrays should not be measured\r\n        if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\r\n          longest = _measureText(ctx, data, gc, longest, nestedThing);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  ctx.restore();\r\n\r\n  const gcLen = gc.length / 2;\r\n  if (gcLen > arrayOfThings.length) {\r\n    for (i = 0; i < gcLen; i++) {\r\n      delete data[gc[i]];\r\n    }\r\n    gc.splice(0, gcLen);\r\n  }\r\n  return longest;\r\n}\r\n\r\n/**\r\n * Returns the aligned pixel value to avoid anti-aliasing blur\r\n * @param {canvas.Chart} chart - The chart instance.\r\n * @param {number} pixel - A pixel value.\r\n * @param {number} width - The width of the element.\r\n * @returns {number} The aligned pixel value.\r\n * @private\r\n */\r\nexport function _alignPixel(chart, pixel, width) {\r\n  const devicePixelRatio = chart.currentDevicePixelRatio;\r\n  const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\r\n  return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\r\n}\r\n\r\n/**\r\n * Clears the entire canvas.\r\n * @param {HTMLCanvasElement} canvas\r\n * @param {CanvasRenderingContext2D} [ctx]\r\n */\r\nexport function clearCanvas(canvas, ctx) {\r\n  ctx = ctx || canvas.getContext('2d');\r\n\r\n  ctx.save();\r\n  // canvas.width and canvas.height do not consider the canvas transform,\r\n  // while clearRect does\r\n  ctx.resetTransform();\r\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n  ctx.restore();\r\n}\r\n\r\nexport function drawPoint(ctx, options, x, y) {\r\n  drawPointLegend(ctx, options, x, y, null);\r\n}\r\n\r\nexport function drawPointLegend(ctx, options, x, y, w) {\r\n  let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;\r\n  const style = options.pointStyle;\r\n  const rotation = options.rotation;\r\n  const radius = options.radius;\r\n  let rad = (rotation || 0) * RAD_PER_DEG;\r\n\r\n  if (style && typeof style === 'object') {\r\n    type = style.toString();\r\n    if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\r\n      ctx.save();\r\n      ctx.translate(x, y);\r\n      ctx.rotate(rad);\r\n      ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\r\n      ctx.restore();\r\n      return;\r\n    }\r\n  }\r\n\r\n  if (isNaN(radius) || radius <= 0) {\r\n    return;\r\n  }\r\n\r\n  ctx.beginPath();\r\n\r\n  switch (style) {\r\n  // Default includes circle\r\n  default:\r\n    if (w) {\r\n      ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);\r\n    } else {\r\n      ctx.arc(x, y, radius, 0, TAU);\r\n    }\r\n    ctx.closePath();\r\n    break;\r\n  case 'triangle':\r\n    width = w ? w / 2 : radius;\r\n    ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\r\n    rad += TWO_THIRDS_PI;\r\n    ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\r\n    rad += TWO_THIRDS_PI;\r\n    ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\r\n    ctx.closePath();\r\n    break;\r\n  case 'rectRounded':\r\n    // NOTE: the rounded rect implementation changed to use `arc` instead of\r\n    // `quadraticCurveTo` since it generates better results when rect is\r\n    // almost a circle. 0.516 (instead of 0.5) produces results with visually\r\n    // closer proportion to the previous impl and it is inscribed in the\r\n    // circle with `radius`. For more details, see the following PRs:\r\n    // https://github.com/chartjs/Chart.js/issues/5597\r\n    // https://github.com/chartjs/Chart.js/issues/5858\r\n    cornerRadius = radius * 0.516;\r\n    size = radius - cornerRadius;\r\n    xOffset = Math.cos(rad + QUARTER_PI) * size;\r\n    xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\r\n    yOffset = Math.sin(rad + QUARTER_PI) * size;\r\n    yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\r\n    ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\r\n    ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);\r\n    ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);\r\n    ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\r\n    ctx.closePath();\r\n    break;\r\n  case 'rect':\r\n    if (!rotation) {\r\n      size = Math.SQRT1_2 * radius;\r\n      width = w ? w / 2 : size;\r\n      ctx.rect(x - width, y - size, 2 * width, 2 * size);\r\n      break;\r\n    }\r\n    rad += QUARTER_PI;\r\n    /* falls through */\r\n  case 'rectRot':\r\n    xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\r\n    xOffset = Math.cos(rad) * radius;\r\n    yOffset = Math.sin(rad) * radius;\r\n    yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\r\n    ctx.moveTo(x - xOffsetW, y - yOffset);\r\n    ctx.lineTo(x + yOffsetW, y - xOffset);\r\n    ctx.lineTo(x + xOffsetW, y + yOffset);\r\n    ctx.lineTo(x - yOffsetW, y + xOffset);\r\n    ctx.closePath();\r\n    break;\r\n  case 'crossRot':\r\n    rad += QUARTER_PI;\r\n    /* falls through */\r\n  case 'cross':\r\n    xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\r\n    xOffset = Math.cos(rad) * radius;\r\n    yOffset = Math.sin(rad) * radius;\r\n    yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\r\n    ctx.moveTo(x - xOffsetW, y - yOffset);\r\n    ctx.lineTo(x + xOffsetW, y + yOffset);\r\n    ctx.moveTo(x + yOffsetW, y - xOffset);\r\n    ctx.lineTo(x - yOffsetW, y + xOffset);\r\n    break;\r\n  case 'star':\r\n    xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\r\n    xOffset = Math.cos(rad) * radius;\r\n    yOffset = Math.sin(rad) * radius;\r\n    yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\r\n    ctx.moveTo(x - xOffsetW, y - yOffset);\r\n    ctx.lineTo(x + xOffsetW, y + yOffset);\r\n    ctx.moveTo(x + yOffsetW, y - xOffset);\r\n    ctx.lineTo(x - yOffsetW, y + xOffset);\r\n    rad += QUARTER_PI;\r\n    xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\r\n    xOffset = Math.cos(rad) * radius;\r\n    yOffset = Math.sin(rad) * radius;\r\n    yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\r\n    ctx.moveTo(x - xOffsetW, y - yOffset);\r\n    ctx.lineTo(x + xOffsetW, y + yOffset);\r\n    ctx.moveTo(x + yOffsetW, y - xOffset);\r\n    ctx.lineTo(x - yOffsetW, y + xOffset);\r\n    break;\r\n  case 'line':\r\n    xOffset = w ? w / 2 : Math.cos(rad) * radius;\r\n    yOffset = Math.sin(rad) * radius;\r\n    ctx.moveTo(x - xOffset, y - yOffset);\r\n    ctx.lineTo(x + xOffset, y + yOffset);\r\n    break;\r\n  case 'dash':\r\n    ctx.moveTo(x, y);\r\n    ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);\r\n    break;\r\n  }\r\n\r\n  ctx.fill();\r\n  if (options.borderWidth > 0) {\r\n    ctx.stroke();\r\n  }\r\n}\r\n\r\n/**\r\n * Returns true if the point is inside the rectangle\r\n * @param {Point} point - The point to test\r\n * @param {object} area - The rectangle\r\n * @param {number} [margin] - allowed margin\r\n * @returns {boolean}\r\n * @private\r\n */\r\nexport function _isPointInArea(point, area, margin) {\r\n  margin = margin || 0.5; // margin - default is to match rounded decimals\r\n\r\n  return !area || (point && point.x > area.left - margin && point.x < area.right + margin &&\r\n\t\tpoint.y > area.top - margin && point.y < area.bottom + margin);\r\n}\r\n\r\nexport function clipArea(ctx, area) {\r\n  ctx.save();\r\n  ctx.beginPath();\r\n  ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\r\n  ctx.clip();\r\n}\r\n\r\nexport function unclipArea(ctx) {\r\n  ctx.restore();\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _steppedLineTo(ctx, previous, target, flip, mode) {\r\n  if (!previous) {\r\n    return ctx.lineTo(target.x, target.y);\r\n  }\r\n  if (mode === 'middle') {\r\n    const midpoint = (previous.x + target.x) / 2.0;\r\n    ctx.lineTo(midpoint, previous.y);\r\n    ctx.lineTo(midpoint, target.y);\r\n  } else if (mode === 'after' !== !!flip) {\r\n    ctx.lineTo(previous.x, target.y);\r\n  } else {\r\n    ctx.lineTo(target.x, previous.y);\r\n  }\r\n  ctx.lineTo(target.x, target.y);\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _bezierCurveTo(ctx, previous, target, flip) {\r\n  if (!previous) {\r\n    return ctx.lineTo(target.x, target.y);\r\n  }\r\n  ctx.bezierCurveTo(\r\n    flip ? previous.cp1x : previous.cp2x,\r\n    flip ? previous.cp1y : previous.cp2y,\r\n    flip ? target.cp2x : target.cp1x,\r\n    flip ? target.cp2y : target.cp1y,\r\n    target.x,\r\n    target.y);\r\n}\r\n\r\n/**\r\n * Render text onto the canvas\r\n */\r\nexport function renderText(ctx, text, x, y, font, opts = {}) {\r\n  const lines = isArray(text) ? text : [text];\r\n  const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\r\n  let i, line;\r\n\r\n  ctx.save();\r\n  ctx.font = font.string;\r\n  setRenderOpts(ctx, opts);\r\n\r\n  for (i = 0; i < lines.length; ++i) {\r\n    line = lines[i];\r\n\r\n    if (stroke) {\r\n      if (opts.strokeColor) {\r\n        ctx.strokeStyle = opts.strokeColor;\r\n      }\r\n\r\n      if (!isNullOrUndef(opts.strokeWidth)) {\r\n        ctx.lineWidth = opts.strokeWidth;\r\n      }\r\n\r\n      ctx.strokeText(line, x, y, opts.maxWidth);\r\n    }\r\n\r\n    ctx.fillText(line, x, y, opts.maxWidth);\r\n    decorateText(ctx, x, y, line, opts);\r\n\r\n    y += font.lineHeight;\r\n  }\r\n\r\n  ctx.restore();\r\n}\r\n\r\nfunction setRenderOpts(ctx, opts) {\r\n  if (opts.translation) {\r\n    ctx.translate(opts.translation[0], opts.translation[1]);\r\n  }\r\n\r\n  if (!isNullOrUndef(opts.rotation)) {\r\n    ctx.rotate(opts.rotation);\r\n  }\r\n\r\n  if (opts.color) {\r\n    ctx.fillStyle = opts.color;\r\n  }\r\n\r\n  if (opts.textAlign) {\r\n    ctx.textAlign = opts.textAlign;\r\n  }\r\n\r\n  if (opts.textBaseline) {\r\n    ctx.textBaseline = opts.textBaseline;\r\n  }\r\n}\r\n\r\nfunction decorateText(ctx, x, y, line, opts) {\r\n  if (opts.strikethrough || opts.underline) {\r\n    /**\r\n     * Now that IE11 support has been dropped, we can use more\r\n     * of the TextMetrics object. The actual bounding boxes\r\n     * are unflagged in Chrome, Firefox, Edge, and Safari so they\r\n     * can be safely used.\r\n     * See https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics#Browser_compatibility\r\n     */\r\n    const metrics = ctx.measureText(line);\r\n    const left = x - metrics.actualBoundingBoxLeft;\r\n    const right = x + metrics.actualBoundingBoxRight;\r\n    const top = y - metrics.actualBoundingBoxAscent;\r\n    const bottom = y + metrics.actualBoundingBoxDescent;\r\n    const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\r\n\r\n    ctx.strokeStyle = ctx.fillStyle;\r\n    ctx.beginPath();\r\n    ctx.lineWidth = opts.decorationWidth || 2;\r\n    ctx.moveTo(left, yDecoration);\r\n    ctx.lineTo(right, yDecoration);\r\n    ctx.stroke();\r\n  }\r\n}\r\n\r\n/**\r\n * Add a path of a rectangle with rounded corners to the current sub-path\r\n * @param {CanvasRenderingContext2D} ctx Context\r\n * @param {*} rect Bounding rect\r\n */\r\nexport function addRoundedRectPath(ctx, rect) {\r\n  const {x, y, w, h, radius} = rect;\r\n\r\n  // top left arc\r\n  ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, -HALF_PI, PI, true);\r\n\r\n  // line from top left to bottom left\r\n  ctx.lineTo(x, y + h - radius.bottomLeft);\r\n\r\n  // bottom left arc\r\n  ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\r\n\r\n  // line from bottom left to bottom right\r\n  ctx.lineTo(x + w - radius.bottomRight, y + h);\r\n\r\n  // bottom right arc\r\n  ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\r\n\r\n  // line from bottom right to top right\r\n  ctx.lineTo(x + w, y + radius.topRight);\r\n\r\n  // top right arc\r\n  ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\r\n\r\n  // line from top right to top left\r\n  ctx.lineTo(x + radius.topLeft, y);\r\n}\r\n","import {defined, isArray, isFunction, isObject, resolveObjectKey, _capitalize} from './helpers.core';\r\n\r\n/**\r\n * Creates a Proxy for resolving raw values for options.\r\n * @param {object[]} scopes - The option scopes to look for values, in resolution order\r\n * @param {string[]} [prefixes] - The prefixes for values, in resolution order.\r\n * @param {object[]} [rootScopes] - The root option scopes\r\n * @param {string|boolean} [fallback] - Parent scopes fallback\r\n * @param {function} [getTarget] - callback for getting the target for changed values\r\n * @returns Proxy\r\n * @private\r\n */\r\nexport function _createResolver(scopes, prefixes = [''], rootScopes = scopes, fallback, getTarget = () => scopes[0]) {\r\n  if (!defined(fallback)) {\r\n    fallback = _resolve('_fallback', scopes);\r\n  }\r\n  const cache = {\r\n    [Symbol.toStringTag]: 'Object',\r\n    _cacheable: true,\r\n    _scopes: scopes,\r\n    _rootScopes: rootScopes,\r\n    _fallback: fallback,\r\n    _getTarget: getTarget,\r\n    override: (scope) => _createResolver([scope, ...scopes], prefixes, rootScopes, fallback),\r\n  };\r\n  return new Proxy(cache, {\r\n    /**\r\n     * A trap for the delete operator.\r\n     */\r\n    deleteProperty(target, prop) {\r\n      delete target[prop]; // remove from cache\r\n      delete target._keys; // remove cached keys\r\n      delete scopes[0][prop]; // remove from top level scope\r\n      return true;\r\n    },\r\n\r\n    /**\r\n     * A trap for getting property values.\r\n     */\r\n    get(target, prop) {\r\n      return _cached(target, prop,\r\n        () => _resolveWithPrefixes(prop, prefixes, scopes, target));\r\n    },\r\n\r\n    /**\r\n     * A trap for Object.getOwnPropertyDescriptor.\r\n     * Also used by Object.hasOwnProperty.\r\n     */\r\n    getOwnPropertyDescriptor(target, prop) {\r\n      return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\r\n    },\r\n\r\n    /**\r\n     * A trap for Object.getPrototypeOf.\r\n     */\r\n    getPrototypeOf() {\r\n      return Reflect.getPrototypeOf(scopes[0]);\r\n    },\r\n\r\n    /**\r\n     * A trap for the in operator.\r\n     */\r\n    has(target, prop) {\r\n      return getKeysFromAllScopes(target).includes(prop);\r\n    },\r\n\r\n    /**\r\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\r\n     */\r\n    ownKeys(target) {\r\n      return getKeysFromAllScopes(target);\r\n    },\r\n\r\n    /**\r\n     * A trap for setting property values.\r\n     */\r\n    set(target, prop, value) {\r\n      const storage = target._storage || (target._storage = getTarget());\r\n      target[prop] = storage[prop] = value; // set to top level scope + cache\r\n      delete target._keys; // remove cached keys\r\n      return true;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Returns an Proxy for resolving option values with context.\r\n * @param {object} proxy - The Proxy returned by `_createResolver`\r\n * @param {object} context - Context object for scriptable/indexable options\r\n * @param {object} [subProxy] - The proxy provided for scriptable options\r\n * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults] - Defaults for descriptors\r\n * @private\r\n */\r\nexport function _attachContext(proxy, context, subProxy, descriptorDefaults) {\r\n  const cache = {\r\n    _cacheable: false,\r\n    _proxy: proxy,\r\n    _context: context,\r\n    _subProxy: subProxy,\r\n    _stack: new Set(),\r\n    _descriptors: _descriptors(proxy, descriptorDefaults),\r\n    setContext: (ctx) => _attachContext(proxy, ctx, subProxy, descriptorDefaults),\r\n    override: (scope) => _attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\r\n  };\r\n  return new Proxy(cache, {\r\n    /**\r\n     * A trap for the delete operator.\r\n     */\r\n    deleteProperty(target, prop) {\r\n      delete target[prop]; // remove from cache\r\n      delete proxy[prop]; // remove from proxy\r\n      return true;\r\n    },\r\n\r\n    /**\r\n     * A trap for getting property values.\r\n     */\r\n    get(target, prop, receiver) {\r\n      return _cached(target, prop,\r\n        () => _resolveWithContext(target, prop, receiver));\r\n    },\r\n\r\n    /**\r\n     * A trap for Object.getOwnPropertyDescriptor.\r\n     * Also used by Object.hasOwnProperty.\r\n     */\r\n    getOwnPropertyDescriptor(target, prop) {\r\n      return target._descriptors.allKeys\r\n        ? Reflect.has(proxy, prop) ? {enumerable: true, configurable: true} : undefined\r\n        : Reflect.getOwnPropertyDescriptor(proxy, prop);\r\n    },\r\n\r\n    /**\r\n     * A trap for Object.getPrototypeOf.\r\n     */\r\n    getPrototypeOf() {\r\n      return Reflect.getPrototypeOf(proxy);\r\n    },\r\n\r\n    /**\r\n     * A trap for the in operator.\r\n     */\r\n    has(target, prop) {\r\n      return Reflect.has(proxy, prop);\r\n    },\r\n\r\n    /**\r\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\r\n     */\r\n    ownKeys() {\r\n      return Reflect.ownKeys(proxy);\r\n    },\r\n\r\n    /**\r\n     * A trap for setting property values.\r\n     */\r\n    set(target, prop, value) {\r\n      proxy[prop] = value; // set to proxy\r\n      delete target[prop]; // remove from cache\r\n      return true;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _descriptors(proxy, defaults = {scriptable: true, indexable: true}) {\r\n  const {_scriptable = defaults.scriptable, _indexable = defaults.indexable, _allKeys = defaults.allKeys} = proxy;\r\n  return {\r\n    allKeys: _allKeys,\r\n    scriptable: _scriptable,\r\n    indexable: _indexable,\r\n    isScriptable: isFunction(_scriptable) ? _scriptable : () => _scriptable,\r\n    isIndexable: isFunction(_indexable) ? _indexable : () => _indexable\r\n  };\r\n}\r\n\r\nconst readKey = (prefix, name) => prefix ? prefix + _capitalize(name) : name;\r\nconst needsSubResolver = (prop, value) => isObject(value) && prop !== 'adapters' &&\r\n  (Object.getPrototypeOf(value) === null || value.constructor === Object);\r\n\r\nfunction _cached(target, prop, resolve) {\r\n  if (Object.prototype.hasOwnProperty.call(target, prop)) {\r\n    return target[prop];\r\n  }\r\n\r\n  const value = resolve();\r\n  // cache the resolved value\r\n  target[prop] = value;\r\n  return value;\r\n}\r\n\r\nfunction _resolveWithContext(target, prop, receiver) {\r\n  const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;\r\n  let value = _proxy[prop]; // resolve from proxy\r\n\r\n  // resolve with context\r\n  if (isFunction(value) && descriptors.isScriptable(prop)) {\r\n    value = _resolveScriptable(prop, value, target, receiver);\r\n  }\r\n  if (isArray(value) && value.length) {\r\n    value = _resolveArray(prop, value, target, descriptors.isIndexable);\r\n  }\r\n  if (needsSubResolver(prop, value)) {\r\n    // if the resolved value is an object, create a sub resolver for it\r\n    value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction _resolveScriptable(prop, value, target, receiver) {\r\n  const {_proxy, _context, _subProxy, _stack} = target;\r\n  if (_stack.has(prop)) {\r\n    // @ts-ignore\r\n    throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);\r\n  }\r\n  _stack.add(prop);\r\n  value = value(_context, _subProxy || receiver);\r\n  _stack.delete(prop);\r\n  if (needsSubResolver(prop, value)) {\r\n    // When scriptable option returns an object, create a resolver on that.\r\n    value = createSubResolver(_proxy._scopes, _proxy, prop, value);\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction _resolveArray(prop, value, target, isIndexable) {\r\n  const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;\r\n\r\n  if (defined(_context.index) && isIndexable(prop)) {\r\n    value = value[_context.index % value.length];\r\n  } else if (isObject(value[0])) {\r\n    // Array of objects, return array or resolvers\r\n    const arr = value;\r\n    const scopes = _proxy._scopes.filter(s => s !== arr);\r\n    value = [];\r\n    for (const item of arr) {\r\n      const resolver = createSubResolver(scopes, _proxy, prop, item);\r\n      value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction resolveFallback(fallback, prop, value) {\r\n  return isFunction(fallback) ? fallback(prop, value) : fallback;\r\n}\r\n\r\nconst getScope = (key, parent) => key === true ? parent\r\n  : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\r\n\r\nfunction addScopes(set, parentScopes, key, parentFallback, value) {\r\n  for (const parent of parentScopes) {\r\n    const scope = getScope(key, parent);\r\n    if (scope) {\r\n      set.add(scope);\r\n      const fallback = resolveFallback(scope._fallback, key, value);\r\n      if (defined(fallback) && fallback !== key && fallback !== parentFallback) {\r\n        // When we reach the descriptor that defines a new _fallback, return that.\r\n        // The fallback will resume to that new scope.\r\n        return fallback;\r\n      }\r\n    } else if (scope === false && defined(parentFallback) && key !== parentFallback) {\r\n      // Fallback to `false` results to `false`, when falling back to different key.\r\n      // For example `interaction` from `hover` or `plugins.tooltip` and `animation` from `animations`\r\n      return null;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction createSubResolver(parentScopes, resolver, prop, value) {\r\n  const rootScopes = resolver._rootScopes;\r\n  const fallback = resolveFallback(resolver._fallback, prop, value);\r\n  const allScopes = [...parentScopes, ...rootScopes];\r\n  const set = new Set();\r\n  set.add(value);\r\n  let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);\r\n  if (key === null) {\r\n    return false;\r\n  }\r\n  if (defined(fallback) && fallback !== prop) {\r\n    key = addScopesFromKey(set, allScopes, fallback, key, value);\r\n    if (key === null) {\r\n      return false;\r\n    }\r\n  }\r\n  return _createResolver(Array.from(set), [''], rootScopes, fallback,\r\n    () => subGetTarget(resolver, prop, value));\r\n}\r\n\r\nfunction addScopesFromKey(set, allScopes, key, fallback, item) {\r\n  while (key) {\r\n    key = addScopes(set, allScopes, key, fallback, item);\r\n  }\r\n  return key;\r\n}\r\n\r\nfunction subGetTarget(resolver, prop, value) {\r\n  const parent = resolver._getTarget();\r\n  if (!(prop in parent)) {\r\n    parent[prop] = {};\r\n  }\r\n  const target = parent[prop];\r\n  if (isArray(target) && isObject(value)) {\r\n    // For array of objects, the object is used to store updated values\r\n    return value;\r\n  }\r\n  return target || {};\r\n}\r\n\r\nfunction _resolveWithPrefixes(prop, prefixes, scopes, proxy) {\r\n  let value;\r\n  for (const prefix of prefixes) {\r\n    value = _resolve(readKey(prefix, prop), scopes);\r\n    if (defined(value)) {\r\n      return needsSubResolver(prop, value)\r\n        ? createSubResolver(scopes, proxy, prop, value)\r\n        : value;\r\n    }\r\n  }\r\n}\r\n\r\nfunction _resolve(key, scopes) {\r\n  for (const scope of scopes) {\r\n    if (!scope) {\r\n      continue;\r\n    }\r\n    const value = scope[key];\r\n    if (defined(value)) {\r\n      return value;\r\n    }\r\n  }\r\n}\r\n\r\nfunction getKeysFromAllScopes(target) {\r\n  let keys = target._keys;\r\n  if (!keys) {\r\n    keys = target._keys = resolveKeysFromAllScopes(target._scopes);\r\n  }\r\n  return keys;\r\n}\r\n\r\nfunction resolveKeysFromAllScopes(scopes) {\r\n  const set = new Set();\r\n  for (const scope of scopes) {\r\n    for (const key of Object.keys(scope).filter(k => !k.startsWith('_'))) {\r\n      set.add(key);\r\n    }\r\n  }\r\n  return Array.from(set);\r\n}\r\n\r\nexport function _parseObjectDataRadialScale(meta, data, start, count) {\r\n  const {iScale} = meta;\r\n  const {key = 'r'} = this._parsing;\r\n  const parsed = new Array(count);\r\n  let i, ilen, index, item;\r\n\r\n  for (i = 0, ilen = count; i < ilen; ++i) {\r\n    index = i + start;\r\n    item = data[index];\r\n    parsed[i] = {\r\n      r: iScale.parse(resolveObjectKey(item, key), index)\r\n    };\r\n  }\r\n  return parsed;\r\n}\r\n","import {almostEquals, distanceBetweenPoints, sign} from './helpers.math';\r\nimport {_isPointInArea} from './helpers.canvas';\r\n\r\nconst EPSILON = Number.EPSILON || 1e-14;\r\nconst getPoint = (points, i) => i < points.length && !points[i].skip && points[i];\r\nconst getValueAxis = (indexAxis) => indexAxis === 'x' ? 'y' : 'x';\r\n\r\nexport function splineCurve(firstPoint, middlePoint, afterPoint, t) {\r\n  // Props to Rob Spencer at scaled innovation for his post on splining between points\r\n  // http://scaledinnovation.com/analytics/splines/aboutSplines.html\r\n\r\n  // This function must also respect \"skipped\" points\r\n\r\n  const previous = firstPoint.skip ? middlePoint : firstPoint;\r\n  const current = middlePoint;\r\n  const next = afterPoint.skip ? middlePoint : afterPoint;\r\n  const d01 = distanceBetweenPoints(current, previous);\r\n  const d12 = distanceBetweenPoints(next, current);\r\n\r\n  let s01 = d01 / (d01 + d12);\r\n  let s12 = d12 / (d01 + d12);\r\n\r\n  // If all points are the same, s01 & s02 will be inf\r\n  s01 = isNaN(s01) ? 0 : s01;\r\n  s12 = isNaN(s12) ? 0 : s12;\r\n\r\n  const fa = t * s01; // scaling factor for triangle Ta\r\n  const fb = t * s12;\r\n\r\n  return {\r\n    previous: {\r\n      x: current.x - fa * (next.x - previous.x),\r\n      y: current.y - fa * (next.y - previous.y)\r\n    },\r\n    next: {\r\n      x: current.x + fb * (next.x - previous.x),\r\n      y: current.y + fb * (next.y - previous.y)\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Adjust tangents to ensure monotonic properties\r\n */\r\nfunction monotoneAdjust(points, deltaK, mK) {\r\n  const pointsLen = points.length;\r\n\r\n  let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;\r\n  let pointAfter = getPoint(points, 0);\r\n  for (let i = 0; i < pointsLen - 1; ++i) {\r\n    pointCurrent = pointAfter;\r\n    pointAfter = getPoint(points, i + 1);\r\n    if (!pointCurrent || !pointAfter) {\r\n      continue;\r\n    }\r\n\r\n    if (almostEquals(deltaK[i], 0, EPSILON)) {\r\n      mK[i] = mK[i + 1] = 0;\r\n      continue;\r\n    }\r\n\r\n    alphaK = mK[i] / deltaK[i];\r\n    betaK = mK[i + 1] / deltaK[i];\r\n    squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\r\n    if (squaredMagnitude <= 9) {\r\n      continue;\r\n    }\r\n\r\n    tauK = 3 / Math.sqrt(squaredMagnitude);\r\n    mK[i] = alphaK * tauK * deltaK[i];\r\n    mK[i + 1] = betaK * tauK * deltaK[i];\r\n  }\r\n}\r\n\r\nfunction monotoneCompute(points, mK, indexAxis = 'x') {\r\n  const valueAxis = getValueAxis(indexAxis);\r\n  const pointsLen = points.length;\r\n  let delta, pointBefore, pointCurrent;\r\n  let pointAfter = getPoint(points, 0);\r\n\r\n  for (let i = 0; i < pointsLen; ++i) {\r\n    pointBefore = pointCurrent;\r\n    pointCurrent = pointAfter;\r\n    pointAfter = getPoint(points, i + 1);\r\n    if (!pointCurrent) {\r\n      continue;\r\n    }\r\n\r\n    const iPixel = pointCurrent[indexAxis];\r\n    const vPixel = pointCurrent[valueAxis];\r\n    if (pointBefore) {\r\n      delta = (iPixel - pointBefore[indexAxis]) / 3;\r\n      pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\r\n      pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\r\n    }\r\n    if (pointAfter) {\r\n      delta = (pointAfter[indexAxis] - iPixel) / 3;\r\n      pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\r\n      pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * This function calculates Bézier control points in a similar way than |splineCurve|,\r\n * but preserves monotonicity of the provided data and ensures no local extremums are added\r\n * between the dataset discrete points due to the interpolation.\r\n * See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\r\n *\r\n * @param {{\r\n * x: number,\r\n * y: number,\r\n * skip?: boolean,\r\n * cp1x?: number,\r\n * cp1y?: number,\r\n * cp2x?: number,\r\n * cp2y?: number,\r\n * }[]} points\r\n * @param {string} indexAxis\r\n */\r\nexport function splineCurveMonotone(points, indexAxis = 'x') {\r\n  const valueAxis = getValueAxis(indexAxis);\r\n  const pointsLen = points.length;\r\n  const deltaK = Array(pointsLen).fill(0);\r\n  const mK = Array(pointsLen);\r\n\r\n  // Calculate slopes (deltaK) and initialize tangents (mK)\r\n  let i, pointBefore, pointCurrent;\r\n  let pointAfter = getPoint(points, 0);\r\n\r\n  for (i = 0; i < pointsLen; ++i) {\r\n    pointBefore = pointCurrent;\r\n    pointCurrent = pointAfter;\r\n    pointAfter = getPoint(points, i + 1);\r\n    if (!pointCurrent) {\r\n      continue;\r\n    }\r\n\r\n    if (pointAfter) {\r\n      const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\r\n\r\n      // In the case of two points that appear at the same x pixel, slopeDeltaX is 0\r\n      deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\r\n    }\r\n    mK[i] = !pointBefore ? deltaK[i]\r\n      : !pointAfter ? deltaK[i - 1]\r\n      : (sign(deltaK[i - 1]) !== sign(deltaK[i])) ? 0\r\n      : (deltaK[i - 1] + deltaK[i]) / 2;\r\n  }\r\n\r\n  monotoneAdjust(points, deltaK, mK);\r\n\r\n  monotoneCompute(points, mK, indexAxis);\r\n}\r\n\r\nfunction capControlPoint(pt, min, max) {\r\n  return Math.max(Math.min(pt, max), min);\r\n}\r\n\r\nfunction capBezierPoints(points, area) {\r\n  let i, ilen, point, inArea, inAreaPrev;\r\n  let inAreaNext = _isPointInArea(points[0], area);\r\n  for (i = 0, ilen = points.length; i < ilen; ++i) {\r\n    inAreaPrev = inArea;\r\n    inArea = inAreaNext;\r\n    inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\r\n    if (!inArea) {\r\n      continue;\r\n    }\r\n    point = points[i];\r\n    if (inAreaPrev) {\r\n      point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\r\n      point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\r\n    }\r\n    if (inAreaNext) {\r\n      point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\r\n      point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _updateBezierControlPoints(points, options, area, loop, indexAxis) {\r\n  let i, ilen, point, controlPoints;\r\n\r\n  // Only consider points that are drawn in case the spanGaps option is used\r\n  if (options.spanGaps) {\r\n    points = points.filter((pt) => !pt.skip);\r\n  }\r\n\r\n  if (options.cubicInterpolationMode === 'monotone') {\r\n    splineCurveMonotone(points, indexAxis);\r\n  } else {\r\n    let prev = loop ? points[points.length - 1] : points[0];\r\n    for (i = 0, ilen = points.length; i < ilen; ++i) {\r\n      point = points[i];\r\n      controlPoints = splineCurve(\r\n        prev,\r\n        point,\r\n        points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen],\r\n        options.tension\r\n      );\r\n      point.cp1x = controlPoints.previous.x;\r\n      point.cp1y = controlPoints.previous.y;\r\n      point.cp2x = controlPoints.next.x;\r\n      point.cp2y = controlPoints.next.y;\r\n      prev = point;\r\n    }\r\n  }\r\n\r\n  if (options.capBezierPoints) {\r\n    capBezierPoints(points, area);\r\n  }\r\n}\r\n","import {PI, TAU, HALF_PI} from './helpers.math';\r\n\r\nconst atEdge = (t: number) => t === 0 || t === 1;\r\nconst elasticIn = (t: number, s: number, p: number) => -(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\r\nconst elasticOut = (t: number, s: number, p: number) => Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\r\n\r\n/**\r\n * Easing functions adapted from Robert Penner's easing equations.\r\n * @namespace Chart.helpers.easing.effects\r\n * @see http://www.robertpenner.com/easing/\r\n */\r\nconst effects = {\r\n  linear: (t: number) => t,\r\n\r\n  easeInQuad: (t: number) => t * t,\r\n\r\n  easeOutQuad: (t: number) => -t * (t - 2),\r\n\r\n  easeInOutQuad: (t: number) => ((t /= 0.5) < 1)\r\n    ? 0.5 * t * t\r\n    : -0.5 * ((--t) * (t - 2) - 1),\r\n\r\n  easeInCubic: (t: number) => t * t * t,\r\n\r\n  easeOutCubic: (t: number) => (t -= 1) * t * t + 1,\r\n\r\n  easeInOutCubic: (t: number) => ((t /= 0.5) < 1)\r\n    ? 0.5 * t * t * t\r\n    : 0.5 * ((t -= 2) * t * t + 2),\r\n\r\n  easeInQuart: (t: number) => t * t * t * t,\r\n\r\n  easeOutQuart: (t: number) => -((t -= 1) * t * t * t - 1),\r\n\r\n  easeInOutQuart: (t: number) => ((t /= 0.5) < 1)\r\n    ? 0.5 * t * t * t * t\r\n    : -0.5 * ((t -= 2) * t * t * t - 2),\r\n\r\n  easeInQuint: (t: number) => t * t * t * t * t,\r\n\r\n  easeOutQuint: (t: number) => (t -= 1) * t * t * t * t + 1,\r\n\r\n  easeInOutQuint: (t: number) => ((t /= 0.5) < 1)\r\n    ? 0.5 * t * t * t * t * t\r\n    : 0.5 * ((t -= 2) * t * t * t * t + 2),\r\n\r\n  easeInSine: (t: number) => -Math.cos(t * HALF_PI) + 1,\r\n\r\n  easeOutSine: (t: number) => Math.sin(t * HALF_PI),\r\n\r\n  easeInOutSine: (t: number) => -0.5 * (Math.cos(PI * t) - 1),\r\n\r\n  easeInExpo: (t: number) => (t === 0) ? 0 : Math.pow(2, 10 * (t - 1)),\r\n\r\n  easeOutExpo: (t: number) => (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1,\r\n\r\n  easeInOutExpo: (t: number) => atEdge(t) ? t : t < 0.5\r\n    ? 0.5 * Math.pow(2, 10 * (t * 2 - 1))\r\n    : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\r\n\r\n  easeInCirc: (t: number) => (t >= 1) ? t : -(Math.sqrt(1 - t * t) - 1),\r\n\r\n  easeOutCirc: (t: number) => Math.sqrt(1 - (t -= 1) * t),\r\n\r\n  easeInOutCirc: (t: number) => ((t /= 0.5) < 1)\r\n    ? -0.5 * (Math.sqrt(1 - t * t) - 1)\r\n    : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\r\n\r\n  easeInElastic: (t: number) => atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\r\n\r\n  easeOutElastic: (t: number) => atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\r\n\r\n  easeInOutElastic(t: number) {\r\n    const s = 0.1125;\r\n    const p = 0.45;\r\n    return atEdge(t) ? t :\r\n      t < 0.5\r\n        ? 0.5 * elasticIn(t * 2, s, p)\r\n        : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\r\n  },\r\n\r\n  easeInBack(t: number) {\r\n    const s = 1.70158;\r\n    return t * t * ((s + 1) * t - s);\r\n  },\r\n\r\n  easeOutBack(t: number) {\r\n    const s = 1.70158;\r\n    return (t -= 1) * t * ((s + 1) * t + s) + 1;\r\n  },\r\n\r\n  easeInOutBack(t: number) {\r\n    let s = 1.70158;\r\n    if ((t /= 0.5) < 1) {\r\n      return 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));\r\n    }\r\n    return 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);\r\n  },\r\n\r\n  easeInBounce: (t: number) => 1 - effects.easeOutBounce(1 - t),\r\n\r\n  easeOutBounce(t: number) {\r\n    const m = 7.5625;\r\n    const d = 2.75;\r\n    if (t < (1 / d)) {\r\n      return m * t * t;\r\n    }\r\n    if (t < (2 / d)) {\r\n      return m * (t -= (1.5 / d)) * t + 0.75;\r\n    }\r\n    if (t < (2.5 / d)) {\r\n      return m * (t -= (2.25 / d)) * t + 0.9375;\r\n    }\r\n    return m * (t -= (2.625 / d)) * t + 0.984375;\r\n  },\r\n\r\n  easeInOutBounce: (t: number) => (t < 0.5)\r\n    ? effects.easeInBounce(t * 2) * 0.5\r\n    : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5,\r\n} as const;\r\n\r\nexport type EasingFunction = keyof typeof effects\r\n\r\nexport default effects;\r\n","import type {Point} from '../../types/geometric';\r\nimport type {MonotoneSplinePoint} from '../../types/helpers';\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _pointInLine(p1: Point, p2: Point, t: number, mode?) { // eslint-disable-line @typescript-eslint/no-unused-vars\r\n  return {\r\n    x: p1.x + t * (p2.x - p1.x),\r\n    y: p1.y + t * (p2.y - p1.y)\r\n  };\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _steppedInterpolation(\r\n  p1: Point,\r\n  p2: Point,\r\n  t: number, mode: 'middle' | 'after' | unknown\r\n) {\r\n  return {\r\n    x: p1.x + t * (p2.x - p1.x),\r\n    y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y\r\n      : mode === 'after' ? t < 1 ? p1.y : p2.y\r\n        : t > 0 ? p2.y : p1.y\r\n  };\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _bezierInterpolation(p1: MonotoneSplinePoint, p2: MonotoneSplinePoint, t: number, mode?) { // eslint-disable-line @typescript-eslint/no-unused-vars\r\n  const cp1 = {x: p1.cp2x, y: p1.cp2y};\r\n  const cp2 = {x: p2.cp1x, y: p2.cp1y};\r\n  const a = _pointInLine(p1, cp1, t);\r\n  const b = _pointInLine(cp1, cp2, t);\r\n  const c = _pointInLine(cp2, p2, t);\r\n  const d = _pointInLine(a, b, t);\r\n  const e = _pointInLine(b, c, t);\r\n  return _pointInLine(d, e, t);\r\n}\r\n","import defaults from '../core/core.defaults';\r\nimport {isArray, isObject, toDimension, valueOrDefault} from './helpers.core';\r\nimport {toFontString} from './helpers.canvas';\r\n\r\nconst LINE_HEIGHT = new RegExp(/^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/);\r\nconst FONT_STYLE = new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);\r\n\r\n/**\r\n * @alias Chart.helpers.options\r\n * @namespace\r\n */\r\n/**\r\n * Converts the given line height `value` in pixels for a specific font `size`.\r\n * @param {number|string} value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\r\n * @param {number} size - The font size (in pixels) used to resolve relative `value`.\r\n * @returns {number} The effective line height in pixels (size * 1.2 if value is invalid).\r\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\r\n * @since 2.7.0\r\n */\r\nexport function toLineHeight(value, size) {\r\n  const matches = ('' + value).match(LINE_HEIGHT);\r\n  if (!matches || matches[1] === 'normal') {\r\n    return size * 1.2;\r\n  }\r\n\r\n  value = +matches[2];\r\n\r\n  switch (matches[3]) {\r\n  case 'px':\r\n    return value;\r\n  case '%':\r\n    value /= 100;\r\n    break;\r\n  default:\r\n    break;\r\n  }\r\n\r\n  return size * value;\r\n}\r\n\r\nconst numberOrZero = v => +v || 0;\r\n\r\n/**\r\n * @param {any} value\r\n * @param {string[] | Record<string, string>} props\r\n */\r\nexport function _readValueToProps(value, props) {\r\n  const ret = {};\r\n  const objProps = isObject(props);\r\n  const keys = objProps ? Object.keys(props) : props;\r\n  const read = isObject(value)\r\n    ? objProps\r\n      ? prop => valueOrDefault(value[prop], value[props[prop]])\r\n      : prop => value[prop]\r\n    : () => value;\r\n\r\n  for (const prop of keys) {\r\n    ret[prop] = numberOrZero(read(prop));\r\n  }\r\n  return ret;\r\n}\r\n\r\n/**\r\n * Converts the given value into a TRBL object.\r\n * @param {number|object} value - If a number, set the value to all TRBL component,\r\n *  else, if an object, use defined properties and sets undefined ones to 0.\r\n *  x / y are shorthands for same value for left/right and top/bottom.\r\n * @returns {object} The padding values (top, right, bottom, left)\r\n * @since 3.0.0\r\n */\r\nexport function toTRBL(value) {\r\n  return _readValueToProps(value, {top: 'y', right: 'x', bottom: 'y', left: 'x'});\r\n}\r\n\r\n/**\r\n * Converts the given value into a TRBL corners object (similar with css border-radius).\r\n * @param {number|object} value - If a number, set the value to all TRBL corner components,\r\n *  else, if an object, use defined properties and sets undefined ones to 0.\r\n * @returns {object} The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)\r\n * @since 3.0.0\r\n */\r\nexport function toTRBLCorners(value) {\r\n  return _readValueToProps(value, ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']);\r\n}\r\n\r\n/**\r\n * Converts the given value into a padding object with pre-computed width/height.\r\n * @param {number|object} value - If a number, set the value to all TRBL component,\r\n *  else, if an object, use defined properties and sets undefined ones to 0.\r\n *  x / y are shorthands for same value for left/right and top/bottom.\r\n * @returns {object} The padding values (top, right, bottom, left, width, height)\r\n * @since 2.7.0\r\n */\r\nexport function toPadding(value) {\r\n  const obj = toTRBL(value);\r\n\r\n  obj.width = obj.left + obj.right;\r\n  obj.height = obj.top + obj.bottom;\r\n\r\n  return obj;\r\n}\r\n\r\n\r\n/**\r\n * Parses font options and returns the font object.\r\n * @param {object} options - A object that contains font options to be parsed.\r\n * @param {object} [fallback] - A object that contains fallback font options.\r\n * @return {object} The font object.\r\n * @private\r\n */\r\nexport function toFont(options, fallback) {\r\n  options = options || {};\r\n  fallback = fallback || defaults.font;\r\n\r\n  let size = valueOrDefault(options.size, fallback.size);\r\n\r\n  if (typeof size === 'string') {\r\n    size = parseInt(size, 10);\r\n  }\r\n  let style = valueOrDefault(options.style, fallback.style);\r\n  if (style && !('' + style).match(FONT_STYLE)) {\r\n    console.warn('Invalid font style specified: \"' + style + '\"');\r\n    style = '';\r\n  }\r\n\r\n  const font = {\r\n    family: valueOrDefault(options.family, fallback.family),\r\n    lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\r\n    size,\r\n    style,\r\n    weight: valueOrDefault(options.weight, fallback.weight),\r\n    string: ''\r\n  };\r\n\r\n  font.string = toFontString(font);\r\n  return font;\r\n}\r\n\r\n/**\r\n * Evaluates the given `inputs` sequentially and returns the first defined value.\r\n * @param {Array} inputs - An array of values, falling back to the last value.\r\n * @param {object} [context] - If defined and the current value is a function, the value\r\n * is called with `context` as first argument and the result becomes the new input.\r\n * @param {number} [index] - If defined and the current value is an array, the value\r\n * at `index` become the new input.\r\n * @param {object} [info] - object to return information about resolution in\r\n * @param {boolean} [info.cacheable] - Will be set to `false` if option is not cacheable.\r\n * @since 2.7.0\r\n */\r\nexport function resolve(inputs, context, index, info) {\r\n  let cacheable = true;\r\n  let i, ilen, value;\r\n\r\n  for (i = 0, ilen = inputs.length; i < ilen; ++i) {\r\n    value = inputs[i];\r\n    if (value === undefined) {\r\n      continue;\r\n    }\r\n    if (context !== undefined && typeof value === 'function') {\r\n      value = value(context);\r\n      cacheable = false;\r\n    }\r\n    if (index !== undefined && isArray(value)) {\r\n      value = value[index % value.length];\r\n      cacheable = false;\r\n    }\r\n    if (value !== undefined) {\r\n      if (info && !cacheable) {\r\n        info.cacheable = false;\r\n      }\r\n      return value;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {{min: number, max: number}} minmax\r\n * @param {number|string} grace\r\n * @param {boolean} beginAtZero\r\n * @private\r\n */\r\nexport function _addGrace(minmax, grace, beginAtZero) {\r\n  const {min, max} = minmax;\r\n  const change = toDimension(grace, (max - min) / 2);\r\n  const keepZero = (value, add) => beginAtZero && value === 0 ? 0 : value + add;\r\n  return {\r\n    min: keepZero(min, -Math.abs(change)),\r\n    max: keepZero(max, change)\r\n  };\r\n}\r\n\r\n/**\r\n * Create a context inheriting parentContext\r\n * @param {object|null} parentContext\r\n * @param {object} context\r\n * @returns {object}\r\n */\r\nexport function createContext(parentContext, context) {\r\n  return Object.assign(Object.create(parentContext), context);\r\n}\r\n","export interface RTLAdapter {\r\n  x(x: number): number;\r\n  setWidth(w: number): void;\r\n  textAlign(align: 'center' | 'left' | 'right'): 'center' | 'left' | 'right';\r\n  xPlus(x: number, value: number): number;\r\n  leftForLtr(x: number, itemWidth: number): number;\r\n}\r\n\r\nconst getRightToLeftAdapter = function(rectX: number, width: number): RTLAdapter {\r\n  return {\r\n    x(x) {\r\n      return rectX + rectX + width - x;\r\n    },\r\n    setWidth(w) {\r\n      width = w;\r\n    },\r\n    textAlign(align) {\r\n      if (align === 'center') {\r\n        return align;\r\n      }\r\n      return align === 'right' ? 'left' : 'right';\r\n    },\r\n    xPlus(x, value) {\r\n      return x - value;\r\n    },\r\n    leftForLtr(x, itemWidth) {\r\n      return x - itemWidth;\r\n    },\r\n  };\r\n};\r\n\r\nconst getLeftToRightAdapter = function(): RTLAdapter {\r\n  return {\r\n    x(x) {\r\n      return x;\r\n    },\r\n    setWidth(w) { // eslint-disable-line no-unused-vars\r\n    },\r\n    textAlign(align) {\r\n      return align;\r\n    },\r\n    xPlus(x, value) {\r\n      return x + value;\r\n    },\r\n    leftForLtr(x, _itemWidth) { // eslint-disable-line @typescript-eslint/no-unused-vars\r\n      return x;\r\n    },\r\n  };\r\n};\r\n\r\nexport function getRtlAdapter(rtl: boolean, rectX: number, width: number) {\r\n  return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\r\n}\r\n\r\nexport function overrideTextDirection(ctx: CanvasRenderingContext2D, direction: 'ltr' | 'rtl') {\r\n  let style: CSSStyleDeclaration, original: [string, string];\r\n  if (direction === 'ltr' || direction === 'rtl') {\r\n    style = ctx.canvas.style;\r\n    original = [\r\n      style.getPropertyValue('direction'),\r\n      style.getPropertyPriority('direction'),\r\n    ];\r\n\r\n    style.setProperty('direction', direction, 'important');\r\n    (ctx as { prevTextDirection?: [string, string] }).prevTextDirection = original;\r\n  }\r\n}\r\n\r\nexport function restoreTextDirection(ctx: CanvasRenderingContext2D, original?: [string, string]) {\r\n  if (original !== undefined) {\r\n    delete (ctx as { prevTextDirection?: [string, string] }).prevTextDirection;\r\n    ctx.canvas.style.setProperty('direction', original[0], original[1]);\r\n  }\r\n}\r\n","import {_angleBetween, _angleDiff, _isBetween, _normalizeAngle} from './helpers.math';\r\nimport {createContext} from './helpers.options';\r\n\r\n/**\r\n * @typedef { import(\"../elements/element.line\").default } LineElement\r\n * @typedef { import(\"../elements/element.point\").default } PointElement\r\n * @typedef {{start: number, end: number, loop: boolean, style?: any}} Segment\r\n */\r\n\r\nfunction propertyFn(property) {\r\n  if (property === 'angle') {\r\n    return {\r\n      between: _angleBetween,\r\n      compare: _angleDiff,\r\n      normalize: _normalizeAngle,\r\n    };\r\n  }\r\n  return {\r\n    between: _isBetween,\r\n    compare: (a, b) => a - b,\r\n    normalize: x => x\r\n  };\r\n}\r\n\r\nfunction normalizeSegment({start, end, count, loop, style}) {\r\n  return {\r\n    start: start % count,\r\n    end: end % count,\r\n    loop: loop && (end - start + 1) % count === 0,\r\n    style\r\n  };\r\n}\r\n\r\nfunction getSegment(segment, points, bounds) {\r\n  const {property, start: startBound, end: endBound} = bounds;\r\n  const {between, normalize} = propertyFn(property);\r\n  const count = points.length;\r\n  // eslint-disable-next-line prefer-const\r\n  let {start, end, loop} = segment;\r\n  let i, ilen;\r\n\r\n  if (loop) {\r\n    start += count;\r\n    end += count;\r\n    for (i = 0, ilen = count; i < ilen; ++i) {\r\n      if (!between(normalize(points[start % count][property]), startBound, endBound)) {\r\n        break;\r\n      }\r\n      start--;\r\n      end--;\r\n    }\r\n    start %= count;\r\n    end %= count;\r\n  }\r\n\r\n  if (end < start) {\r\n    end += count;\r\n  }\r\n  return {start, end, loop, style: segment.style};\r\n}\r\n\r\n/**\r\n * Returns the sub-segment(s) of a line segment that fall in the given bounds\r\n * @param {object} segment\r\n * @param {number} segment.start - start index of the segment, referring the points array\r\n * @param {number} segment.end - end index of the segment, referring the points array\r\n * @param {boolean} segment.loop - indicates that the segment is a loop\r\n * @param {object} [segment.style] - segment style\r\n * @param {PointElement[]} points - the points that this segment refers to\r\n * @param {object} [bounds]\r\n * @param {string} bounds.property - the property of a `PointElement` we are bounding. `x`, `y` or `angle`.\r\n * @param {number} bounds.start - start value of the property\r\n * @param {number} bounds.end - end value of the property\r\n * @private\r\n **/\r\nexport function _boundSegment(segment, points, bounds) {\r\n  if (!bounds) {\r\n    return [segment];\r\n  }\r\n\r\n  const {property, start: startBound, end: endBound} = bounds;\r\n  const count = points.length;\r\n  const {compare, between, normalize} = propertyFn(property);\r\n  const {start, end, loop, style} = getSegment(segment, points, bounds);\r\n\r\n  const result = [];\r\n  let inside = false;\r\n  let subStart = null;\r\n  let value, point, prevValue;\r\n\r\n  const startIsBefore = () => between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\r\n  const endIsBefore = () => compare(endBound, value) === 0 || between(endBound, prevValue, value);\r\n  const shouldStart = () => inside || startIsBefore();\r\n  const shouldStop = () => !inside || endIsBefore();\r\n\r\n  for (let i = start, prev = start; i <= end; ++i) {\r\n    point = points[i % count];\r\n\r\n    if (point.skip) {\r\n      continue;\r\n    }\r\n\r\n    value = normalize(point[property]);\r\n\r\n    if (value === prevValue) {\r\n      continue;\r\n    }\r\n\r\n    inside = between(value, startBound, endBound);\r\n\r\n    if (subStart === null && shouldStart()) {\r\n      subStart = compare(value, startBound) === 0 ? i : prev;\r\n    }\r\n\r\n    if (subStart !== null && shouldStop()) {\r\n      result.push(normalizeSegment({start: subStart, end: i, loop, count, style}));\r\n      subStart = null;\r\n    }\r\n    prev = i;\r\n    prevValue = value;\r\n  }\r\n\r\n  if (subStart !== null) {\r\n    result.push(normalizeSegment({start: subStart, end, loop, count, style}));\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n\r\n/**\r\n * Returns the segments of the line that are inside given bounds\r\n * @param {LineElement} line\r\n * @param {object} [bounds]\r\n * @param {string} bounds.property - the property we are bounding with. `x`, `y` or `angle`.\r\n * @param {number} bounds.start - start value of the `property`\r\n * @param {number} bounds.end - end value of the `property`\r\n * @private\r\n */\r\nexport function _boundSegments(line, bounds) {\r\n  const result = [];\r\n  const segments = line.segments;\r\n\r\n  for (let i = 0; i < segments.length; i++) {\r\n    const sub = _boundSegment(segments[i], line.points, bounds);\r\n    if (sub.length) {\r\n      result.push(...sub);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Find start and end index of a line.\r\n */\r\nfunction findStartAndEnd(points, count, loop, spanGaps) {\r\n  let start = 0;\r\n  let end = count - 1;\r\n\r\n  if (loop && !spanGaps) {\r\n    // loop and not spanning gaps, first find a gap to start from\r\n    while (start < count && !points[start].skip) {\r\n      start++;\r\n    }\r\n  }\r\n\r\n  // find first non skipped point (after the first gap possibly)\r\n  while (start < count && points[start].skip) {\r\n    start++;\r\n  }\r\n\r\n  // if we looped to count, start needs to be 0\r\n  start %= count;\r\n\r\n  if (loop) {\r\n    // loop will go past count, if start > 0\r\n    end += start;\r\n  }\r\n\r\n  while (end > start && points[end % count].skip) {\r\n    end--;\r\n  }\r\n\r\n  // end could be more than count, normalize\r\n  end %= count;\r\n\r\n  return {start, end};\r\n}\r\n\r\n/**\r\n * Compute solid segments from Points, when spanGaps === false\r\n * @param {PointElement[]} points - the points\r\n * @param {number} start - start index\r\n * @param {number} max - max index (can go past count on a loop)\r\n * @param {boolean} loop - boolean indicating that this would be a loop if no gaps are found\r\n */\r\nfunction solidSegments(points, start, max, loop) {\r\n  const count = points.length;\r\n  const result = [];\r\n  let last = start;\r\n  let prev = points[start];\r\n  let end;\r\n\r\n  for (end = start + 1; end <= max; ++end) {\r\n    const cur = points[end % count];\r\n    if (cur.skip || cur.stop) {\r\n      if (!prev.skip) {\r\n        loop = false;\r\n        result.push({start: start % count, end: (end - 1) % count, loop});\r\n        // @ts-ignore\r\n        start = last = cur.stop ? end : null;\r\n      }\r\n    } else {\r\n      last = end;\r\n      if (prev.skip) {\r\n        start = end;\r\n      }\r\n    }\r\n    prev = cur;\r\n  }\r\n\r\n  if (last !== null) {\r\n    result.push({start: start % count, end: last % count, loop});\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Compute the continuous segments that define the whole line\r\n * There can be skipped points within a segment, if spanGaps is true.\r\n * @param {LineElement} line\r\n * @param {object} [segmentOptions]\r\n * @return {Segment[]}\r\n * @private\r\n */\r\nexport function _computeSegments(line, segmentOptions) {\r\n  const points = line.points;\r\n  const spanGaps = line.options.spanGaps;\r\n  const count = points.length;\r\n\r\n  if (!count) {\r\n    return [];\r\n  }\r\n\r\n  const loop = !!line._loop;\r\n  const {start, end} = findStartAndEnd(points, count, loop, spanGaps);\r\n\r\n  if (spanGaps === true) {\r\n    return splitByStyles(line, [{start, end, loop}], points, segmentOptions);\r\n  }\r\n\r\n  const max = end < start ? end + count : end;\r\n  const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\r\n  return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);\r\n}\r\n\r\n/**\r\n * @param {Segment[]} segments\r\n * @param {PointElement[]} points\r\n * @param {object} [segmentOptions]\r\n * @return {Segment[]}\r\n */\r\nfunction splitByStyles(line, segments, points, segmentOptions) {\r\n  if (!segmentOptions || !segmentOptions.setContext || !points) {\r\n    return segments;\r\n  }\r\n  return doSplitByStyles(line, segments, points, segmentOptions);\r\n}\r\n\r\n/**\r\n * @param {LineElement} line\r\n * @param {Segment[]} segments\r\n * @param {PointElement[]} points\r\n * @param {object} [segmentOptions]\r\n * @return {Segment[]}\r\n */\r\nfunction doSplitByStyles(line, segments, points, segmentOptions) {\r\n  const chartContext = line._chart.getContext();\r\n  const baseStyle = readStyle(line.options);\r\n  const {_datasetIndex: datasetIndex, options: {spanGaps}} = line;\r\n  const count = points.length;\r\n  const result = [];\r\n  let prevStyle = baseStyle;\r\n  let start = segments[0].start;\r\n  let i = start;\r\n\r\n  function addStyle(s, e, l, st) {\r\n    const dir = spanGaps ? -1 : 1;\r\n    if (s === e) {\r\n      return;\r\n    }\r\n    // Style can not start/end on a skipped point, adjust indices accordingly\r\n    s += count;\r\n    while (points[s % count].skip) {\r\n      s -= dir;\r\n    }\r\n    while (points[e % count].skip) {\r\n      e += dir;\r\n    }\r\n    if (s % count !== e % count) {\r\n      result.push({start: s % count, end: e % count, loop: l, style: st});\r\n      prevStyle = st;\r\n      start = e % count;\r\n    }\r\n  }\r\n\r\n  for (const segment of segments) {\r\n    start = spanGaps ? start : segment.start;\r\n    let prev = points[start % count];\r\n    let style;\r\n    for (i = start + 1; i <= segment.end; i++) {\r\n      const pt = points[i % count];\r\n      style = readStyle(segmentOptions.setContext(createContext(chartContext, {\r\n        type: 'segment',\r\n        p0: prev,\r\n        p1: pt,\r\n        p0DataIndex: (i - 1) % count,\r\n        p1DataIndex: i % count,\r\n        datasetIndex\r\n      })));\r\n      if (styleChanged(style, prevStyle)) {\r\n        addStyle(start, i - 1, segment.loop, prevStyle);\r\n      }\r\n      prev = pt;\r\n      prevStyle = style;\r\n    }\r\n    if (start < i - 1) {\r\n      addStyle(start, i - 1, segment.loop, prevStyle);\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction readStyle(options) {\r\n  return {\r\n    backgroundColor: options.backgroundColor,\r\n    borderCapStyle: options.borderCapStyle,\r\n    borderDash: options.borderDash,\r\n    borderDashOffset: options.borderDashOffset,\r\n    borderJoinStyle: options.borderJoinStyle,\r\n    borderWidth: options.borderWidth,\r\n    borderColor: options.borderColor\r\n  };\r\n}\r\n\r\nfunction styleChanged(style, prevStyle) {\r\n  return prevStyle && JSON.stringify(style) !== JSON.stringify(prevStyle);\r\n}\r\n","import {_lookupByKey, _rlookupByKey} from '../helpers/helpers.collection';\r\nimport {getRelativePosition} from '../helpers/helpers.dom';\r\nimport {_angleBetween, getAngleFromPoint} from '../helpers/helpers.math';\r\nimport {_isPointInArea} from '../helpers';\r\n\r\n/**\r\n * @typedef { import(\"./core.controller\").default } Chart\r\n * @typedef { import(\"../../types\").ChartEvent } ChartEvent\r\n * @typedef {{axis?: string, intersect?: boolean, includeInvisible?: boolean}} InteractionOptions\r\n * @typedef {{datasetIndex: number, index: number, element: import(\"./core.element\").default}} InteractionItem\r\n * @typedef { import(\"../../types\").Point } Point\r\n */\r\n\r\n/**\r\n * Helper function to do binary search when possible\r\n * @param {object} metaset - the dataset meta\r\n * @param {string} axis - the axis mode. x|y|xy|r\r\n * @param {number} value - the value to find\r\n * @param {boolean} [intersect] - should the element intersect\r\n * @returns {{lo:number, hi:number}} indices to search data array between\r\n */\r\nfunction binarySearch(metaset, axis, value, intersect) {\r\n  const {controller, data, _sorted} = metaset;\r\n  const iScale = controller._cachedMeta.iScale;\r\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\r\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\r\n    if (!intersect) {\r\n      return lookupMethod(data, axis, value);\r\n    } else if (controller._sharedOptions) {\r\n      // _sharedOptions indicates that each element has equal options -> equal proportions\r\n      // So we can do a ranged binary search based on the range of first element and\r\n      // be confident to get the full range of indices that can intersect with the value.\r\n      const el = data[0];\r\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\r\n      if (range) {\r\n        const start = lookupMethod(data, axis, value - range);\r\n        const end = lookupMethod(data, axis, value + range);\r\n        return {lo: start.lo, hi: end.hi};\r\n      }\r\n    }\r\n  }\r\n  // Default to all elements, when binary search can not be used.\r\n  return {lo: 0, hi: data.length - 1};\r\n}\r\n\r\n/**\r\n * Helper function to select candidate elements for interaction\r\n * @param {Chart} chart - the chart\r\n * @param {string} axis - the axis mode. x|y|xy|r\r\n * @param {Point} position - the point to be nearest to, in relative coordinates\r\n * @param {function} handler - the callback to execute for each visible item\r\n * @param {boolean} [intersect] - consider intersecting items\r\n */\r\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\r\n  const metasets = chart.getSortedVisibleDatasetMetas();\r\n  const value = position[axis];\r\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\r\n    const {index, data} = metasets[i];\r\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\r\n    for (let j = lo; j <= hi; ++j) {\r\n      const element = data[j];\r\n      if (!element.skip) {\r\n        handler(element, index, j);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Get a distance metric function for two points based on the\r\n * axis mode setting\r\n * @param {string} axis - the axis mode. x|y|xy|r\r\n */\r\nfunction getDistanceMetricForAxis(axis) {\r\n  const useX = axis.indexOf('x') !== -1;\r\n  const useY = axis.indexOf('y') !== -1;\r\n\r\n  return function(pt1, pt2) {\r\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\r\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\r\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\r\n  };\r\n}\r\n\r\n/**\r\n * Helper function to get the items that intersect the event position\r\n * @param {Chart} chart - the chart\r\n * @param {Point} position - the point to be nearest to, in relative coordinates\r\n * @param {string} axis - the axis mode. x|y|xy|r\r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\r\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\r\n * @return {InteractionItem[]} the nearest items\r\n */\r\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\r\n  const items = [];\r\n\r\n  if (!includeInvisible && !chart.isPointInArea(position)) {\r\n    return items;\r\n  }\r\n\r\n  const evaluationFunc = function(element, datasetIndex, index) {\r\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\r\n      return;\r\n    }\r\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\r\n      items.push({element, datasetIndex, index});\r\n    }\r\n  };\r\n\r\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\r\n  return items;\r\n}\r\n\r\n/**\r\n * Helper function to get the items nearest to the event position for a radial chart\r\n * @param {Chart} chart - the chart to look at elements from\r\n * @param {Point} position - the point to be nearest to, in relative coordinates\r\n * @param {string} axis - the axes along which to measure distance\r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\r\n * @return {InteractionItem[]} the nearest items\r\n */\r\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\r\n  let items = [];\r\n\r\n  function evaluationFunc(element, datasetIndex, index) {\r\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\r\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\r\n\r\n    if (_angleBetween(angle, startAngle, endAngle)) {\r\n      items.push({element, datasetIndex, index});\r\n    }\r\n  }\r\n\r\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\r\n  return items;\r\n}\r\n\r\n/**\r\n * Helper function to get the items nearest to the event position for a cartesian chart\r\n * @param {Chart} chart - the chart to look at elements from\r\n * @param {Point} position - the point to be nearest to, in relative coordinates\r\n * @param {string} axis - the axes along which to measure distance\r\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\r\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\r\n * @return {InteractionItem[]} the nearest items\r\n */\r\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\r\n  let items = [];\r\n  const distanceMetric = getDistanceMetricForAxis(axis);\r\n  let minDistance = Number.POSITIVE_INFINITY;\r\n\r\n  function evaluationFunc(element, datasetIndex, index) {\r\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\r\n    if (intersect && !inRange) {\r\n      return;\r\n    }\r\n\r\n    const center = element.getCenterPoint(useFinalPosition);\r\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\r\n    if (!pointInArea && !inRange) {\r\n      return;\r\n    }\r\n\r\n    const distance = distanceMetric(position, center);\r\n    if (distance < minDistance) {\r\n      items = [{element, datasetIndex, index}];\r\n      minDistance = distance;\r\n    } else if (distance === minDistance) {\r\n      // Can have multiple items at the same distance in which case we sort by size\r\n      items.push({element, datasetIndex, index});\r\n    }\r\n  }\r\n\r\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\r\n  return items;\r\n}\r\n\r\n/**\r\n * Helper function to get the items nearest to the event position considering all visible items in the chart\r\n * @param {Chart} chart - the chart to look at elements from\r\n * @param {Point} position - the point to be nearest to, in relative coordinates\r\n * @param {string} axis - the axes along which to measure distance\r\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\r\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\r\n * @return {InteractionItem[]} the nearest items\r\n */\r\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\r\n  if (!includeInvisible && !chart.isPointInArea(position)) {\r\n    return [];\r\n  }\r\n\r\n  return axis === 'r' && !intersect\r\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\r\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\r\n}\r\n\r\n/**\r\n * Helper function to get the items matching along the given X or Y axis\r\n * @param {Chart} chart - the chart to look at elements from\r\n * @param {Point} position - the point to be nearest to, in relative coordinates\r\n * @param {string} axis - the axis to match\r\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\r\n * @return {InteractionItem[]} the nearest items\r\n */\r\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\r\n  const items = [];\r\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\r\n  let intersectsItem = false;\r\n\r\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\r\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\r\n      items.push({element, datasetIndex, index});\r\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\r\n    }\r\n  });\r\n\r\n  // If we want to trigger on an intersect and we don't have any items\r\n  // that intersect the position, return nothing\r\n  if (intersect && !intersectsItem) {\r\n    return [];\r\n  }\r\n  return items;\r\n}\r\n\r\n/**\r\n * Contains interaction related functions\r\n * @namespace Chart.Interaction\r\n */\r\nexport default {\r\n  // Part of the public API to facilitate developers creating their own modes\r\n  evaluateInteractionItems,\r\n\r\n  // Helper function for different modes\r\n  modes: {\r\n    /**\r\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\r\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\r\n\t\t * @function Chart.Interaction.modes.index\r\n\t\t * @since v2.4.0\r\n\t\t * @param {Chart} chart - the chart we are returning items from\r\n\t\t * @param {Event} e - the event we are find things at\r\n\t\t * @param {InteractionOptions} options - options to use\r\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\r\n\t\t * @return {InteractionItem[]} - items that are found\r\n\t\t */\r\n    index(chart, e, options, useFinalPosition) {\r\n      const position = getRelativePosition(e, chart);\r\n      // Default axis for index mode is 'x' to match old behaviour\r\n      const axis = options.axis || 'x';\r\n      const includeInvisible = options.includeInvisible || false;\r\n      const items = options.intersect\r\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\r\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\r\n      const elements = [];\r\n\r\n      if (!items.length) {\r\n        return [];\r\n      }\r\n\r\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\r\n        const index = items[0].index;\r\n        const element = meta.data[index];\r\n\r\n        // don't count items that are skipped (null data)\r\n        if (element && !element.skip) {\r\n          elements.push({element, datasetIndex: meta.index, index});\r\n        }\r\n      });\r\n\r\n      return elements;\r\n    },\r\n\r\n    /**\r\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\r\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\r\n\t\t * @function Chart.Interaction.modes.dataset\r\n\t\t * @param {Chart} chart - the chart we are returning items from\r\n\t\t * @param {Event} e - the event we are find things at\r\n\t\t * @param {InteractionOptions} options - options to use\r\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\r\n\t\t * @return {InteractionItem[]} - items that are found\r\n\t\t */\r\n    dataset(chart, e, options, useFinalPosition) {\r\n      const position = getRelativePosition(e, chart);\r\n      const axis = options.axis || 'xy';\r\n      const includeInvisible = options.includeInvisible || false;\r\n      let items = options.intersect\r\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\r\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\r\n\r\n      if (items.length > 0) {\r\n        const datasetIndex = items[0].datasetIndex;\r\n        const data = chart.getDatasetMeta(datasetIndex).data;\r\n        items = [];\r\n        for (let i = 0; i < data.length; ++i) {\r\n          items.push({element: data[i], datasetIndex, index: i});\r\n        }\r\n      }\r\n\r\n      return items;\r\n    },\r\n\r\n    /**\r\n\t\t * Point mode returns all elements that hit test based on the event position\r\n\t\t * of the event\r\n\t\t * @function Chart.Interaction.modes.intersect\r\n\t\t * @param {Chart} chart - the chart we are returning items from\r\n\t\t * @param {Event} e - the event we are find things at\r\n\t\t * @param {InteractionOptions} options - options to use\r\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\r\n\t\t * @return {InteractionItem[]} - items that are found\r\n\t\t */\r\n    point(chart, e, options, useFinalPosition) {\r\n      const position = getRelativePosition(e, chart);\r\n      const axis = options.axis || 'xy';\r\n      const includeInvisible = options.includeInvisible || false;\r\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\r\n    },\r\n\r\n    /**\r\n\t\t * nearest mode returns the element closest to the point\r\n\t\t * @function Chart.Interaction.modes.intersect\r\n\t\t * @param {Chart} chart - the chart we are returning items from\r\n\t\t * @param {Event} e - the event we are find things at\r\n\t\t * @param {InteractionOptions} options - options to use\r\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\r\n\t\t * @return {InteractionItem[]} - items that are found\r\n\t\t */\r\n    nearest(chart, e, options, useFinalPosition) {\r\n      const position = getRelativePosition(e, chart);\r\n      const axis = options.axis || 'xy';\r\n      const includeInvisible = options.includeInvisible || false;\r\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\r\n    },\r\n\r\n    /**\r\n\t\t * x mode returns the elements that hit-test at the current x coordinate\r\n\t\t * @function Chart.Interaction.modes.x\r\n\t\t * @param {Chart} chart - the chart we are returning items from\r\n\t\t * @param {Event} e - the event we are find things at\r\n\t\t * @param {InteractionOptions} options - options to use\r\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\r\n\t\t * @return {InteractionItem[]} - items that are found\r\n\t\t */\r\n    x(chart, e, options, useFinalPosition) {\r\n      const position = getRelativePosition(e, chart);\r\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\r\n    },\r\n\r\n    /**\r\n\t\t * y mode returns the elements that hit-test at the current y coordinate\r\n\t\t * @function Chart.Interaction.modes.y\r\n\t\t * @param {Chart} chart - the chart we are returning items from\r\n\t\t * @param {Event} e - the event we are find things at\r\n\t\t * @param {InteractionOptions} options - options to use\r\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\r\n\t\t * @return {InteractionItem[]} - items that are found\r\n\t\t */\r\n    y(chart, e, options, useFinalPosition) {\r\n      const position = getRelativePosition(e, chart);\r\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\r\n    }\r\n  }\r\n};\r\n","import {defined, each, isObject} from '../helpers/helpers.core';\r\nimport {toPadding} from '../helpers/helpers.options';\r\n\r\n/**\r\n * @typedef { import(\"./core.controller\").default } Chart\r\n */\r\n\r\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\r\n\r\nfunction filterByPosition(array, position) {\r\n  return array.filter(v => v.pos === position);\r\n}\r\n\r\nfunction filterDynamicPositionByAxis(array, axis) {\r\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\r\n}\r\n\r\nfunction sortByWeight(array, reverse) {\r\n  return array.sort((a, b) => {\r\n    const v0 = reverse ? b : a;\r\n    const v1 = reverse ? a : b;\r\n    return v0.weight === v1.weight ?\r\n      v0.index - v1.index :\r\n      v0.weight - v1.weight;\r\n  });\r\n}\r\n\r\nfunction wrapBoxes(boxes) {\r\n  const layoutBoxes = [];\r\n  let i, ilen, box, pos, stack, stackWeight;\r\n\r\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\r\n    box = boxes[i];\r\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\r\n    layoutBoxes.push({\r\n      index: i,\r\n      box,\r\n      pos,\r\n      horizontal: box.isHorizontal(),\r\n      weight: box.weight,\r\n      stack: stack && (pos + stack),\r\n      stackWeight\r\n    });\r\n  }\r\n  return layoutBoxes;\r\n}\r\n\r\nfunction buildStacks(layouts) {\r\n  const stacks = {};\r\n  for (const wrap of layouts) {\r\n    const {stack, pos, stackWeight} = wrap;\r\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\r\n      continue;\r\n    }\r\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\r\n    _stack.count++;\r\n    _stack.weight += stackWeight;\r\n  }\r\n  return stacks;\r\n}\r\n\r\n/**\r\n * store dimensions used instead of available chartArea in fitBoxes\r\n **/\r\nfunction setLayoutDims(layouts, params) {\r\n  const stacks = buildStacks(layouts);\r\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\r\n  let i, ilen, layout;\r\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\r\n    layout = layouts[i];\r\n    const {fullSize} = layout.box;\r\n    const stack = stacks[layout.stack];\r\n    const factor = stack && layout.stackWeight / stack.weight;\r\n    if (layout.horizontal) {\r\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\r\n      layout.height = hBoxMaxHeight;\r\n    } else {\r\n      layout.width = vBoxMaxWidth;\r\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\r\n    }\r\n  }\r\n  return stacks;\r\n}\r\n\r\nfunction buildLayoutBoxes(boxes) {\r\n  const layoutBoxes = wrapBoxes(boxes);\r\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\r\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\r\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\r\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\r\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\r\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\r\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\r\n\r\n  return {\r\n    fullSize,\r\n    leftAndTop: left.concat(top),\r\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\r\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\r\n    vertical: left.concat(right).concat(centerVertical),\r\n    horizontal: top.concat(bottom).concat(centerHorizontal)\r\n  };\r\n}\r\n\r\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\r\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\r\n}\r\n\r\nfunction updateMaxPadding(maxPadding, boxPadding) {\r\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\r\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\r\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\r\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\r\n}\r\n\r\nfunction updateDims(chartArea, params, layout, stacks) {\r\n  const {pos, box} = layout;\r\n  const maxPadding = chartArea.maxPadding;\r\n\r\n  // dynamically placed boxes size is not considered\r\n  if (!isObject(pos)) {\r\n    if (layout.size) {\r\n      // this layout was already counted for, lets first reduce old size\r\n      chartArea[pos] -= layout.size;\r\n    }\r\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\r\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\r\n    layout.size = stack.size / stack.count;\r\n    chartArea[pos] += layout.size;\r\n  }\r\n\r\n  if (box.getPadding) {\r\n    updateMaxPadding(maxPadding, box.getPadding());\r\n  }\r\n\r\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\r\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\r\n  const widthChanged = newWidth !== chartArea.w;\r\n  const heightChanged = newHeight !== chartArea.h;\r\n  chartArea.w = newWidth;\r\n  chartArea.h = newHeight;\r\n\r\n  // return booleans on the changes per direction\r\n  return layout.horizontal\r\n    ? {same: widthChanged, other: heightChanged}\r\n    : {same: heightChanged, other: widthChanged};\r\n}\r\n\r\nfunction handleMaxPadding(chartArea) {\r\n  const maxPadding = chartArea.maxPadding;\r\n\r\n  function updatePos(pos) {\r\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\r\n    chartArea[pos] += change;\r\n    return change;\r\n  }\r\n  chartArea.y += updatePos('top');\r\n  chartArea.x += updatePos('left');\r\n  updatePos('right');\r\n  updatePos('bottom');\r\n}\r\n\r\nfunction getMargins(horizontal, chartArea) {\r\n  const maxPadding = chartArea.maxPadding;\r\n\r\n  function marginForPositions(positions) {\r\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\r\n    positions.forEach((pos) => {\r\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\r\n    });\r\n    return margin;\r\n  }\r\n\r\n  return horizontal\r\n    ? marginForPositions(['left', 'right'])\r\n    : marginForPositions(['top', 'bottom']);\r\n}\r\n\r\nfunction fitBoxes(boxes, chartArea, params, stacks) {\r\n  const refitBoxes = [];\r\n  let i, ilen, layout, box, refit, changed;\r\n\r\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\r\n    layout = boxes[i];\r\n    box = layout.box;\r\n\r\n    box.update(\r\n      layout.width || chartArea.w,\r\n      layout.height || chartArea.h,\r\n      getMargins(layout.horizontal, chartArea)\r\n    );\r\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\r\n\r\n    // Dimensions changed and there were non full width boxes before this\r\n    // -> we have to refit those\r\n    refit |= same && refitBoxes.length;\r\n\r\n    // Chart area changed in the opposite direction\r\n    changed = changed || other;\r\n\r\n    if (!box.fullSize) { // fullSize boxes don't need to be re-fitted in any case\r\n      refitBoxes.push(layout);\r\n    }\r\n  }\r\n\r\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\r\n}\r\n\r\nfunction setBoxDims(box, left, top, width, height) {\r\n  box.top = top;\r\n  box.left = left;\r\n  box.right = left + width;\r\n  box.bottom = top + height;\r\n  box.width = width;\r\n  box.height = height;\r\n}\r\n\r\nfunction placeBoxes(boxes, chartArea, params, stacks) {\r\n  const userPadding = params.padding;\r\n  let {x, y} = chartArea;\r\n\r\n  for (const layout of boxes) {\r\n    const box = layout.box;\r\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\r\n    const weight = (layout.stackWeight / stack.weight) || 1;\r\n    if (layout.horizontal) {\r\n      const width = chartArea.w * weight;\r\n      const height = stack.size || box.height;\r\n      if (defined(stack.start)) {\r\n        y = stack.start;\r\n      }\r\n      if (box.fullSize) {\r\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\r\n      } else {\r\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\r\n      }\r\n      stack.start = y;\r\n      stack.placed += width;\r\n      y = box.bottom;\r\n    } else {\r\n      const height = chartArea.h * weight;\r\n      const width = stack.size || box.width;\r\n      if (defined(stack.start)) {\r\n        x = stack.start;\r\n      }\r\n      if (box.fullSize) {\r\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\r\n      } else {\r\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\r\n      }\r\n      stack.start = x;\r\n      stack.placed += height;\r\n      x = box.right;\r\n    }\r\n  }\r\n\r\n  chartArea.x = x;\r\n  chartArea.y = y;\r\n}\r\n\r\n/**\r\n * @interface LayoutItem\r\n * @typedef {object} LayoutItem\r\n * @prop {string} position - The position of the item in the chart layout. Possible values are\r\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\r\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\r\n * @prop {boolean} fullSize - if true, and the item is horizontal, then push vertical boxes down\r\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\r\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\r\n * @prop {function} draw - Draws the element\r\n * @prop {function} [getPadding] -  Returns an object with padding on the edges\r\n * @prop {number} width - Width of item. Must be valid after update()\r\n * @prop {number} height - Height of item. Must be valid after update()\r\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\r\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\r\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\r\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\r\n */\r\n\r\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\r\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\r\n// It is this service's responsibility of carrying out that layout.\r\nexport default {\r\n\r\n  /**\r\n\t * Register a box to a chart.\r\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\r\n\t * @param {Chart} chart - the chart to use\r\n\t * @param {LayoutItem} item - the item to add to be laid out\r\n\t */\r\n  addBox(chart, item) {\r\n    if (!chart.boxes) {\r\n      chart.boxes = [];\r\n    }\r\n\r\n    // initialize item with default values\r\n    item.fullSize = item.fullSize || false;\r\n    item.position = item.position || 'top';\r\n    item.weight = item.weight || 0;\r\n    // @ts-ignore\r\n    item._layers = item._layers || function() {\r\n      return [{\r\n        z: 0,\r\n        draw(chartArea) {\r\n          item.draw(chartArea);\r\n        }\r\n      }];\r\n    };\r\n\r\n    chart.boxes.push(item);\r\n  },\r\n\r\n  /**\r\n\t * Remove a layoutItem from a chart\r\n\t * @param {Chart} chart - the chart to remove the box from\r\n\t * @param {LayoutItem} layoutItem - the item to remove from the layout\r\n\t */\r\n  removeBox(chart, layoutItem) {\r\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\r\n    if (index !== -1) {\r\n      chart.boxes.splice(index, 1);\r\n    }\r\n  },\r\n\r\n  /**\r\n\t * Sets (or updates) options on the given `item`.\r\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\r\n\t * @param {LayoutItem} item - the item to configure with the given options\r\n\t * @param {object} options - the new item options.\r\n\t */\r\n  configure(chart, item, options) {\r\n    item.fullSize = options.fullSize;\r\n    item.position = options.position;\r\n    item.weight = options.weight;\r\n  },\r\n\r\n  /**\r\n\t * Fits boxes of the given chart into the given size by having each box measure itself\r\n\t * then running a fitting algorithm\r\n\t * @param {Chart} chart - the chart\r\n\t * @param {number} width - the width to fit into\r\n\t * @param {number} height - the height to fit into\r\n   * @param {number} minPadding - minimum padding required for each side of chart area\r\n\t */\r\n  update(chart, width, height, minPadding) {\r\n    if (!chart) {\r\n      return;\r\n    }\r\n\r\n    const padding = toPadding(chart.options.layout.padding);\r\n    const availableWidth = Math.max(width - padding.width, 0);\r\n    const availableHeight = Math.max(height - padding.height, 0);\r\n    const boxes = buildLayoutBoxes(chart.boxes);\r\n    const verticalBoxes = boxes.vertical;\r\n    const horizontalBoxes = boxes.horizontal;\r\n\r\n    // Before any changes are made, notify boxes that an update is about to being\r\n    // This is used to clear any cached data (e.g. scale limits)\r\n    each(chart.boxes, box => {\r\n      if (typeof box.beforeLayout === 'function') {\r\n        box.beforeLayout();\r\n      }\r\n    });\r\n\r\n    // Essentially we now have any number of boxes on each of the 4 sides.\r\n    // Our canvas looks like the following.\r\n    // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\r\n    // B1 is the bottom axis\r\n    // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\r\n    // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\r\n    // an error will be thrown.\r\n    //\r\n    // |----------------------------------------------------|\r\n    // |                  T1 (Full Width)                   |\r\n    // |----------------------------------------------------|\r\n    // |    |    |                 T2                  |    |\r\n    // |    |----|-------------------------------------|----|\r\n    // |    |    | C1 |                           | C2 |    |\r\n    // |    |    |----|                           |----|    |\r\n    // |    |    |                                     |    |\r\n    // | L1 | L2 |           ChartArea (C0)            | R1 |\r\n    // |    |    |                                     |    |\r\n    // |    |    |----|                           |----|    |\r\n    // |    |    | C3 |                           | C4 |    |\r\n    // |    |----|-------------------------------------|----|\r\n    // |    |    |                 B1                  |    |\r\n    // |----------------------------------------------------|\r\n    // |                  B2 (Full Width)                   |\r\n    // |----------------------------------------------------|\r\n    //\r\n\r\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\r\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\r\n\r\n    const params = Object.freeze({\r\n      outerWidth: width,\r\n      outerHeight: height,\r\n      padding,\r\n      availableWidth,\r\n      availableHeight,\r\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\r\n      hBoxMaxHeight: availableHeight / 2\r\n    });\r\n    const maxPadding = Object.assign({}, padding);\r\n    updateMaxPadding(maxPadding, toPadding(minPadding));\r\n    const chartArea = Object.assign({\r\n      maxPadding,\r\n      w: availableWidth,\r\n      h: availableHeight,\r\n      x: padding.left,\r\n      y: padding.top\r\n    }, padding);\r\n\r\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\r\n\r\n    // First fit the fullSize boxes, to reduce probability of re-fitting.\r\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\r\n\r\n    // Then fit vertical boxes\r\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\r\n\r\n    // Then fit horizontal boxes\r\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\r\n      // if the area changed, re-fit vertical boxes\r\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\r\n    }\r\n\r\n    handleMaxPadding(chartArea);\r\n\r\n    // Finally place the boxes to correct coordinates\r\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\r\n\r\n    // Move to opposite side of chart\r\n    chartArea.x += chartArea.w;\r\n    chartArea.y += chartArea.h;\r\n\r\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\r\n\r\n    chart.chartArea = {\r\n      left: chartArea.left,\r\n      top: chartArea.top,\r\n      right: chartArea.left + chartArea.w,\r\n      bottom: chartArea.top + chartArea.h,\r\n      height: chartArea.h,\r\n      width: chartArea.w,\r\n    };\r\n\r\n    // Finally update boxes in chartArea (radial scale for example)\r\n    each(boxes.chartArea, (layout) => {\r\n      const box = layout.box;\r\n      Object.assign(box, chart.chartArea);\r\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\r\n    });\r\n  }\r\n};\r\n","\r\n/**\r\n * @typedef { import(\"../core/core.controller\").default } Chart\r\n */\r\n\r\n/**\r\n * Abstract class that allows abstracting platform dependencies away from the chart.\r\n */\r\nexport default class BasePlatform {\r\n  /**\r\n\t * Called at chart construction time, returns a context2d instance implementing\r\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\r\n\t * @param {HTMLCanvasElement} canvas - The canvas from which to acquire context (platform specific)\r\n\t * @param {number} [aspectRatio] - The chart options\r\n\t */\r\n  acquireContext(canvas, aspectRatio) {} // eslint-disable-line no-unused-vars\r\n\r\n  /**\r\n\t * Called at chart destruction time, releases any resources associated to the context\r\n\t * previously returned by the acquireContext() method.\r\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\r\n\t * @returns {boolean} true if the method succeeded, else false\r\n\t */\r\n  releaseContext(context) { // eslint-disable-line no-unused-vars\r\n    return false;\r\n  }\r\n\r\n  /**\r\n\t * Registers the specified listener on the given chart.\r\n\t * @param {Chart} chart - Chart from which to listen for event\r\n\t * @param {string} type - The ({@link ChartEvent}) type to listen for\r\n\t * @param {function} listener - Receives a notification (an object that implements\r\n\t * the {@link ChartEvent} interface) when an event of the specified type occurs.\r\n\t */\r\n  addEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\r\n\r\n  /**\r\n\t * Removes the specified listener previously registered with addEventListener.\r\n\t * @param {Chart} chart - Chart from which to remove the listener\r\n\t * @param {string} type - The ({@link ChartEvent}) type to remove\r\n\t * @param {function} listener - The listener function to remove from the event target.\r\n\t */\r\n  removeEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\r\n\r\n  /**\r\n\t * @returns {number} the current devicePixelRatio of the device this platform is connected to.\r\n\t */\r\n  getDevicePixelRatio() {\r\n    return 1;\r\n  }\r\n\r\n  /**\r\n\t * Returns the maximum size in pixels of given canvas element.\r\n\t * @param {HTMLCanvasElement} element\r\n\t * @param {number} [width] - content width of parent element\r\n\t * @param {number} [height] - content height of parent element\r\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\r\n\t */\r\n  getMaximumSize(element, width, height, aspectRatio) {\r\n    width = Math.max(0, width || element.width);\r\n    height = height || element.height;\r\n    return {\r\n      width,\r\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * @param {HTMLCanvasElement} canvas\r\n\t * @returns {boolean} true if the canvas is attached to the platform, false if not.\r\n\t */\r\n  isAttached(canvas) { // eslint-disable-line no-unused-vars\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Updates config with platform specific requirements\r\n   * @param {import(\"../core/core.config\").default} config\r\n   */\r\n  updateConfig(config) { // eslint-disable-line no-unused-vars\r\n    // no-op\r\n  }\r\n}\r\n","/**\r\n * Platform fallback implementation (minimal).\r\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\r\n */\r\n\r\nimport BasePlatform from './platform.base';\r\n\r\n/**\r\n * Platform class for charts without access to the DOM or to many element properties\r\n * This platform is used by default for any chart passed an OffscreenCanvas.\r\n * @extends BasePlatform\r\n */\r\nexport default class BasicPlatform extends BasePlatform {\r\n  acquireContext(item) {\r\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\r\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\r\n    // https://github.com/chartjs/Chart.js/issues/2807\r\n    return item && item.getContext && item.getContext('2d') || null;\r\n  }\r\n  updateConfig(config) {\r\n    config.options.animation = false;\r\n  }\r\n}\r\n","/**\r\n * Chart.Platform implementation for targeting a web browser\r\n */\r\n\r\nimport BasePlatform from './platform.base';\r\nimport {_getParentNode, getRelativePosition, supportsEventListenerOptions, readUsedSize, getMaximumSize} from '../helpers/helpers.dom';\r\nimport {throttled} from '../helpers/helpers.extras';\r\nimport {isNullOrUndef} from '../helpers/helpers.core';\r\n\r\n/**\r\n * @typedef { import(\"../core/core.controller\").default } Chart\r\n */\r\n\r\nconst EXPANDO_KEY = '$chartjs';\r\n\r\n/**\r\n * DOM event types -> Chart.js event types.\r\n * Note: only events with different types are mapped.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\r\n */\r\nconst EVENT_TYPES = {\r\n  touchstart: 'mousedown',\r\n  touchmove: 'mousemove',\r\n  touchend: 'mouseup',\r\n  pointerenter: 'mouseenter',\r\n  pointerdown: 'mousedown',\r\n  pointermove: 'mousemove',\r\n  pointerup: 'mouseup',\r\n  pointerleave: 'mouseout',\r\n  pointerout: 'mouseout'\r\n};\r\n\r\nconst isNullOrEmpty = value => value === null || value === '';\r\n/**\r\n * Initializes the canvas style and render size without modifying the canvas display size,\r\n * since responsiveness is handled by the controller.resize() method. The config is used\r\n * to determine the aspect ratio to apply in case no explicit height has been specified.\r\n * @param {HTMLCanvasElement} canvas\r\n * @param {number} [aspectRatio]\r\n */\r\nfunction initCanvas(canvas, aspectRatio) {\r\n  const style = canvas.style;\r\n\r\n  // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\r\n  // returns null or '' if no explicit value has been set to the canvas attribute.\r\n  const renderHeight = canvas.getAttribute('height');\r\n  const renderWidth = canvas.getAttribute('width');\r\n\r\n  // Chart.js modifies some canvas values that we want to restore on destroy\r\n  canvas[EXPANDO_KEY] = {\r\n    initial: {\r\n      height: renderHeight,\r\n      width: renderWidth,\r\n      style: {\r\n        display: style.display,\r\n        height: style.height,\r\n        width: style.width\r\n      }\r\n    }\r\n  };\r\n\r\n  // Force canvas to display as block to avoid extra space caused by inline\r\n  // elements, which would interfere with the responsive resize process.\r\n  // https://github.com/chartjs/Chart.js/issues/2538\r\n  style.display = style.display || 'block';\r\n  // Include possible borders in the size\r\n  style.boxSizing = style.boxSizing || 'border-box';\r\n\r\n  if (isNullOrEmpty(renderWidth)) {\r\n    const displayWidth = readUsedSize(canvas, 'width');\r\n    if (displayWidth !== undefined) {\r\n      canvas.width = displayWidth;\r\n    }\r\n  }\r\n\r\n  if (isNullOrEmpty(renderHeight)) {\r\n    if (canvas.style.height === '') {\r\n      // If no explicit render height and style height, let's apply the aspect ratio,\r\n      // which one can be specified by the user but also by charts as default option\r\n      // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\r\n      canvas.height = canvas.width / (aspectRatio || 2);\r\n    } else {\r\n      const displayHeight = readUsedSize(canvas, 'height');\r\n      if (displayHeight !== undefined) {\r\n        canvas.height = displayHeight;\r\n      }\r\n    }\r\n  }\r\n\r\n  return canvas;\r\n}\r\n\r\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\r\n// https://github.com/chartjs/Chart.js/issues/4287\r\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\r\n\r\nfunction addListener(node, type, listener) {\r\n  node.addEventListener(type, listener, eventListenerOptions);\r\n}\r\n\r\nfunction removeListener(chart, type, listener) {\r\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\r\n}\r\n\r\nfunction fromNativeEvent(event, chart) {\r\n  const type = EVENT_TYPES[event.type] || event.type;\r\n  const {x, y} = getRelativePosition(event, chart);\r\n  return {\r\n    type,\r\n    chart,\r\n    native: event,\r\n    x: x !== undefined ? x : null,\r\n    y: y !== undefined ? y : null,\r\n  };\r\n}\r\n\r\nfunction nodeListContains(nodeList, canvas) {\r\n  for (const node of nodeList) {\r\n    if (node === canvas || node.contains(canvas)) {\r\n      return true;\r\n    }\r\n  }\r\n}\r\n\r\nfunction createAttachObserver(chart, type, listener) {\r\n  const canvas = chart.canvas;\r\n  const observer = new MutationObserver(entries => {\r\n    let trigger = false;\r\n    for (const entry of entries) {\r\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\r\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\r\n    }\r\n    if (trigger) {\r\n      listener();\r\n    }\r\n  });\r\n  observer.observe(document, {childList: true, subtree: true});\r\n  return observer;\r\n}\r\n\r\nfunction createDetachObserver(chart, type, listener) {\r\n  const canvas = chart.canvas;\r\n  const observer = new MutationObserver(entries => {\r\n    let trigger = false;\r\n    for (const entry of entries) {\r\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\r\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\r\n    }\r\n    if (trigger) {\r\n      listener();\r\n    }\r\n  });\r\n  observer.observe(document, {childList: true, subtree: true});\r\n  return observer;\r\n}\r\n\r\nconst drpListeningCharts = new Map();\r\nlet oldDevicePixelRatio = 0;\r\n\r\nfunction onWindowResize() {\r\n  const dpr = window.devicePixelRatio;\r\n  if (dpr === oldDevicePixelRatio) {\r\n    return;\r\n  }\r\n  oldDevicePixelRatio = dpr;\r\n  drpListeningCharts.forEach((resize, chart) => {\r\n    if (chart.currentDevicePixelRatio !== dpr) {\r\n      resize();\r\n    }\r\n  });\r\n}\r\n\r\nfunction listenDevicePixelRatioChanges(chart, resize) {\r\n  if (!drpListeningCharts.size) {\r\n    window.addEventListener('resize', onWindowResize);\r\n  }\r\n  drpListeningCharts.set(chart, resize);\r\n}\r\n\r\nfunction unlistenDevicePixelRatioChanges(chart) {\r\n  drpListeningCharts.delete(chart);\r\n  if (!drpListeningCharts.size) {\r\n    window.removeEventListener('resize', onWindowResize);\r\n  }\r\n}\r\n\r\nfunction createResizeObserver(chart, type, listener) {\r\n  const canvas = chart.canvas;\r\n  const container = canvas && _getParentNode(canvas);\r\n  if (!container) {\r\n    return;\r\n  }\r\n  const resize = throttled((width, height) => {\r\n    const w = container.clientWidth;\r\n    listener(width, height);\r\n    if (w < container.clientWidth) {\r\n      // If the container size shrank during chart resize, let's assume\r\n      // scrollbar appeared. So we resize again with the scrollbar visible -\r\n      // effectively making chart smaller and the scrollbar hidden again.\r\n      // Because we are inside `throttled`, and currently `ticking`, scroll\r\n      // events are ignored during this whole 2 resize process.\r\n      // If we assumed wrong and something else happened, we are resizing\r\n      // twice in a frame (potential performance issue)\r\n      listener();\r\n    }\r\n  }, window);\r\n\r\n  // @ts-ignore until https://github.com/microsoft/TypeScript/issues/37861 implemented\r\n  const observer = new ResizeObserver(entries => {\r\n    const entry = entries[0];\r\n    const width = entry.contentRect.width;\r\n    const height = entry.contentRect.height;\r\n    // When its container's display is set to 'none' the callback will be called with a\r\n    // size of (0, 0), which will cause the chart to lose its original height, so skip\r\n    // resizing in such case.\r\n    if (width === 0 && height === 0) {\r\n      return;\r\n    }\r\n    resize(width, height);\r\n  });\r\n  observer.observe(container);\r\n  listenDevicePixelRatioChanges(chart, resize);\r\n\r\n  return observer;\r\n}\r\n\r\nfunction releaseObserver(chart, type, observer) {\r\n  if (observer) {\r\n    observer.disconnect();\r\n  }\r\n  if (type === 'resize') {\r\n    unlistenDevicePixelRatioChanges(chart);\r\n  }\r\n}\r\n\r\nfunction createProxyAndListen(chart, type, listener) {\r\n  const canvas = chart.canvas;\r\n  const proxy = throttled((event) => {\r\n    // This case can occur if the chart is destroyed while waiting\r\n    // for the throttled function to occur. We prevent crashes by checking\r\n    // for a destroyed chart\r\n    if (chart.ctx !== null) {\r\n      listener(fromNativeEvent(event, chart));\r\n    }\r\n  }, chart, (args) => {\r\n    const event = args[0];\r\n    return [event, event.offsetX, event.offsetY];\r\n  });\r\n\r\n  addListener(canvas, type, proxy);\r\n\r\n  return proxy;\r\n}\r\n\r\n/**\r\n * Platform class for charts that can access the DOM and global window/document properties\r\n * @extends BasePlatform\r\n */\r\nexport default class DomPlatform extends BasePlatform {\r\n\r\n  /**\r\n\t * @param {HTMLCanvasElement} canvas\r\n\t * @param {number} [aspectRatio]\r\n\t * @return {CanvasRenderingContext2D|null}\r\n\t */\r\n  acquireContext(canvas, aspectRatio) {\r\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\r\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\r\n    // https://github.com/chartjs/Chart.js/issues/2807\r\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\r\n\r\n    // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the canvas is\r\n    // inside an iframe or when running in a protected environment. We could guess the\r\n    // types from their toString() value but let's keep things flexible and assume it's\r\n    // a sufficient condition if the canvas has a context2D which has canvas as `canvas`.\r\n    // https://github.com/chartjs/Chart.js/issues/3887\r\n    // https://github.com/chartjs/Chart.js/issues/4102\r\n    // https://github.com/chartjs/Chart.js/issues/4152\r\n    if (context && context.canvas === canvas) {\r\n      // Load platform resources on first chart creation, to make it possible to\r\n      // import the library before setting platform options.\r\n      initCanvas(canvas, aspectRatio);\r\n      return context;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n\t * @param {CanvasRenderingContext2D} context\r\n\t */\r\n  releaseContext(context) {\r\n    const canvas = context.canvas;\r\n    if (!canvas[EXPANDO_KEY]) {\r\n      return false;\r\n    }\r\n\r\n    const initial = canvas[EXPANDO_KEY].initial;\r\n    ['height', 'width'].forEach((prop) => {\r\n      const value = initial[prop];\r\n      if (isNullOrUndef(value)) {\r\n        canvas.removeAttribute(prop);\r\n      } else {\r\n        canvas.setAttribute(prop, value);\r\n      }\r\n    });\r\n\r\n    const style = initial.style || {};\r\n    Object.keys(style).forEach((key) => {\r\n      canvas.style[key] = style[key];\r\n    });\r\n\r\n    // The canvas render size might have been changed (and thus the state stack discarded),\r\n    // we can't use save() and restore() to restore the initial state. So make sure that at\r\n    // least the canvas context is reset to the default state by setting the canvas width.\r\n    // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\r\n    // eslint-disable-next-line no-self-assign\r\n    canvas.width = canvas.width;\r\n\r\n    delete canvas[EXPANDO_KEY];\r\n    return true;\r\n  }\r\n\r\n  /**\r\n\t *\r\n\t * @param {Chart} chart\r\n\t * @param {string} type\r\n\t * @param {function} listener\r\n\t */\r\n  addEventListener(chart, type, listener) {\r\n    // Can have only one listener per type, so make sure previous is removed\r\n    this.removeEventListener(chart, type);\r\n\r\n    const proxies = chart.$proxies || (chart.$proxies = {});\r\n    const handlers = {\r\n      attach: createAttachObserver,\r\n      detach: createDetachObserver,\r\n      resize: createResizeObserver\r\n    };\r\n    const handler = handlers[type] || createProxyAndListen;\r\n    proxies[type] = handler(chart, type, listener);\r\n  }\r\n\r\n\r\n  /**\r\n\t * @param {Chart} chart\r\n\t * @param {string} type\r\n\t */\r\n  removeEventListener(chart, type) {\r\n    const proxies = chart.$proxies || (chart.$proxies = {});\r\n    const proxy = proxies[type];\r\n\r\n    if (!proxy) {\r\n      return;\r\n    }\r\n\r\n    const handlers = {\r\n      attach: releaseObserver,\r\n      detach: releaseObserver,\r\n      resize: releaseObserver\r\n    };\r\n    const handler = handlers[type] || removeListener;\r\n    handler(chart, type, proxy);\r\n    proxies[type] = undefined;\r\n  }\r\n\r\n  getDevicePixelRatio() {\r\n    return window.devicePixelRatio;\r\n  }\r\n\r\n  /**\r\n\t * @param {HTMLCanvasElement} canvas\r\n\t * @param {number} [width] - content width of parent element\r\n\t * @param {number} [height] - content height of parent element\r\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\r\n\t */\r\n  getMaximumSize(canvas, width, height, aspectRatio) {\r\n    return getMaximumSize(canvas, width, height, aspectRatio);\r\n  }\r\n\r\n  /**\r\n\t * @param {HTMLCanvasElement} canvas\r\n\t */\r\n  isAttached(canvas) {\r\n    const container = _getParentNode(canvas);\r\n    return !!(container && container.isConnected);\r\n  }\r\n}\r\n","import {_isDomSupported} from '../helpers';\r\nimport BasePlatform from './platform.base';\r\nimport BasicPlatform from './platform.basic';\r\nimport DomPlatform from './platform.dom';\r\n\r\nexport function _detectPlatform(canvas) {\r\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\r\n    return BasicPlatform;\r\n  }\r\n  return DomPlatform;\r\n}\r\n\r\nexport {BasePlatform, BasicPlatform, DomPlatform};\r\n","import effects from '../helpers/helpers.easing';\r\nimport {resolve} from '../helpers/helpers.options';\r\nimport {color as helpersColor} from '../helpers/helpers.color';\r\n\r\nconst transparent = 'transparent';\r\nconst interpolators = {\r\n  boolean(from, to, factor) {\r\n    return factor > 0.5 ? to : from;\r\n  },\r\n  /**\r\n   * @param {string} from\r\n   * @param {string} to\r\n   * @param {number} factor\r\n   */\r\n  color(from, to, factor) {\r\n    const c0 = helpersColor(from || transparent);\r\n    const c1 = c0.valid && helpersColor(to || transparent);\r\n    return c1 && c1.valid\r\n      ? c1.mix(c0, factor).hexString()\r\n      : to;\r\n  },\r\n  number(from, to, factor) {\r\n    return from + (to - from) * factor;\r\n  }\r\n};\r\n\r\nexport default class Animation {\r\n  constructor(cfg, target, prop, to) {\r\n    const currentValue = target[prop];\r\n\r\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\r\n    const from = resolve([cfg.from, currentValue, to]);\r\n\r\n    this._active = true;\r\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\r\n    this._easing = effects[cfg.easing] || effects.linear;\r\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\r\n    this._duration = this._total = Math.floor(cfg.duration);\r\n    this._loop = !!cfg.loop;\r\n    this._target = target;\r\n    this._prop = prop;\r\n    this._from = from;\r\n    this._to = to;\r\n    this._promises = undefined;\r\n  }\r\n\r\n  active() {\r\n    return this._active;\r\n  }\r\n\r\n  update(cfg, to, date) {\r\n    if (this._active) {\r\n      this._notify(false);\r\n\r\n      const currentValue = this._target[this._prop];\r\n      const elapsed = date - this._start;\r\n      const remain = this._duration - elapsed;\r\n      this._start = date;\r\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\r\n      this._total += elapsed;\r\n      this._loop = !!cfg.loop;\r\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\r\n      this._from = resolve([cfg.from, currentValue, to]);\r\n    }\r\n  }\r\n\r\n  cancel() {\r\n    if (this._active) {\r\n      // update current evaluated value, for smoother animations\r\n      this.tick(Date.now());\r\n      this._active = false;\r\n      this._notify(false);\r\n    }\r\n  }\r\n\r\n  tick(date) {\r\n    const elapsed = date - this._start;\r\n    const duration = this._duration;\r\n    const prop = this._prop;\r\n    const from = this._from;\r\n    const loop = this._loop;\r\n    const to = this._to;\r\n    let factor;\r\n\r\n    this._active = from !== to && (loop || (elapsed < duration));\r\n\r\n    if (!this._active) {\r\n      this._target[prop] = to;\r\n      this._notify(true);\r\n      return;\r\n    }\r\n\r\n    if (elapsed < 0) {\r\n      this._target[prop] = from;\r\n      return;\r\n    }\r\n\r\n    factor = (elapsed / duration) % 2;\r\n    factor = loop && factor > 1 ? 2 - factor : factor;\r\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\r\n\r\n    this._target[prop] = this._fn(from, to, factor);\r\n  }\r\n\r\n  wait() {\r\n    const promises = this._promises || (this._promises = []);\r\n    return new Promise((res, rej) => {\r\n      promises.push({res, rej});\r\n    });\r\n  }\r\n\r\n  _notify(resolved) {\r\n    const method = resolved ? 'res' : 'rej';\r\n    const promises = this._promises || [];\r\n    for (let i = 0; i < promises.length; i++) {\r\n      promises[i][method]();\r\n    }\r\n  }\r\n}\r\n","import animator from './core.animator';\r\nimport Animation from './core.animation';\r\nimport defaults from './core.defaults';\r\nimport {isArray, isObject} from '../helpers/helpers.core';\r\n\r\nexport default class Animations {\r\n  constructor(chart, config) {\r\n    this._chart = chart;\r\n    this._properties = new Map();\r\n    this.configure(config);\r\n  }\r\n\r\n  configure(config) {\r\n    if (!isObject(config)) {\r\n      return;\r\n    }\r\n\r\n    const animationOptions = Object.keys(defaults.animation);\r\n    const animatedProps = this._properties;\r\n\r\n    Object.getOwnPropertyNames(config).forEach(key => {\r\n      const cfg = config[key];\r\n      if (!isObject(cfg)) {\r\n        return;\r\n      }\r\n      const resolved = {};\r\n      for (const option of animationOptions) {\r\n        resolved[option] = cfg[option];\r\n      }\r\n\r\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\r\n        if (prop === key || !animatedProps.has(prop)) {\r\n          animatedProps.set(prop, resolved);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n\t * Utility to handle animation of `options`.\r\n\t * @private\r\n\t */\r\n  _animateOptions(target, values) {\r\n    const newOptions = values.options;\r\n    const options = resolveTargetOptions(target, newOptions);\r\n    if (!options) {\r\n      return [];\r\n    }\r\n\r\n    const animations = this._createAnimations(options, newOptions);\r\n    if (newOptions.$shared) {\r\n      // Going to shared options:\r\n      // After all animations are done, assign the shared options object to the element\r\n      // So any new updates to the shared options are observed\r\n      awaitAll(target.options.$animations, newOptions).then(() => {\r\n        target.options = newOptions;\r\n      }, () => {\r\n        // rejected, noop\r\n      });\r\n    }\r\n\r\n    return animations;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _createAnimations(target, values) {\r\n    const animatedProps = this._properties;\r\n    const animations = [];\r\n    const running = target.$animations || (target.$animations = {});\r\n    const props = Object.keys(values);\r\n    const date = Date.now();\r\n    let i;\r\n\r\n    for (i = props.length - 1; i >= 0; --i) {\r\n      const prop = props[i];\r\n      if (prop.charAt(0) === '$') {\r\n        continue;\r\n      }\r\n\r\n      if (prop === 'options') {\r\n        animations.push(...this._animateOptions(target, values));\r\n        continue;\r\n      }\r\n      const value = values[prop];\r\n      let animation = running[prop];\r\n      const cfg = animatedProps.get(prop);\r\n\r\n      if (animation) {\r\n        if (cfg && animation.active()) {\r\n          // There is an existing active animation, let's update that\r\n          animation.update(cfg, value, date);\r\n          continue;\r\n        } else {\r\n          animation.cancel();\r\n        }\r\n      }\r\n      if (!cfg || !cfg.duration) {\r\n        // not animated, set directly to new value\r\n        target[prop] = value;\r\n        continue;\r\n      }\r\n\r\n      running[prop] = animation = new Animation(cfg, target, prop, value);\r\n      animations.push(animation);\r\n    }\r\n    return animations;\r\n  }\r\n\r\n\r\n  /**\r\n\t * Update `target` properties to new values, using configured animations\r\n\t * @param {object} target - object to update\r\n\t * @param {object} values - new target properties\r\n\t * @returns {boolean|undefined} - `true` if animations were started\r\n\t **/\r\n  update(target, values) {\r\n    if (this._properties.size === 0) {\r\n      // Nothing is animated, just apply the new values.\r\n      Object.assign(target, values);\r\n      return;\r\n    }\r\n\r\n    const animations = this._createAnimations(target, values);\r\n\r\n    if (animations.length) {\r\n      animator.add(this._chart, animations);\r\n      return true;\r\n    }\r\n  }\r\n}\r\n\r\nfunction awaitAll(animations, properties) {\r\n  const running = [];\r\n  const keys = Object.keys(properties);\r\n  for (let i = 0; i < keys.length; i++) {\r\n    const anim = animations[keys[i]];\r\n    if (anim && anim.active()) {\r\n      running.push(anim.wait());\r\n    }\r\n  }\r\n  // @ts-ignore\r\n  return Promise.all(running);\r\n}\r\n\r\nfunction resolveTargetOptions(target, newOptions) {\r\n  if (!newOptions) {\r\n    return;\r\n  }\r\n  let options = target.options;\r\n  if (!options) {\r\n    target.options = newOptions;\r\n    return;\r\n  }\r\n  if (options.$shared) {\r\n    // Going from shared options to distinct one:\r\n    // Create new options object containing the old shared values and start updating that.\r\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\r\n  }\r\n  return options;\r\n}\r\n","import Animations from './core.animations';\r\nimport defaults from './core.defaults';\r\nimport {isArray, isFinite, isObject, valueOrDefault, resolveObjectKey, defined} from '../helpers/helpers.core';\r\nimport {listenArrayEvents, unlistenArrayEvents} from '../helpers/helpers.collection';\r\nimport {createContext, sign} from '../helpers';\r\n\r\n/**\r\n * @typedef { import(\"./core.controller\").default } Chart\r\n * @typedef { import(\"./core.scale\").default } Scale\r\n */\r\n\r\nfunction scaleClip(scale, allowedOverflow) {\r\n  const opts = scale && scale.options || {};\r\n  const reverse = opts.reverse;\r\n  const min = opts.min === undefined ? allowedOverflow : 0;\r\n  const max = opts.max === undefined ? allowedOverflow : 0;\r\n  return {\r\n    start: reverse ? max : min,\r\n    end: reverse ? min : max\r\n  };\r\n}\r\n\r\nfunction defaultClip(xScale, yScale, allowedOverflow) {\r\n  if (allowedOverflow === false) {\r\n    return false;\r\n  }\r\n  const x = scaleClip(xScale, allowedOverflow);\r\n  const y = scaleClip(yScale, allowedOverflow);\r\n\r\n  return {\r\n    top: y.end,\r\n    right: x.end,\r\n    bottom: y.start,\r\n    left: x.start\r\n  };\r\n}\r\n\r\nfunction toClip(value) {\r\n  let t, r, b, l;\r\n\r\n  if (isObject(value)) {\r\n    t = value.top;\r\n    r = value.right;\r\n    b = value.bottom;\r\n    l = value.left;\r\n  } else {\r\n    t = r = b = l = value;\r\n  }\r\n\r\n  return {\r\n    top: t,\r\n    right: r,\r\n    bottom: b,\r\n    left: l,\r\n    disabled: value === false\r\n  };\r\n}\r\n\r\nfunction getSortedDatasetIndices(chart, filterVisible) {\r\n  const keys = [];\r\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\r\n  let i, ilen;\r\n\r\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\r\n    keys.push(metasets[i].index);\r\n  }\r\n  return keys;\r\n}\r\n\r\nfunction applyStack(stack, value, dsIndex, options = {}) {\r\n  const keys = stack.keys;\r\n  const singleMode = options.mode === 'single';\r\n  let i, ilen, datasetIndex, otherValue;\r\n\r\n  if (value === null) {\r\n    return;\r\n  }\r\n\r\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\r\n    datasetIndex = +keys[i];\r\n    if (datasetIndex === dsIndex) {\r\n      if (options.all) {\r\n        continue;\r\n      }\r\n      break;\r\n    }\r\n    otherValue = stack.values[datasetIndex];\r\n    if (isFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\r\n      value += otherValue;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction convertObjectDataToArray(data) {\r\n  const keys = Object.keys(data);\r\n  const adata = new Array(keys.length);\r\n  let i, ilen, key;\r\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\r\n    key = keys[i];\r\n    adata[i] = {\r\n      x: key,\r\n      y: data[key]\r\n    };\r\n  }\r\n  return adata;\r\n}\r\n\r\nfunction isStacked(scale, meta) {\r\n  const stacked = scale && scale.options.stacked;\r\n  return stacked || (stacked === undefined && meta.stack !== undefined);\r\n}\r\n\r\nfunction getStackKey(indexScale, valueScale, meta) {\r\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\r\n}\r\n\r\nfunction getUserBounds(scale) {\r\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\r\n  return {\r\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\r\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\r\n  };\r\n}\r\n\r\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\r\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\r\n  return subStack[indexValue] || (subStack[indexValue] = {});\r\n}\r\n\r\nfunction getLastIndexInStack(stack, vScale, positive, type) {\r\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\r\n    const value = stack[meta.index];\r\n    if ((positive && value > 0) || (!positive && value < 0)) {\r\n      return meta.index;\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction updateStacks(controller, parsed) {\r\n  const {chart, _cachedMeta: meta} = controller;\r\n  const stacks = chart._stacks || (chart._stacks = {}); // map structure is {stackKey: {datasetIndex: value}}\r\n  const {iScale, vScale, index: datasetIndex} = meta;\r\n  const iAxis = iScale.axis;\r\n  const vAxis = vScale.axis;\r\n  const key = getStackKey(iScale, vScale, meta);\r\n  const ilen = parsed.length;\r\n  let stack;\r\n\r\n  for (let i = 0; i < ilen; ++i) {\r\n    const item = parsed[i];\r\n    const {[iAxis]: index, [vAxis]: value} = item;\r\n    const itemStacks = item._stacks || (item._stacks = {});\r\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\r\n    stack[datasetIndex] = value;\r\n\r\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\r\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\r\n  }\r\n}\r\n\r\nfunction getFirstScaleId(chart, axis) {\r\n  const scales = chart.scales;\r\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\r\n}\r\n\r\nfunction createDatasetContext(parent, index) {\r\n  return createContext(parent,\r\n    {\r\n      active: false,\r\n      dataset: undefined,\r\n      datasetIndex: index,\r\n      index,\r\n      mode: 'default',\r\n      type: 'dataset'\r\n    }\r\n  );\r\n}\r\n\r\nfunction createDataContext(parent, index, element) {\r\n  return createContext(parent, {\r\n    active: false,\r\n    dataIndex: index,\r\n    parsed: undefined,\r\n    raw: undefined,\r\n    element,\r\n    index,\r\n    mode: 'default',\r\n    type: 'data'\r\n  });\r\n}\r\n\r\nfunction clearStacks(meta, items) {\r\n  // Not using meta.index here, because it might be already updated if the dataset changed location\r\n  const datasetIndex = meta.controller.index;\r\n  const axis = meta.vScale && meta.vScale.axis;\r\n  if (!axis) {\r\n    return;\r\n  }\r\n\r\n  items = items || meta._parsed;\r\n  for (const parsed of items) {\r\n    const stacks = parsed._stacks;\r\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\r\n      return;\r\n    }\r\n    delete stacks[axis][datasetIndex];\r\n  }\r\n}\r\n\r\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\r\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\r\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\r\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\r\n\r\nexport default class DatasetController {\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {};\r\n\r\n  /**\r\n   * Element type used to generate a meta dataset (e.g. Chart.element.LineElement).\r\n   */\r\n  static datasetElementType = null;\r\n\r\n  /**\r\n   * Element type used to generate a meta data (e.g. Chart.element.PointElement).\r\n   */\r\n  static dataElementType = null;\r\n\r\n  /**\r\n\t * @param {Chart} chart\r\n\t * @param {number} datasetIndex\r\n\t */\r\n  constructor(chart, datasetIndex) {\r\n    this.chart = chart;\r\n    this._ctx = chart.ctx;\r\n    this.index = datasetIndex;\r\n    this._cachedDataOpts = {};\r\n    this._cachedMeta = this.getMeta();\r\n    this._type = this._cachedMeta.type;\r\n    this.options = undefined;\r\n    /** @type {boolean | object} */\r\n    this._parsing = false;\r\n    this._data = undefined;\r\n    this._objectData = undefined;\r\n    this._sharedOptions = undefined;\r\n    this._drawStart = undefined;\r\n    this._drawCount = undefined;\r\n    this.enableOptionSharing = false;\r\n    this.supportsDecimation = false;\r\n    this.$context = undefined;\r\n    this._syncList = [];\r\n    this.datasetElementType = new.target.datasetElementType;\r\n    this.dataElementType = new.target.dataElementType;\r\n\r\n    this.initialize();\r\n  }\r\n\r\n  initialize() {\r\n    const meta = this._cachedMeta;\r\n    this.configure();\r\n    this.linkScales();\r\n    meta._stacked = isStacked(meta.vScale, meta);\r\n    this.addElements();\r\n\r\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\r\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\r\n    }\r\n  }\r\n\r\n  updateIndex(datasetIndex) {\r\n    if (this.index !== datasetIndex) {\r\n      clearStacks(this._cachedMeta);\r\n    }\r\n    this.index = datasetIndex;\r\n  }\r\n\r\n  linkScales() {\r\n    const chart = this.chart;\r\n    const meta = this._cachedMeta;\r\n    const dataset = this.getDataset();\r\n\r\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\r\n\r\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\r\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\r\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\r\n    const indexAxis = meta.indexAxis;\r\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\r\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\r\n    meta.xScale = this.getScaleForId(xid);\r\n    meta.yScale = this.getScaleForId(yid);\r\n    meta.rScale = this.getScaleForId(rid);\r\n    meta.iScale = this.getScaleForId(iid);\r\n    meta.vScale = this.getScaleForId(vid);\r\n  }\r\n\r\n  getDataset() {\r\n    return this.chart.data.datasets[this.index];\r\n  }\r\n\r\n  getMeta() {\r\n    return this.chart.getDatasetMeta(this.index);\r\n  }\r\n\r\n  /**\r\n\t * @param {string} scaleID\r\n\t * @return {Scale}\r\n\t */\r\n  getScaleForId(scaleID) {\r\n    return this.chart.scales[scaleID];\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getOtherScale(scale) {\r\n    const meta = this._cachedMeta;\r\n    return scale === meta.iScale\r\n      ? meta.vScale\r\n      : meta.iScale;\r\n  }\r\n\r\n  reset() {\r\n    this._update('reset');\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _destroy() {\r\n    const meta = this._cachedMeta;\r\n    if (this._data) {\r\n      unlistenArrayEvents(this._data, this);\r\n    }\r\n    if (meta._stacked) {\r\n      clearStacks(meta);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _dataCheck() {\r\n    const dataset = this.getDataset();\r\n    const data = dataset.data || (dataset.data = []);\r\n    const _data = this._data;\r\n\r\n    // In order to correctly handle data addition/deletion animation (an thus simulate\r\n    // real-time charts), we need to monitor these data modifications and synchronize\r\n    // the internal meta data accordingly.\r\n\r\n    if (isObject(data)) {\r\n      this._data = convertObjectDataToArray(data);\r\n    } else if (_data !== data) {\r\n      if (_data) {\r\n        // This case happens when the user replaced the data array instance.\r\n        unlistenArrayEvents(_data, this);\r\n        // Discard old parsed data and stacks\r\n        const meta = this._cachedMeta;\r\n        clearStacks(meta);\r\n        meta._parsed = [];\r\n      }\r\n      if (data && Object.isExtensible(data)) {\r\n        listenArrayEvents(data, this);\r\n      }\r\n      this._syncList = [];\r\n      this._data = data;\r\n    }\r\n  }\r\n\r\n  addElements() {\r\n    const meta = this._cachedMeta;\r\n\r\n    this._dataCheck();\r\n\r\n    if (this.datasetElementType) {\r\n      meta.dataset = new this.datasetElementType();\r\n    }\r\n  }\r\n\r\n  buildOrUpdateElements(resetNewElements) {\r\n    const meta = this._cachedMeta;\r\n    const dataset = this.getDataset();\r\n    let stackChanged = false;\r\n\r\n    this._dataCheck();\r\n\r\n    // make sure cached _stacked status is current\r\n    const oldStacked = meta._stacked;\r\n    meta._stacked = isStacked(meta.vScale, meta);\r\n\r\n    // detect change in stack option\r\n    if (meta.stack !== dataset.stack) {\r\n      stackChanged = true;\r\n      // remove values from old stack\r\n      clearStacks(meta);\r\n      meta.stack = dataset.stack;\r\n    }\r\n\r\n    // Re-sync meta data in case the user replaced the data array or if we missed\r\n    // any updates and so make sure that we handle number of datapoints changing.\r\n    this._resyncElements(resetNewElements);\r\n\r\n    // if stack changed, update stack values for the whole dataset\r\n    if (stackChanged || oldStacked !== meta._stacked) {\r\n      updateStacks(this, meta._parsed);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Merges user-supplied and default dataset-level options\r\n\t * @private\r\n\t */\r\n  configure() {\r\n    const config = this.chart.config;\r\n    const scopeKeys = config.datasetScopeKeys(this._type);\r\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\r\n    this.options = config.createResolver(scopes, this.getContext());\r\n    this._parsing = this.options.parsing;\r\n    this._cachedDataOpts = {};\r\n  }\r\n\r\n  /**\r\n\t * @param {number} start\r\n\t * @param {number} count\r\n\t */\r\n  parse(start, count) {\r\n    const {_cachedMeta: meta, _data: data} = this;\r\n    const {iScale, _stacked} = meta;\r\n    const iAxis = iScale.axis;\r\n\r\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\r\n    let prev = start > 0 && meta._parsed[start - 1];\r\n    let i, cur, parsed;\r\n\r\n    if (this._parsing === false) {\r\n      meta._parsed = data;\r\n      meta._sorted = true;\r\n      parsed = data;\r\n    } else {\r\n      if (isArray(data[start])) {\r\n        parsed = this.parseArrayData(meta, data, start, count);\r\n      } else if (isObject(data[start])) {\r\n        parsed = this.parseObjectData(meta, data, start, count);\r\n      } else {\r\n        parsed = this.parsePrimitiveData(meta, data, start, count);\r\n      }\r\n\r\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\r\n      for (i = 0; i < count; ++i) {\r\n        meta._parsed[i + start] = cur = parsed[i];\r\n        if (sorted) {\r\n          if (isNotInOrderComparedToPrev()) {\r\n            sorted = false;\r\n          }\r\n          prev = cur;\r\n        }\r\n      }\r\n      meta._sorted = sorted;\r\n    }\r\n\r\n    if (_stacked) {\r\n      updateStacks(this, parsed);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Parse array of primitive values\r\n\t * @param {object} meta - dataset meta\r\n\t * @param {array} data - data array. Example [1,3,4]\r\n\t * @param {number} start - start index\r\n\t * @param {number} count - number of items to parse\r\n\t * @returns {object} parsed item - item containing index and a parsed value\r\n\t * for each scale id.\r\n\t * Example: {xScale0: 0, yScale0: 1}\r\n\t * @protected\r\n\t */\r\n  parsePrimitiveData(meta, data, start, count) {\r\n    const {iScale, vScale} = meta;\r\n    const iAxis = iScale.axis;\r\n    const vAxis = vScale.axis;\r\n    const labels = iScale.getLabels();\r\n    const singleScale = iScale === vScale;\r\n    const parsed = new Array(count);\r\n    let i, ilen, index;\r\n\r\n    for (i = 0, ilen = count; i < ilen; ++i) {\r\n      index = i + start;\r\n      parsed[i] = {\r\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\r\n        [vAxis]: vScale.parse(data[index], index)\r\n      };\r\n    }\r\n    return parsed;\r\n  }\r\n\r\n  /**\r\n\t * Parse array of arrays\r\n\t * @param {object} meta - dataset meta\r\n\t * @param {array} data - data array. Example [[1,2],[3,4]]\r\n\t * @param {number} start - start index\r\n\t * @param {number} count - number of items to parse\r\n\t * @returns {object} parsed item - item containing index and a parsed value\r\n\t * for each scale id.\r\n\t * Example: {x: 0, y: 1}\r\n\t * @protected\r\n\t */\r\n  parseArrayData(meta, data, start, count) {\r\n    const {xScale, yScale} = meta;\r\n    const parsed = new Array(count);\r\n    let i, ilen, index, item;\r\n\r\n    for (i = 0, ilen = count; i < ilen; ++i) {\r\n      index = i + start;\r\n      item = data[index];\r\n      parsed[i] = {\r\n        x: xScale.parse(item[0], index),\r\n        y: yScale.parse(item[1], index)\r\n      };\r\n    }\r\n    return parsed;\r\n  }\r\n\r\n  /**\r\n\t * Parse array of objects\r\n\t * @param {object} meta - dataset meta\r\n\t * @param {array} data - data array. Example [{x:1, y:5}, {x:2, y:10}]\r\n\t * @param {number} start - start index\r\n\t * @param {number} count - number of items to parse\r\n\t * @returns {object} parsed item - item containing index and a parsed value\r\n\t * for each scale id. _custom is optional\r\n\t * Example: {xScale0: 0, yScale0: 1, _custom: {r: 10, foo: 'bar'}}\r\n\t * @protected\r\n\t */\r\n  parseObjectData(meta, data, start, count) {\r\n    const {xScale, yScale} = meta;\r\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\r\n    const parsed = new Array(count);\r\n    let i, ilen, index, item;\r\n\r\n    for (i = 0, ilen = count; i < ilen; ++i) {\r\n      index = i + start;\r\n      item = data[index];\r\n      parsed[i] = {\r\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\r\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\r\n      };\r\n    }\r\n    return parsed;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getParsed(index) {\r\n    return this._cachedMeta._parsed[index];\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getDataElement(index) {\r\n    return this._cachedMeta.data[index];\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  applyStack(scale, parsed, mode) {\r\n    const chart = this.chart;\r\n    const meta = this._cachedMeta;\r\n    const value = parsed[scale.axis];\r\n    const stack = {\r\n      keys: getSortedDatasetIndices(chart, true),\r\n      values: parsed._stacks[scale.axis]\r\n    };\r\n    return applyStack(stack, value, meta.index, {mode});\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  updateRangeFromParsed(range, scale, parsed, stack) {\r\n    const parsedValue = parsed[scale.axis];\r\n    let value = parsedValue === null ? NaN : parsedValue;\r\n    const values = stack && parsed._stacks[scale.axis];\r\n    if (stack && values) {\r\n      stack.values = values;\r\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\r\n    }\r\n    range.min = Math.min(range.min, value);\r\n    range.max = Math.max(range.max, value);\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getMinMax(scale, canStack) {\r\n    const meta = this._cachedMeta;\r\n    const _parsed = meta._parsed;\r\n    const sorted = meta._sorted && scale === meta.iScale;\r\n    const ilen = _parsed.length;\r\n    const otherScale = this._getOtherScale(scale);\r\n    const stack = createStack(canStack, meta, this.chart);\r\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\r\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\r\n    let i, parsed;\r\n\r\n    function _skip() {\r\n      parsed = _parsed[i];\r\n      const otherValue = parsed[otherScale.axis];\r\n      return !isFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\r\n    }\r\n\r\n    for (i = 0; i < ilen; ++i) {\r\n      if (_skip()) {\r\n        continue;\r\n      }\r\n      this.updateRangeFromParsed(range, scale, parsed, stack);\r\n      if (sorted) {\r\n        // if the data is sorted, we don't need to check further from this end of array\r\n        break;\r\n      }\r\n    }\r\n    if (sorted) {\r\n      // in the sorted case, find first non-skipped value from other end of array\r\n      for (i = ilen - 1; i >= 0; --i) {\r\n        if (_skip()) {\r\n          continue;\r\n        }\r\n        this.updateRangeFromParsed(range, scale, parsed, stack);\r\n        break;\r\n      }\r\n    }\r\n    return range;\r\n  }\r\n\r\n  getAllParsedValues(scale) {\r\n    const parsed = this._cachedMeta._parsed;\r\n    const values = [];\r\n    let i, ilen, value;\r\n\r\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\r\n      value = parsed[i][scale.axis];\r\n      if (isFinite(value)) {\r\n        values.push(value);\r\n      }\r\n    }\r\n    return values;\r\n  }\r\n\r\n  /**\r\n\t * @return {number|boolean}\r\n\t * @protected\r\n\t */\r\n  getMaxOverflow() {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getLabelAndValue(index) {\r\n    const meta = this._cachedMeta;\r\n    const iScale = meta.iScale;\r\n    const vScale = meta.vScale;\r\n    const parsed = this.getParsed(index);\r\n    return {\r\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\r\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _update(mode) {\r\n    const meta = this._cachedMeta;\r\n    this.update(mode || 'default');\r\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\r\n  }\r\n\r\n  /**\r\n\t * @param {string} mode\r\n\t */\r\n  update(mode) {} // eslint-disable-line no-unused-vars\r\n\r\n  draw() {\r\n    const ctx = this._ctx;\r\n    const chart = this.chart;\r\n    const meta = this._cachedMeta;\r\n    const elements = meta.data || [];\r\n    const area = chart.chartArea;\r\n    const active = [];\r\n    const start = this._drawStart || 0;\r\n    const count = this._drawCount || (elements.length - start);\r\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\r\n    let i;\r\n\r\n    if (meta.dataset) {\r\n      meta.dataset.draw(ctx, area, start, count);\r\n    }\r\n\r\n    for (i = start; i < start + count; ++i) {\r\n      const element = elements[i];\r\n      if (element.hidden) {\r\n        continue;\r\n      }\r\n      if (element.active && drawActiveElementsOnTop) {\r\n        active.push(element);\r\n      } else {\r\n        element.draw(ctx, area);\r\n      }\r\n    }\r\n\r\n    for (i = 0; i < active.length; ++i) {\r\n      active[i].draw(ctx, area);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Returns a set of predefined style properties that should be used to represent the dataset\r\n\t * or the data if the index is specified\r\n\t * @param {number} index - data index\r\n\t * @param {boolean} [active] - true if hover\r\n\t * @return {object} style object\r\n\t */\r\n  getStyle(index, active) {\r\n    const mode = active ? 'active' : 'default';\r\n    return index === undefined && this._cachedMeta.dataset\r\n      ? this.resolveDatasetElementOptions(mode)\r\n      : this.resolveDataElementOptions(index || 0, mode);\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getContext(index, active, mode) {\r\n    const dataset = this.getDataset();\r\n    let context;\r\n    if (index >= 0 && index < this._cachedMeta.data.length) {\r\n      const element = this._cachedMeta.data[index];\r\n      context = element.$context ||\r\n        (element.$context = createDataContext(this.getContext(), index, element));\r\n      context.parsed = this.getParsed(index);\r\n      context.raw = dataset.data[index];\r\n      context.index = context.dataIndex = index;\r\n    } else {\r\n      context = this.$context ||\r\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\r\n      context.dataset = dataset;\r\n      context.index = context.datasetIndex = this.index;\r\n    }\r\n\r\n    context.active = !!active;\r\n    context.mode = mode;\r\n    return context;\r\n  }\r\n\r\n  /**\r\n\t * @param {string} [mode]\r\n\t * @protected\r\n\t */\r\n  resolveDatasetElementOptions(mode) {\r\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\r\n  }\r\n\r\n  /**\r\n\t * @param {number} index\r\n\t * @param {string} [mode]\r\n\t * @protected\r\n\t */\r\n  resolveDataElementOptions(index, mode) {\r\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _resolveElementOptions(elementType, mode = 'default', index) {\r\n    const active = mode === 'active';\r\n    const cache = this._cachedDataOpts;\r\n    const cacheKey = elementType + '-' + mode;\r\n    const cached = cache[cacheKey];\r\n    const sharing = this.enableOptionSharing && defined(index);\r\n    if (cached) {\r\n      return cloneIfNotShared(cached, sharing);\r\n    }\r\n    const config = this.chart.config;\r\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\r\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\r\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\r\n    const names = Object.keys(defaults.elements[elementType]);\r\n    // context is provided as a function, and is called only if needed,\r\n    // so we don't create a context for each element if not needed.\r\n    const context = () => this.getContext(index, active);\r\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\r\n\r\n    if (values.$shared) {\r\n      // `$shared` indicates this set of options can be shared between multiple elements.\r\n      // Sharing is used to reduce number of properties to change during animation.\r\n      values.$shared = sharing;\r\n\r\n      // We cache options by `mode`, which can be 'active' for example. This enables us\r\n      // to have the 'active' element options and 'default' options to switch between\r\n      // when interacting.\r\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\r\n    }\r\n\r\n    return values;\r\n  }\r\n\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _resolveAnimations(index, transition, active) {\r\n    const chart = this.chart;\r\n    const cache = this._cachedDataOpts;\r\n    const cacheKey = `animation-${transition}`;\r\n    const cached = cache[cacheKey];\r\n    if (cached) {\r\n      return cached;\r\n    }\r\n    let options;\r\n    if (chart.options.animation !== false) {\r\n      const config = this.chart.config;\r\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\r\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\r\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\r\n    }\r\n    const animations = new Animations(chart, options && options.animations);\r\n    if (options && options._cacheable) {\r\n      cache[cacheKey] = Object.freeze(animations);\r\n    }\r\n    return animations;\r\n  }\r\n\r\n  /**\r\n\t * Utility for getting the options object shared between elements\r\n\t * @protected\r\n\t */\r\n  getSharedOptions(options) {\r\n    if (!options.$shared) {\r\n      return;\r\n    }\r\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\r\n  }\r\n\r\n  /**\r\n\t * Utility for determining if `options` should be included in the updated properties\r\n\t * @protected\r\n\t */\r\n  includeOptions(mode, sharedOptions) {\r\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\r\n  }\r\n\r\n  /**\r\n   * @todo v4, rename to getSharedOptions and remove excess functions\r\n   */\r\n  _getSharedOptions(start, mode) {\r\n    const firstOpts = this.resolveDataElementOptions(start, mode);\r\n    const previouslySharedOptions = this._sharedOptions;\r\n    const sharedOptions = this.getSharedOptions(firstOpts);\r\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\r\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\r\n    return {sharedOptions, includeOptions};\r\n  }\r\n\r\n  /**\r\n\t * Utility for updating an element with new properties, using animations when appropriate.\r\n\t * @protected\r\n\t */\r\n  updateElement(element, index, properties, mode) {\r\n    if (isDirectUpdateMode(mode)) {\r\n      Object.assign(element, properties);\r\n    } else {\r\n      this._resolveAnimations(index, mode).update(element, properties);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Utility to animate the shared options, that are potentially affecting multiple elements.\r\n\t * @protected\r\n\t */\r\n  updateSharedOptions(sharedOptions, mode, newOptions) {\r\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\r\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _setStyle(element, index, mode, active) {\r\n    element.active = active;\r\n    const options = this.getStyle(index, active);\r\n    this._resolveAnimations(index, mode, active).update(element, {\r\n      // When going from active to inactive, we need to update to the shared options.\r\n      // This way the once hovered element will end up with the same original shared options instance, after animation.\r\n      options: (!active && this.getSharedOptions(options)) || options\r\n    });\r\n  }\r\n\r\n  removeHoverStyle(element, datasetIndex, index) {\r\n    this._setStyle(element, index, 'active', false);\r\n  }\r\n\r\n  setHoverStyle(element, datasetIndex, index) {\r\n    this._setStyle(element, index, 'active', true);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _removeDatasetHoverStyle() {\r\n    const element = this._cachedMeta.dataset;\r\n\r\n    if (element) {\r\n      this._setStyle(element, undefined, 'active', false);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _setDatasetHoverStyle() {\r\n    const element = this._cachedMeta.dataset;\r\n\r\n    if (element) {\r\n      this._setStyle(element, undefined, 'active', true);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _resyncElements(resetNewElements) {\r\n    const data = this._data;\r\n    const elements = this._cachedMeta.data;\r\n\r\n    // Apply changes detected through array listeners\r\n    for (const [method, arg1, arg2] of this._syncList) {\r\n      this[method](arg1, arg2);\r\n    }\r\n    this._syncList = [];\r\n\r\n    const numMeta = elements.length;\r\n    const numData = data.length;\r\n    const count = Math.min(numData, numMeta);\r\n\r\n    if (count) {\r\n      // TODO: It is not optimal to always parse the old data\r\n      // This is done because we are not detecting direct assignments:\r\n      // chart.data.datasets[0].data[5] = 10;\r\n      // chart.data.datasets[0].data[5].y = 10;\r\n      this.parse(0, count);\r\n    }\r\n\r\n    if (numData > numMeta) {\r\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\r\n    } else if (numData < numMeta) {\r\n      this._removeElements(numData, numMeta - numData);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _insertElements(start, count, resetNewElements = true) {\r\n    const meta = this._cachedMeta;\r\n    const data = meta.data;\r\n    const end = start + count;\r\n    let i;\r\n\r\n    const move = (arr) => {\r\n      arr.length += count;\r\n      for (i = arr.length - 1; i >= end; i--) {\r\n        arr[i] = arr[i - count];\r\n      }\r\n    };\r\n    move(data);\r\n\r\n    for (i = start; i < end; ++i) {\r\n      data[i] = new this.dataElementType();\r\n    }\r\n\r\n    if (this._parsing) {\r\n      move(meta._parsed);\r\n    }\r\n    this.parse(start, count);\r\n\r\n    if (resetNewElements) {\r\n      this.updateElements(data, start, count, 'reset');\r\n    }\r\n  }\r\n\r\n  updateElements(element, start, count, mode) {} // eslint-disable-line no-unused-vars\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _removeElements(start, count) {\r\n    const meta = this._cachedMeta;\r\n    if (this._parsing) {\r\n      const removed = meta._parsed.splice(start, count);\r\n      if (meta._stacked) {\r\n        clearStacks(meta, removed);\r\n      }\r\n    }\r\n    meta.data.splice(start, count);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n   */\r\n  _sync(args) {\r\n    if (this._parsing) {\r\n      this._syncList.push(args);\r\n    } else {\r\n      const [method, arg1, arg2] = args;\r\n      this[method](arg1, arg2);\r\n    }\r\n    this.chart._dataChanges.push([this.index, ...args]);\r\n  }\r\n\r\n  _onDataPush() {\r\n    const count = arguments.length;\r\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\r\n  }\r\n\r\n  _onDataPop() {\r\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\r\n  }\r\n\r\n  _onDataShift() {\r\n    this._sync(['_removeElements', 0, 1]);\r\n  }\r\n\r\n  _onDataSplice(start, count) {\r\n    if (count) {\r\n      this._sync(['_removeElements', start, count]);\r\n    }\r\n    const newCount = arguments.length - 2;\r\n    if (newCount) {\r\n      this._sync(['_insertElements', start, newCount]);\r\n    }\r\n  }\r\n\r\n  _onDataUnshift() {\r\n    this._sync(['_insertElements', 0, arguments.length]);\r\n  }\r\n}\r\n","import type {AnyObject} from '../../types/basic';\r\nimport type {Point} from '../../types/geometric';\r\nimport type {Animation} from '../../types/animation';\r\nimport {isNumber} from '../helpers/helpers.math';\r\n\r\nexport default class Element<T = AnyObject, O = AnyObject> {\r\n\r\n  static defaults = {};\r\n  static defaultRoutes = undefined;\r\n\r\n  x: number;\r\n  y: number;\r\n  active = false;\r\n  options: O;\r\n  $animations: Record<keyof T, Animation>;\r\n\r\n  tooltipPosition(useFinalPosition: boolean): Point {\r\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\r\n    return {x, y} as Point;\r\n  }\r\n\r\n  hasValue() {\r\n    return isNumber(this.x) && isNumber(this.y);\r\n  }\r\n\r\n  /**\r\n   * Gets the current or final value of each prop. Can return extra properties (whole object).\r\n   * @param props - properties to get\r\n   * @param [final] - get the final value (animation target)\r\n   */\r\n  getProps<P extends string>(props: P[], final?: boolean): Partial<Record<P, unknown>>;\r\n  getProps<P extends (keyof T)[]>(props: P, final?: boolean): Pick<T, P[number]>;\r\n  getProps(props: string[], final?: boolean): Partial<Record<string, unknown>> {\r\n    const anims = this.$animations;\r\n    if (!final || !anims) {\r\n      // let's not create an object, if not needed\r\n      return this as Record<string, unknown>;\r\n    }\r\n    const ret: Record<string, unknown> = {};\r\n    props.forEach((prop) => {\r\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop as string];\r\n    });\r\n    return ret;\r\n  }\r\n}\r\n","import {isNullOrUndef, valueOrDefault} from '../helpers/helpers.core';\r\nimport {_factorize} from '../helpers/helpers.math';\r\n\r\n\r\n/**\r\n * @typedef { import(\"./core.controller\").default } Chart\r\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\r\n */\r\n\r\n/**\r\n * Returns a subset of ticks to be plotted to avoid overlapping labels.\r\n * @param {import('./core.scale').default} scale\r\n * @param {Tick[]} ticks\r\n * @return {Tick[]}\r\n * @private\r\n */\r\nexport function autoSkip(scale, ticks) {\r\n  const tickOpts = scale.options.ticks;\r\n  const determinedMaxTicks = determineMaxTicks(scale);\r\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\r\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\r\n  const numMajorIndices = majorIndices.length;\r\n  const first = majorIndices[0];\r\n  const last = majorIndices[numMajorIndices - 1];\r\n  const newTicks = [];\r\n\r\n  // If there are too many major ticks to display them all\r\n  if (numMajorIndices > ticksLimit) {\r\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\r\n    return newTicks;\r\n  }\r\n\r\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\r\n\r\n  if (numMajorIndices > 0) {\r\n    let i, ilen;\r\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\r\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\r\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\r\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\r\n    }\r\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\r\n    return newTicks;\r\n  }\r\n  skip(ticks, newTicks, spacing);\r\n  return newTicks;\r\n}\r\n\r\nfunction determineMaxTicks(scale) {\r\n  const offset = scale.options.offset;\r\n  const tickLength = scale._tickSize();\r\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\r\n  const maxChart = scale._maxLength / tickLength;\r\n  return Math.floor(Math.min(maxScale, maxChart));\r\n}\r\n\r\n/**\r\n * @param {number[]} majorIndices\r\n * @param {Tick[]} ticks\r\n * @param {number} ticksLimit\r\n */\r\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\r\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\r\n  const spacing = ticks.length / ticksLimit;\r\n\r\n  // If the major ticks are evenly spaced apart, place the minor ticks\r\n  // so that they divide the major ticks into even chunks\r\n  if (!evenMajorSpacing) {\r\n    return Math.max(spacing, 1);\r\n  }\r\n\r\n  const factors = _factorize(evenMajorSpacing);\r\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\r\n    const factor = factors[i];\r\n    if (factor > spacing) {\r\n      return factor;\r\n    }\r\n  }\r\n  return Math.max(spacing, 1);\r\n}\r\n\r\n/**\r\n * @param {Tick[]} ticks\r\n */\r\nfunction getMajorIndices(ticks) {\r\n  const result = [];\r\n  let i, ilen;\r\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\r\n    if (ticks[i].major) {\r\n      result.push(i);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @param {Tick[]} ticks\r\n * @param {Tick[]} newTicks\r\n * @param {number[]} majorIndices\r\n * @param {number} spacing\r\n */\r\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\r\n  let count = 0;\r\n  let next = majorIndices[0];\r\n  let i;\r\n\r\n  spacing = Math.ceil(spacing);\r\n  for (i = 0; i < ticks.length; i++) {\r\n    if (i === next) {\r\n      newTicks.push(ticks[i]);\r\n      count++;\r\n      next = majorIndices[count * spacing];\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Tick[]} ticks\r\n * @param {Tick[]} newTicks\r\n * @param {number} spacing\r\n * @param {number} [majorStart]\r\n * @param {number} [majorEnd]\r\n */\r\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\r\n  const start = valueOrDefault(majorStart, 0);\r\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\r\n  let count = 0;\r\n  let length, i, next;\r\n\r\n  spacing = Math.ceil(spacing);\r\n  if (majorEnd) {\r\n    length = majorEnd - majorStart;\r\n    spacing = length / Math.floor(length / spacing);\r\n  }\r\n\r\n  next = start;\r\n\r\n  while (next < 0) {\r\n    count++;\r\n    next = Math.round(start + count * spacing);\r\n  }\r\n\r\n  for (i = Math.max(start, 0); i < end; i++) {\r\n    if (i === next) {\r\n      newTicks.push(ticks[i]);\r\n      count++;\r\n      next = Math.round(start + count * spacing);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @param {number[]} arr\r\n */\r\nfunction getEvenSpacing(arr) {\r\n  const len = arr.length;\r\n  let i, diff;\r\n\r\n  if (len < 2) {\r\n    return false;\r\n  }\r\n\r\n  for (diff = arr[0], i = 1; i < len; ++i) {\r\n    if (arr[i] - arr[i - 1] !== diff) {\r\n      return false;\r\n    }\r\n  }\r\n  return diff;\r\n}\r\n","import Element from './core.element';\r\nimport {_alignPixel, _measureText, renderText, clipArea, unclipArea} from '../helpers/helpers.canvas';\r\nimport {callback as call, each, finiteOrDefault, isArray, isFinite, isNullOrUndef, isObject, valueOrDefault} from '../helpers/helpers.core';\r\nimport {toDegrees, toRadians, _int16Range, _limitValue, HALF_PI} from '../helpers/helpers.math';\r\nimport {_alignStartEnd, _toLeftRightCenter} from '../helpers/helpers.extras';\r\nimport {createContext, toFont, toPadding, _addGrace} from '../helpers/helpers.options';\r\nimport {autoSkip} from './core.scale.autoskip';\r\n\r\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\r\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\r\n\r\n/**\r\n * @typedef { import(\"./core.controller\").default } Chart\r\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\r\n */\r\n\r\n/**\r\n * Returns a new array containing numItems from arr\r\n * @param {any[]} arr\r\n * @param {number} numItems\r\n */\r\nfunction sample(arr, numItems) {\r\n  const result = [];\r\n  const increment = arr.length / numItems;\r\n  const len = arr.length;\r\n  let i = 0;\r\n\r\n  for (; i < len; i += increment) {\r\n    result.push(arr[Math.floor(i)]);\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @param {Scale} scale\r\n * @param {number} index\r\n * @param {boolean} offsetGridLines\r\n */\r\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\r\n  const length = scale.ticks.length;\r\n  const validIndex = Math.min(index, length - 1);\r\n  const start = scale._startPixel;\r\n  const end = scale._endPixel;\r\n  const epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\r\n  let lineValue = scale.getPixelForTick(validIndex);\r\n  let offset;\r\n\r\n  if (offsetGridLines) {\r\n    if (length === 1) {\r\n      offset = Math.max(lineValue - start, end - lineValue);\r\n    } else if (index === 0) {\r\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\r\n    } else {\r\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\r\n    }\r\n    lineValue += validIndex < index ? offset : -offset;\r\n\r\n    // Return undefined if the pixel is out of the range\r\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\r\n      return;\r\n    }\r\n  }\r\n  return lineValue;\r\n}\r\n\r\n/**\r\n * @param {object} caches\r\n * @param {number} length\r\n */\r\nfunction garbageCollect(caches, length) {\r\n  each(caches, (cache) => {\r\n    const gc = cache.gc;\r\n    const gcLen = gc.length / 2;\r\n    let i;\r\n    if (gcLen > length) {\r\n      for (i = 0; i < gcLen; ++i) {\r\n        delete cache.data[gc[i]];\r\n      }\r\n      gc.splice(0, gcLen);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @param {object} options\r\n */\r\nfunction getTickMarkLength(options) {\r\n  return options.drawTicks ? options.tickLength : 0;\r\n}\r\n\r\n/**\r\n * @param {object} options\r\n */\r\nfunction getTitleHeight(options, fallback) {\r\n  if (!options.display) {\r\n    return 0;\r\n  }\r\n\r\n  const font = toFont(options.font, fallback);\r\n  const padding = toPadding(options.padding);\r\n  const lines = isArray(options.text) ? options.text.length : 1;\r\n\r\n  return (lines * font.lineHeight) + padding.height;\r\n}\r\n\r\nfunction createScaleContext(parent, scale) {\r\n  return createContext(parent, {\r\n    scale,\r\n    type: 'scale'\r\n  });\r\n}\r\n\r\nfunction createTickContext(parent, index, tick) {\r\n  return createContext(parent, {\r\n    tick,\r\n    index,\r\n    type: 'tick'\r\n  });\r\n}\r\n\r\nfunction titleAlign(align, position, reverse) {\r\n  let ret = _toLeftRightCenter(align);\r\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\r\n    ret = reverseAlign(ret);\r\n  }\r\n  return ret;\r\n}\r\n\r\nfunction titleArgs(scale, offset, position, align) {\r\n  const {top, left, bottom, right, chart} = scale;\r\n  const {chartArea, scales} = chart;\r\n  let rotation = 0;\r\n  let maxWidth, titleX, titleY;\r\n  const height = bottom - top;\r\n  const width = right - left;\r\n\r\n  if (scale.isHorizontal()) {\r\n    titleX = _alignStartEnd(align, left, right);\r\n\r\n    if (isObject(position)) {\r\n      const positionAxisID = Object.keys(position)[0];\r\n      const value = position[positionAxisID];\r\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\r\n    } else if (position === 'center') {\r\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\r\n    } else {\r\n      titleY = offsetFromEdge(scale, position, offset);\r\n    }\r\n    maxWidth = right - left;\r\n  } else {\r\n    if (isObject(position)) {\r\n      const positionAxisID = Object.keys(position)[0];\r\n      const value = position[positionAxisID];\r\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\r\n    } else if (position === 'center') {\r\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\r\n    } else {\r\n      titleX = offsetFromEdge(scale, position, offset);\r\n    }\r\n    titleY = _alignStartEnd(align, bottom, top);\r\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\r\n  }\r\n  return {titleX, titleY, maxWidth, rotation};\r\n}\r\n\r\nexport default class Scale extends Element {\r\n\r\n  // eslint-disable-next-line max-statements\r\n  constructor(cfg) {\r\n    super();\r\n\r\n    /** @type {string} */\r\n    this.id = cfg.id;\r\n    /** @type {string} */\r\n    this.type = cfg.type;\r\n    /** @type {any} */\r\n    this.options = undefined;\r\n    /** @type {CanvasRenderingContext2D} */\r\n    this.ctx = cfg.ctx;\r\n    /** @type {Chart} */\r\n    this.chart = cfg.chart;\r\n\r\n    // implements box\r\n    /** @type {number} */\r\n    this.top = undefined;\r\n    /** @type {number} */\r\n    this.bottom = undefined;\r\n    /** @type {number} */\r\n    this.left = undefined;\r\n    /** @type {number} */\r\n    this.right = undefined;\r\n    /** @type {number} */\r\n    this.width = undefined;\r\n    /** @type {number} */\r\n    this.height = undefined;\r\n    this._margins = {\r\n      left: 0,\r\n      right: 0,\r\n      top: 0,\r\n      bottom: 0\r\n    };\r\n    /** @type {number} */\r\n    this.maxWidth = undefined;\r\n    /** @type {number} */\r\n    this.maxHeight = undefined;\r\n    /** @type {number} */\r\n    this.paddingTop = undefined;\r\n    /** @type {number} */\r\n    this.paddingBottom = undefined;\r\n    /** @type {number} */\r\n    this.paddingLeft = undefined;\r\n    /** @type {number} */\r\n    this.paddingRight = undefined;\r\n\r\n    // scale-specific properties\r\n    /** @type {string=} */\r\n    this.axis = undefined;\r\n    /** @type {number=} */\r\n    this.labelRotation = undefined;\r\n    this.min = undefined;\r\n    this.max = undefined;\r\n    this._range = undefined;\r\n    /** @type {Tick[]} */\r\n    this.ticks = [];\r\n    /** @type {object[]|null} */\r\n    this._gridLineItems = null;\r\n    /** @type {object[]|null} */\r\n    this._labelItems = null;\r\n    /** @type {object|null} */\r\n    this._labelSizes = null;\r\n    this._length = 0;\r\n    this._maxLength = 0;\r\n    this._longestTextCache = {};\r\n    /** @type {number} */\r\n    this._startPixel = undefined;\r\n    /** @type {number} */\r\n    this._endPixel = undefined;\r\n    this._reversePixels = false;\r\n    this._userMax = undefined;\r\n    this._userMin = undefined;\r\n    this._suggestedMax = undefined;\r\n    this._suggestedMin = undefined;\r\n    this._ticksLength = 0;\r\n    this._borderValue = 0;\r\n    this._cache = {};\r\n    this._dataLimitsCached = false;\r\n    this.$context = undefined;\r\n  }\r\n\r\n  /**\r\n\t * @param {any} options\r\n\t * @since 3.0\r\n\t */\r\n  init(options) {\r\n    this.options = options.setContext(this.getContext());\r\n\r\n    this.axis = options.axis;\r\n\r\n    // parse min/max value, so we can properly determine min/max for other scales\r\n    this._userMin = this.parse(options.min);\r\n    this._userMax = this.parse(options.max);\r\n    this._suggestedMin = this.parse(options.suggestedMin);\r\n    this._suggestedMax = this.parse(options.suggestedMax);\r\n  }\r\n\r\n  /**\r\n\t * Parse a supported input value to internal representation.\r\n\t * @param {*} raw\r\n\t * @param {number} [index]\r\n\t * @since 3.0\r\n\t */\r\n  parse(raw, index) { // eslint-disable-line no-unused-vars\r\n    return raw;\r\n  }\r\n\r\n  /**\r\n\t * @return {{min: number, max: number, minDefined: boolean, maxDefined: boolean}}\r\n\t * @protected\r\n\t * @since 3.0\r\n\t */\r\n  getUserBounds() {\r\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\r\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\r\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\r\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\r\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\r\n    return {\r\n      min: finiteOrDefault(_userMin, _suggestedMin),\r\n      max: finiteOrDefault(_userMax, _suggestedMax),\r\n      minDefined: isFinite(_userMin),\r\n      maxDefined: isFinite(_userMax)\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * @param {boolean} canStack\r\n\t * @return {{min: number, max: number}}\r\n\t * @protected\r\n\t * @since 3.0\r\n\t */\r\n  getMinMax(canStack) {\r\n    // eslint-disable-next-line prefer-const\r\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\r\n    let range;\r\n\r\n    if (minDefined && maxDefined) {\r\n      return {min, max};\r\n    }\r\n\r\n    const metas = this.getMatchingVisibleMetas();\r\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\r\n      range = metas[i].controller.getMinMax(this, canStack);\r\n      if (!minDefined) {\r\n        min = Math.min(min, range.min);\r\n      }\r\n      if (!maxDefined) {\r\n        max = Math.max(max, range.max);\r\n      }\r\n    }\r\n\r\n    // Make sure min <= max when only min or max is defined by user and the data is outside that range\r\n    min = maxDefined && min > max ? max : min;\r\n    max = minDefined && min > max ? min : max;\r\n\r\n    return {\r\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\r\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * Get the padding needed for the scale\r\n\t * @return {{top: number, left: number, bottom: number, right: number}} the necessary padding\r\n\t * @private\r\n\t */\r\n  getPadding() {\r\n    return {\r\n      left: this.paddingLeft || 0,\r\n      top: this.paddingTop || 0,\r\n      right: this.paddingRight || 0,\r\n      bottom: this.paddingBottom || 0\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * Returns the scale tick objects\r\n\t * @return {Tick[]}\r\n\t * @since 2.7\r\n\t */\r\n  getTicks() {\r\n    return this.ticks;\r\n  }\r\n\r\n  /**\r\n\t * @return {string[]}\r\n\t */\r\n  getLabels() {\r\n    const data = this.chart.data;\r\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\r\n  }\r\n\r\n  // When a new layout is created, reset the data limits cache\r\n  beforeLayout() {\r\n    this._cache = {};\r\n    this._dataLimitsCached = false;\r\n  }\r\n\r\n  // These methods are ordered by lifecycle. Utilities then follow.\r\n  // Any function defined here is inherited by all scale types.\r\n  // Any function can be extended by the scale type\r\n\r\n  beforeUpdate() {\r\n    call(this.options.beforeUpdate, [this]);\r\n  }\r\n\r\n  /**\r\n\t * @param {number} maxWidth - the max width in pixels\r\n\t * @param {number} maxHeight - the max height in pixels\r\n\t * @param {{top: number, left: number, bottom: number, right: number}} margins - the space between the edge of the other scales and edge of the chart\r\n\t *   This space comes from two sources:\r\n\t *     - padding - space that's required to show the labels at the edges of the scale\r\n\t *     - thickness of scales or legends in another orientation\r\n\t */\r\n  update(maxWidth, maxHeight, margins) {\r\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\r\n    const sampleSize = tickOpts.sampleSize;\r\n\r\n    // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\r\n    this.beforeUpdate();\r\n\r\n    // Absorb the master measurements\r\n    this.maxWidth = maxWidth;\r\n    this.maxHeight = maxHeight;\r\n    this._margins = margins = Object.assign({\r\n      left: 0,\r\n      right: 0,\r\n      top: 0,\r\n      bottom: 0\r\n    }, margins);\r\n\r\n    this.ticks = null;\r\n    this._labelSizes = null;\r\n    this._gridLineItems = null;\r\n    this._labelItems = null;\r\n\r\n    // Dimensions\r\n    this.beforeSetDimensions();\r\n    this.setDimensions();\r\n    this.afterSetDimensions();\r\n\r\n    this._maxLength = this.isHorizontal()\r\n      ? this.width + margins.left + margins.right\r\n      : this.height + margins.top + margins.bottom;\r\n\r\n    // Data min/max\r\n    if (!this._dataLimitsCached) {\r\n      this.beforeDataLimits();\r\n      this.determineDataLimits();\r\n      this.afterDataLimits();\r\n      this._range = _addGrace(this, grace, beginAtZero);\r\n      this._dataLimitsCached = true;\r\n    }\r\n\r\n    this.beforeBuildTicks();\r\n\r\n    this.ticks = this.buildTicks() || [];\r\n\r\n    // Allow modification of ticks in callback.\r\n    this.afterBuildTicks();\r\n\r\n    // Compute tick rotation and fit using a sampled subset of labels\r\n    // We generally don't need to compute the size of every single label for determining scale size\r\n    const samplingEnabled = sampleSize < this.ticks.length;\r\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\r\n\r\n    // configure is called twice, once here, once from core.controller.updateLayout.\r\n    // Here we haven't been positioned yet, but dimensions are correct.\r\n    // Variables set in configure are needed for calculateLabelRotation, and\r\n    // it's ok that coordinates are not correct there, only dimensions matter.\r\n    this.configure();\r\n\r\n    // Tick Rotation\r\n    this.beforeCalculateLabelRotation();\r\n    this.calculateLabelRotation(); // Preconditions: number of ticks and sizes of largest labels must be calculated beforehand\r\n    this.afterCalculateLabelRotation();\r\n\r\n    // Auto-skip\r\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\r\n      this.ticks = autoSkip(this, this.ticks);\r\n      this._labelSizes = null;\r\n      this.afterAutoSkip();\r\n    }\r\n\r\n    if (samplingEnabled) {\r\n      // Generate labels using all non-skipped ticks\r\n      this._convertTicksToLabels(this.ticks);\r\n    }\r\n\r\n    this.beforeFit();\r\n    this.fit(); // Preconditions: label rotation and label sizes must be calculated beforehand\r\n    this.afterFit();\r\n\r\n    // IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\r\n\r\n    this.afterUpdate();\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  configure() {\r\n    let reversePixels = this.options.reverse;\r\n    let startPixel, endPixel;\r\n\r\n    if (this.isHorizontal()) {\r\n      startPixel = this.left;\r\n      endPixel = this.right;\r\n    } else {\r\n      startPixel = this.top;\r\n      endPixel = this.bottom;\r\n      // by default vertical scales are from bottom to top, so pixels are reversed\r\n      reversePixels = !reversePixels;\r\n    }\r\n    this._startPixel = startPixel;\r\n    this._endPixel = endPixel;\r\n    this._reversePixels = reversePixels;\r\n    this._length = endPixel - startPixel;\r\n    this._alignToPixels = this.options.alignToPixels;\r\n  }\r\n\r\n  afterUpdate() {\r\n    call(this.options.afterUpdate, [this]);\r\n  }\r\n\r\n  //\r\n\r\n  beforeSetDimensions() {\r\n    call(this.options.beforeSetDimensions, [this]);\r\n  }\r\n  setDimensions() {\r\n    // Set the unconstrained dimension before label rotation\r\n    if (this.isHorizontal()) {\r\n      // Reset position before calculating rotation\r\n      this.width = this.maxWidth;\r\n      this.left = 0;\r\n      this.right = this.width;\r\n    } else {\r\n      this.height = this.maxHeight;\r\n\r\n      // Reset position before calculating rotation\r\n      this.top = 0;\r\n      this.bottom = this.height;\r\n    }\r\n\r\n    // Reset padding\r\n    this.paddingLeft = 0;\r\n    this.paddingTop = 0;\r\n    this.paddingRight = 0;\r\n    this.paddingBottom = 0;\r\n  }\r\n  afterSetDimensions() {\r\n    call(this.options.afterSetDimensions, [this]);\r\n  }\r\n\r\n  _callHooks(name) {\r\n    this.chart.notifyPlugins(name, this.getContext());\r\n    call(this.options[name], [this]);\r\n  }\r\n\r\n  // Data limits\r\n  beforeDataLimits() {\r\n    this._callHooks('beforeDataLimits');\r\n  }\r\n  determineDataLimits() {}\r\n  afterDataLimits() {\r\n    this._callHooks('afterDataLimits');\r\n  }\r\n\r\n  //\r\n  beforeBuildTicks() {\r\n    this._callHooks('beforeBuildTicks');\r\n  }\r\n  /**\r\n\t * @return {object[]} the ticks\r\n\t */\r\n  buildTicks() {\r\n    return [];\r\n  }\r\n  afterBuildTicks() {\r\n    this._callHooks('afterBuildTicks');\r\n  }\r\n\r\n  beforeTickToLabelConversion() {\r\n    call(this.options.beforeTickToLabelConversion, [this]);\r\n  }\r\n  /**\r\n\t * Convert ticks to label strings\r\n\t * @param {Tick[]} ticks\r\n\t */\r\n  generateTickLabels(ticks) {\r\n    const tickOpts = this.options.ticks;\r\n    let i, ilen, tick;\r\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\r\n      tick = ticks[i];\r\n      tick.label = call(tickOpts.callback, [tick.value, i, ticks], this);\r\n    }\r\n  }\r\n  afterTickToLabelConversion() {\r\n    call(this.options.afterTickToLabelConversion, [this]);\r\n  }\r\n\r\n  //\r\n\r\n  beforeCalculateLabelRotation() {\r\n    call(this.options.beforeCalculateLabelRotation, [this]);\r\n  }\r\n  calculateLabelRotation() {\r\n    const options = this.options;\r\n    const tickOpts = options.ticks;\r\n    const numTicks = this.ticks.length;\r\n    const minRotation = tickOpts.minRotation || 0;\r\n    const maxRotation = tickOpts.maxRotation;\r\n    let labelRotation = minRotation;\r\n    let tickWidth, maxHeight, maxLabelDiagonal;\r\n\r\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\r\n      this.labelRotation = minRotation;\r\n      return;\r\n    }\r\n\r\n    const labelSizes = this._getLabelSizes();\r\n    const maxLabelWidth = labelSizes.widest.width;\r\n    const maxLabelHeight = labelSizes.highest.height;\r\n\r\n    // Estimate the width of each grid based on the canvas width, the maximum\r\n    // label width and the number of tick intervals\r\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\r\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\r\n\r\n    // Allow 3 pixels x2 padding either side for label readability\r\n    if (maxLabelWidth + 6 > tickWidth) {\r\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\r\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\r\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\r\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\r\n      labelRotation = toDegrees(Math.min(\r\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\r\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\r\n      ));\r\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\r\n    }\r\n\r\n    this.labelRotation = labelRotation;\r\n  }\r\n  afterCalculateLabelRotation() {\r\n    call(this.options.afterCalculateLabelRotation, [this]);\r\n  }\r\n  afterAutoSkip() {}\r\n\r\n  //\r\n\r\n  beforeFit() {\r\n    call(this.options.beforeFit, [this]);\r\n  }\r\n  fit() {\r\n    // Reset\r\n    const minSize = {\r\n      width: 0,\r\n      height: 0\r\n    };\r\n\r\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\r\n    const display = this._isVisible();\r\n    const isHorizontal = this.isHorizontal();\r\n\r\n    if (display) {\r\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\r\n      if (isHorizontal) {\r\n        minSize.width = this.maxWidth;\r\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\r\n      } else {\r\n        minSize.height = this.maxHeight; // fill all the height\r\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\r\n      }\r\n\r\n      // Don't bother fitting the ticks if we are not showing the labels\r\n      if (tickOpts.display && this.ticks.length) {\r\n        const {first, last, widest, highest} = this._getLabelSizes();\r\n        const tickPadding = tickOpts.padding * 2;\r\n        const angleRadians = toRadians(this.labelRotation);\r\n        const cos = Math.cos(angleRadians);\r\n        const sin = Math.sin(angleRadians);\r\n\r\n        if (isHorizontal) {\r\n        // A horizontal axis is more constrained by the height.\r\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\r\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\r\n        } else {\r\n        // A vertical axis is more constrained by the width. Labels are the\r\n        // dominant factor here, so get that length first and account for padding\r\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\r\n\r\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\r\n        }\r\n        this._calculatePadding(first, last, sin, cos);\r\n      }\r\n    }\r\n\r\n    this._handleMargins();\r\n\r\n    if (isHorizontal) {\r\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\r\n      this.height = minSize.height;\r\n    } else {\r\n      this.width = minSize.width;\r\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\r\n    }\r\n  }\r\n\r\n  _calculatePadding(first, last, sin, cos) {\r\n    const {ticks: {align, padding}, position} = this.options;\r\n    const isRotated = this.labelRotation !== 0;\r\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\r\n\r\n    if (this.isHorizontal()) {\r\n      const offsetLeft = this.getPixelForTick(0) - this.left;\r\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\r\n      let paddingLeft = 0;\r\n      let paddingRight = 0;\r\n\r\n      // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\r\n      // which means that the right padding is dominated by the font height\r\n      if (isRotated) {\r\n        if (labelsBelowTicks) {\r\n          paddingLeft = cos * first.width;\r\n          paddingRight = sin * last.height;\r\n        } else {\r\n          paddingLeft = sin * first.height;\r\n          paddingRight = cos * last.width;\r\n        }\r\n      } else if (align === 'start') {\r\n        paddingRight = last.width;\r\n      } else if (align === 'end') {\r\n        paddingLeft = first.width;\r\n      } else if (align !== 'inner') {\r\n        paddingLeft = first.width / 2;\r\n        paddingRight = last.width / 2;\r\n      }\r\n\r\n      // Adjust padding taking into account changes in offsets\r\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\r\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\r\n    } else {\r\n      let paddingTop = last.height / 2;\r\n      let paddingBottom = first.height / 2;\r\n\r\n      if (align === 'start') {\r\n        paddingTop = 0;\r\n        paddingBottom = first.height;\r\n      } else if (align === 'end') {\r\n        paddingTop = last.height;\r\n        paddingBottom = 0;\r\n      }\r\n\r\n      this.paddingTop = paddingTop + padding;\r\n      this.paddingBottom = paddingBottom + padding;\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Handle margins and padding interactions\r\n\t * @private\r\n\t */\r\n  _handleMargins() {\r\n    if (this._margins) {\r\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\r\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\r\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\r\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\r\n    }\r\n  }\r\n\r\n  afterFit() {\r\n    call(this.options.afterFit, [this]);\r\n  }\r\n\r\n  // Shared Methods\r\n  /**\r\n\t * @return {boolean}\r\n\t */\r\n  isHorizontal() {\r\n    const {axis, position} = this.options;\r\n    return position === 'top' || position === 'bottom' || axis === 'x';\r\n  }\r\n  /**\r\n\t * @return {boolean}\r\n\t */\r\n  isFullSize() {\r\n    return this.options.fullSize;\r\n  }\r\n\r\n  /**\r\n\t * @param {Tick[]} ticks\r\n\t * @private\r\n\t */\r\n  _convertTicksToLabels(ticks) {\r\n    this.beforeTickToLabelConversion();\r\n\r\n    this.generateTickLabels(ticks);\r\n\r\n    // Ticks should be skipped when callback returns null or undef, so lets remove those.\r\n    let i, ilen;\r\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\r\n      if (isNullOrUndef(ticks[i].label)) {\r\n        ticks.splice(i, 1);\r\n        ilen--;\r\n        i--;\r\n      }\r\n    }\r\n\r\n    this.afterTickToLabelConversion();\r\n  }\r\n\r\n  /**\r\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\r\n\t * @private\r\n\t */\r\n  _getLabelSizes() {\r\n    let labelSizes = this._labelSizes;\r\n\r\n    if (!labelSizes) {\r\n      const sampleSize = this.options.ticks.sampleSize;\r\n      let ticks = this.ticks;\r\n      if (sampleSize < ticks.length) {\r\n        ticks = sample(ticks, sampleSize);\r\n      }\r\n\r\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length);\r\n    }\r\n\r\n    return labelSizes;\r\n  }\r\n\r\n  /**\r\n\t * Returns {width, height, offset} objects for the first, last, widest, highest tick\r\n\t * labels where offset indicates the anchor point offset from the top in pixels.\r\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\r\n\t * @private\r\n\t */\r\n  _computeLabelSizes(ticks, length) {\r\n    const {ctx, _longestTextCache: caches} = this;\r\n    const widths = [];\r\n    const heights = [];\r\n    let widestLabelSize = 0;\r\n    let highestLabelSize = 0;\r\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\r\n\r\n    for (i = 0; i < length; ++i) {\r\n      label = ticks[i].label;\r\n      tickFont = this._resolveTickFontOptions(i);\r\n      ctx.font = fontString = tickFont.string;\r\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\r\n      lineHeight = tickFont.lineHeight;\r\n      width = height = 0;\r\n      // Undefined labels and arrays should not be measured\r\n      if (!isNullOrUndef(label) && !isArray(label)) {\r\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\r\n        height = lineHeight;\r\n      } else if (isArray(label)) {\r\n        // if it is an array let's measure each element\r\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\r\n          nestedLabel = label[j];\r\n          // Undefined labels and arrays should not be measured\r\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\r\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\r\n            height += lineHeight;\r\n          }\r\n        }\r\n      }\r\n      widths.push(width);\r\n      heights.push(height);\r\n      widestLabelSize = Math.max(width, widestLabelSize);\r\n      highestLabelSize = Math.max(height, highestLabelSize);\r\n    }\r\n    garbageCollect(caches, length);\r\n\r\n    const widest = widths.indexOf(widestLabelSize);\r\n    const highest = heights.indexOf(highestLabelSize);\r\n\r\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\r\n\r\n    return {\r\n      first: valueAt(0),\r\n      last: valueAt(length - 1),\r\n      widest: valueAt(widest),\r\n      highest: valueAt(highest),\r\n      widths,\r\n      heights,\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * Used to get the label to display in the tooltip for the given value\r\n\t * @param {*} value\r\n\t * @return {string}\r\n\t */\r\n  getLabelForValue(value) {\r\n    return value;\r\n  }\r\n\r\n  /**\r\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\r\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\r\n\t * @param {*} value\r\n\t * @param {number} [index]\r\n\t * @return {number}\r\n\t */\r\n  getPixelForValue(value, index) { // eslint-disable-line no-unused-vars\r\n    return NaN;\r\n  }\r\n\r\n  /**\r\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\r\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\r\n\t * @param {number} pixel\r\n\t * @return {*}\r\n\t */\r\n  getValueForPixel(pixel) {} // eslint-disable-line no-unused-vars\r\n\r\n  /**\r\n\t * Returns the location of the tick at the given index\r\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\r\n\t * @param {number} index\r\n\t * @return {number}\r\n\t */\r\n  getPixelForTick(index) {\r\n    const ticks = this.ticks;\r\n    if (index < 0 || index > ticks.length - 1) {\r\n      return null;\r\n    }\r\n    return this.getPixelForValue(ticks[index].value);\r\n  }\r\n\r\n  /**\r\n\t * Utility for getting the pixel location of a percentage of scale\r\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\r\n\t * @param {number} decimal\r\n\t * @return {number}\r\n\t */\r\n  getPixelForDecimal(decimal) {\r\n    if (this._reversePixels) {\r\n      decimal = 1 - decimal;\r\n    }\r\n\r\n    const pixel = this._startPixel + decimal * this._length;\r\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\r\n  }\r\n\r\n  /**\r\n\t * @param {number} pixel\r\n\t * @return {number}\r\n\t */\r\n  getDecimalForPixel(pixel) {\r\n    const decimal = (pixel - this._startPixel) / this._length;\r\n    return this._reversePixels ? 1 - decimal : decimal;\r\n  }\r\n\r\n  /**\r\n\t * Returns the pixel for the minimum chart value\r\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\r\n\t * @return {number}\r\n\t */\r\n  getBasePixel() {\r\n    return this.getPixelForValue(this.getBaseValue());\r\n  }\r\n\r\n  /**\r\n\t * @return {number}\r\n\t */\r\n  getBaseValue() {\r\n    const {min, max} = this;\r\n\r\n    return min < 0 && max < 0 ? max :\r\n      min > 0 && max > 0 ? min :\r\n      0;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getContext(index) {\r\n    const ticks = this.ticks || [];\r\n\r\n    if (index >= 0 && index < ticks.length) {\r\n      const tick = ticks[index];\r\n      return tick.$context ||\r\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\r\n    }\r\n    return this.$context ||\r\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\r\n  }\r\n\r\n  /**\r\n\t * @return {number}\r\n\t * @private\r\n\t */\r\n  _tickSize() {\r\n    const optionTicks = this.options.ticks;\r\n\r\n    // Calculate space needed by label in axis direction.\r\n    const rot = toRadians(this.labelRotation);\r\n    const cos = Math.abs(Math.cos(rot));\r\n    const sin = Math.abs(Math.sin(rot));\r\n\r\n    const labelSizes = this._getLabelSizes();\r\n    const padding = optionTicks.autoSkipPadding || 0;\r\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\r\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\r\n\r\n    // Calculate space needed for 1 tick in axis direction.\r\n    return this.isHorizontal()\r\n      ? h * cos > w * sin ? w / cos : h / sin\r\n      : h * sin < w * cos ? h / cos : w / sin;\r\n  }\r\n\r\n  /**\r\n\t * @return {boolean}\r\n\t * @private\r\n\t */\r\n  _isVisible() {\r\n    const display = this.options.display;\r\n\r\n    if (display !== 'auto') {\r\n      return !!display;\r\n    }\r\n\r\n    return this.getMatchingVisibleMetas().length > 0;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _computeGridLineItems(chartArea) {\r\n    const axis = this.axis;\r\n    const chart = this.chart;\r\n    const options = this.options;\r\n    const {grid, position, border} = options;\r\n    const offset = grid.offset;\r\n    const isHorizontal = this.isHorizontal();\r\n    const ticks = this.ticks;\r\n    const ticksLength = ticks.length + (offset ? 1 : 0);\r\n    const tl = getTickMarkLength(grid);\r\n    const items = [];\r\n\r\n    const borderOpts = border.setContext(this.getContext());\r\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\r\n    const axisHalfWidth = axisWidth / 2;\r\n    const alignBorderValue = function(pixel) {\r\n      return _alignPixel(chart, pixel, axisWidth);\r\n    };\r\n    let borderValue, i, lineValue, alignedLineValue;\r\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\r\n\r\n    if (position === 'top') {\r\n      borderValue = alignBorderValue(this.bottom);\r\n      ty1 = this.bottom - tl;\r\n      ty2 = borderValue - axisHalfWidth;\r\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\r\n      y2 = chartArea.bottom;\r\n    } else if (position === 'bottom') {\r\n      borderValue = alignBorderValue(this.top);\r\n      y1 = chartArea.top;\r\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\r\n      ty1 = borderValue + axisHalfWidth;\r\n      ty2 = this.top + tl;\r\n    } else if (position === 'left') {\r\n      borderValue = alignBorderValue(this.right);\r\n      tx1 = this.right - tl;\r\n      tx2 = borderValue - axisHalfWidth;\r\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\r\n      x2 = chartArea.right;\r\n    } else if (position === 'right') {\r\n      borderValue = alignBorderValue(this.left);\r\n      x1 = chartArea.left;\r\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\r\n      tx1 = borderValue + axisHalfWidth;\r\n      tx2 = this.left + tl;\r\n    } else if (axis === 'x') {\r\n      if (position === 'center') {\r\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\r\n      } else if (isObject(position)) {\r\n        const positionAxisID = Object.keys(position)[0];\r\n        const value = position[positionAxisID];\r\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\r\n      }\r\n\r\n      y1 = chartArea.top;\r\n      y2 = chartArea.bottom;\r\n      ty1 = borderValue + axisHalfWidth;\r\n      ty2 = ty1 + tl;\r\n    } else if (axis === 'y') {\r\n      if (position === 'center') {\r\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\r\n      } else if (isObject(position)) {\r\n        const positionAxisID = Object.keys(position)[0];\r\n        const value = position[positionAxisID];\r\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\r\n      }\r\n\r\n      tx1 = borderValue - axisHalfWidth;\r\n      tx2 = tx1 - tl;\r\n      x1 = chartArea.left;\r\n      x2 = chartArea.right;\r\n    }\r\n\r\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\r\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\r\n    for (i = 0; i < ticksLength; i += step) {\r\n      const context = this.getContext(i);\r\n      const optsAtIndex = grid.setContext(context);\r\n      const optsAtIndexBorder = border.setContext(context);\r\n\r\n      const lineWidth = optsAtIndex.lineWidth;\r\n      const lineColor = optsAtIndex.color;\r\n      const borderDash = optsAtIndexBorder.dash || [];\r\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\r\n\r\n      const tickWidth = optsAtIndex.tickWidth;\r\n      const tickColor = optsAtIndex.tickColor;\r\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\r\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\r\n\r\n      lineValue = getPixelForGridLine(this, i, offset);\r\n\r\n      // Skip if the pixel is out of the range\r\n      if (lineValue === undefined) {\r\n        continue;\r\n      }\r\n\r\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\r\n\r\n      if (isHorizontal) {\r\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\r\n      } else {\r\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\r\n      }\r\n\r\n      items.push({\r\n        tx1,\r\n        ty1,\r\n        tx2,\r\n        ty2,\r\n        x1,\r\n        y1,\r\n        x2,\r\n        y2,\r\n        width: lineWidth,\r\n        color: lineColor,\r\n        borderDash,\r\n        borderDashOffset,\r\n        tickWidth,\r\n        tickColor,\r\n        tickBorderDash,\r\n        tickBorderDashOffset,\r\n      });\r\n    }\r\n\r\n    this._ticksLength = ticksLength;\r\n    this._borderValue = borderValue;\r\n\r\n    return items;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _computeLabelItems(chartArea) {\r\n    const axis = this.axis;\r\n    const options = this.options;\r\n    const {position, ticks: optionTicks} = options;\r\n    const isHorizontal = this.isHorizontal();\r\n    const ticks = this.ticks;\r\n    const {align, crossAlign, padding, mirror} = optionTicks;\r\n    const tl = getTickMarkLength(options.grid);\r\n    const tickAndPadding = tl + padding;\r\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\r\n    const rotation = -toRadians(this.labelRotation);\r\n    const items = [];\r\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\r\n    let textBaseline = 'middle';\r\n\r\n    if (position === 'top') {\r\n      y = this.bottom - hTickAndPadding;\r\n      textAlign = this._getXAxisLabelAlignment();\r\n    } else if (position === 'bottom') {\r\n      y = this.top + hTickAndPadding;\r\n      textAlign = this._getXAxisLabelAlignment();\r\n    } else if (position === 'left') {\r\n      const ret = this._getYAxisLabelAlignment(tl);\r\n      textAlign = ret.textAlign;\r\n      x = ret.x;\r\n    } else if (position === 'right') {\r\n      const ret = this._getYAxisLabelAlignment(tl);\r\n      textAlign = ret.textAlign;\r\n      x = ret.x;\r\n    } else if (axis === 'x') {\r\n      if (position === 'center') {\r\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\r\n      } else if (isObject(position)) {\r\n        const positionAxisID = Object.keys(position)[0];\r\n        const value = position[positionAxisID];\r\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\r\n      }\r\n      textAlign = this._getXAxisLabelAlignment();\r\n    } else if (axis === 'y') {\r\n      if (position === 'center') {\r\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\r\n      } else if (isObject(position)) {\r\n        const positionAxisID = Object.keys(position)[0];\r\n        const value = position[positionAxisID];\r\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\r\n      }\r\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\r\n    }\r\n\r\n    if (axis === 'y') {\r\n      if (align === 'start') {\r\n        textBaseline = 'top';\r\n      } else if (align === 'end') {\r\n        textBaseline = 'bottom';\r\n      }\r\n    }\r\n\r\n    const labelSizes = this._getLabelSizes();\r\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\r\n      tick = ticks[i];\r\n      label = tick.label;\r\n\r\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\r\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\r\n      font = this._resolveTickFontOptions(i);\r\n      lineHeight = font.lineHeight;\r\n      lineCount = isArray(label) ? label.length : 1;\r\n      const halfCount = lineCount / 2;\r\n      const color = optsAtIndex.color;\r\n      const strokeColor = optsAtIndex.textStrokeColor;\r\n      const strokeWidth = optsAtIndex.textStrokeWidth;\r\n      let tickTextAlign = textAlign;\r\n\r\n      if (isHorizontal) {\r\n        x = pixel;\r\n\r\n        if (textAlign === 'inner') {\r\n          if (i === ilen - 1) {\r\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\r\n          } else if (i === 0) {\r\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\r\n          } else {\r\n            tickTextAlign = 'center';\r\n          }\r\n        }\r\n\r\n        if (position === 'top') {\r\n          if (crossAlign === 'near' || rotation !== 0) {\r\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\r\n          } else if (crossAlign === 'center') {\r\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\r\n          } else {\r\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\r\n          }\r\n        } else {\r\n          // eslint-disable-next-line no-lonely-if\r\n          if (crossAlign === 'near' || rotation !== 0) {\r\n            textOffset = lineHeight / 2;\r\n          } else if (crossAlign === 'center') {\r\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\r\n          } else {\r\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\r\n          }\r\n        }\r\n        if (mirror) {\r\n          textOffset *= -1;\r\n        }\r\n      } else {\r\n        y = pixel;\r\n        textOffset = (1 - lineCount) * lineHeight / 2;\r\n      }\r\n\r\n      let backdrop;\r\n\r\n      if (optsAtIndex.showLabelBackdrop) {\r\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\r\n        const height = labelSizes.heights[i];\r\n        const width = labelSizes.widths[i];\r\n\r\n        let top = y + textOffset - labelPadding.top;\r\n        let left = x - labelPadding.left;\r\n\r\n        switch (textBaseline) {\r\n        case 'middle':\r\n          top -= height / 2;\r\n          break;\r\n        case 'bottom':\r\n          top -= height;\r\n          break;\r\n        default:\r\n          break;\r\n        }\r\n\r\n        switch (textAlign) {\r\n        case 'center':\r\n          left -= width / 2;\r\n          break;\r\n        case 'right':\r\n          left -= width;\r\n          break;\r\n        default:\r\n          break;\r\n        }\r\n\r\n        backdrop = {\r\n          left,\r\n          top,\r\n          width: width + labelPadding.width,\r\n          height: height + labelPadding.height,\r\n\r\n          color: optsAtIndex.backdropColor,\r\n        };\r\n      }\r\n\r\n      items.push({\r\n        rotation,\r\n        label,\r\n        font,\r\n        color,\r\n        strokeColor,\r\n        strokeWidth,\r\n        textOffset,\r\n        textAlign: tickTextAlign,\r\n        textBaseline,\r\n        translation: [x, y],\r\n        backdrop,\r\n      });\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  _getXAxisLabelAlignment() {\r\n    const {position, ticks} = this.options;\r\n    const rotation = -toRadians(this.labelRotation);\r\n\r\n    if (rotation) {\r\n      return position === 'top' ? 'left' : 'right';\r\n    }\r\n\r\n    let align = 'center';\r\n\r\n    if (ticks.align === 'start') {\r\n      align = 'left';\r\n    } else if (ticks.align === 'end') {\r\n      align = 'right';\r\n    } else if (ticks.align === 'inner') {\r\n      align = 'inner';\r\n    }\r\n\r\n    return align;\r\n  }\r\n\r\n  _getYAxisLabelAlignment(tl) {\r\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\r\n    const labelSizes = this._getLabelSizes();\r\n    const tickAndPadding = tl + padding;\r\n    const widest = labelSizes.widest.width;\r\n\r\n    let textAlign;\r\n    let x;\r\n\r\n    if (position === 'left') {\r\n      if (mirror) {\r\n        x = this.right + padding;\r\n\r\n        if (crossAlign === 'near') {\r\n          textAlign = 'left';\r\n        } else if (crossAlign === 'center') {\r\n          textAlign = 'center';\r\n          x += (widest / 2);\r\n        } else {\r\n          textAlign = 'right';\r\n          x += widest;\r\n        }\r\n      } else {\r\n        x = this.right - tickAndPadding;\r\n\r\n        if (crossAlign === 'near') {\r\n          textAlign = 'right';\r\n        } else if (crossAlign === 'center') {\r\n          textAlign = 'center';\r\n          x -= (widest / 2);\r\n        } else {\r\n          textAlign = 'left';\r\n          x = this.left;\r\n        }\r\n      }\r\n    } else if (position === 'right') {\r\n      if (mirror) {\r\n        x = this.left + padding;\r\n\r\n        if (crossAlign === 'near') {\r\n          textAlign = 'right';\r\n        } else if (crossAlign === 'center') {\r\n          textAlign = 'center';\r\n          x -= (widest / 2);\r\n        } else {\r\n          textAlign = 'left';\r\n          x -= widest;\r\n        }\r\n      } else {\r\n        x = this.left + tickAndPadding;\r\n\r\n        if (crossAlign === 'near') {\r\n          textAlign = 'left';\r\n        } else if (crossAlign === 'center') {\r\n          textAlign = 'center';\r\n          x += widest / 2;\r\n        } else {\r\n          textAlign = 'right';\r\n          x = this.right;\r\n        }\r\n      }\r\n    } else {\r\n      textAlign = 'right';\r\n    }\r\n\r\n    return {textAlign, x};\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _computeLabelArea() {\r\n    if (this.options.ticks.mirror) {\r\n      return;\r\n    }\r\n\r\n    const chart = this.chart;\r\n    const position = this.options.position;\r\n\r\n    if (position === 'left' || position === 'right') {\r\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\r\n    } if (position === 'top' || position === 'bottom') {\r\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  drawBackground() {\r\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\r\n    if (backgroundColor) {\r\n      ctx.save();\r\n      ctx.fillStyle = backgroundColor;\r\n      ctx.fillRect(left, top, width, height);\r\n      ctx.restore();\r\n    }\r\n  }\r\n\r\n  getLineWidthForValue(value) {\r\n    const grid = this.options.grid;\r\n    if (!this._isVisible() || !grid.display) {\r\n      return 0;\r\n    }\r\n    const ticks = this.ticks;\r\n    const index = ticks.findIndex(t => t.value === value);\r\n    if (index >= 0) {\r\n      const opts = grid.setContext(this.getContext(index));\r\n      return opts.lineWidth;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawGrid(chartArea) {\r\n    const grid = this.options.grid;\r\n    const ctx = this.ctx;\r\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\r\n    let i, ilen;\r\n\r\n    const drawLine = (p1, p2, style) => {\r\n      if (!style.width || !style.color) {\r\n        return;\r\n      }\r\n      ctx.save();\r\n      ctx.lineWidth = style.width;\r\n      ctx.strokeStyle = style.color;\r\n      ctx.setLineDash(style.borderDash || []);\r\n      ctx.lineDashOffset = style.borderDashOffset;\r\n\r\n      ctx.beginPath();\r\n      ctx.moveTo(p1.x, p1.y);\r\n      ctx.lineTo(p2.x, p2.y);\r\n      ctx.stroke();\r\n      ctx.restore();\r\n    };\r\n\r\n    if (grid.display) {\r\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\r\n        const item = items[i];\r\n\r\n        if (grid.drawOnChartArea) {\r\n          drawLine(\r\n            {x: item.x1, y: item.y1},\r\n            {x: item.x2, y: item.y2},\r\n            item\r\n          );\r\n        }\r\n\r\n        if (grid.drawTicks) {\r\n          drawLine(\r\n            {x: item.tx1, y: item.ty1},\r\n            {x: item.tx2, y: item.ty2},\r\n            {\r\n              color: item.tickColor,\r\n              width: item.tickWidth,\r\n              borderDash: item.tickBorderDash,\r\n              borderDashOffset: item.tickBorderDashOffset\r\n            }\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawBorder() {\r\n    const {chart, ctx, options: {border, grid}} = this;\r\n    const borderOpts = border.setContext(this.getContext());\r\n    const axisWidth = border.display ? borderOpts.width : 0;\r\n    if (!axisWidth) {\r\n      return;\r\n    }\r\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\r\n    const borderValue = this._borderValue;\r\n    let x1, x2, y1, y2;\r\n\r\n    if (this.isHorizontal()) {\r\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\r\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\r\n      y1 = y2 = borderValue;\r\n    } else {\r\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\r\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\r\n      x1 = x2 = borderValue;\r\n    }\r\n    ctx.save();\r\n    ctx.lineWidth = borderOpts.width;\r\n    ctx.strokeStyle = borderOpts.color;\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(x1, y1);\r\n    ctx.lineTo(x2, y2);\r\n    ctx.stroke();\r\n\r\n    ctx.restore();\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawLabels(chartArea) {\r\n    const optionTicks = this.options.ticks;\r\n\r\n    if (!optionTicks.display) {\r\n      return;\r\n    }\r\n\r\n    const ctx = this.ctx;\r\n\r\n    const area = this._computeLabelArea();\r\n    if (area) {\r\n      clipArea(ctx, area);\r\n    }\r\n\r\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\r\n    let i, ilen;\r\n\r\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\r\n      const item = items[i];\r\n      const tickFont = item.font;\r\n      const label = item.label;\r\n\r\n      if (item.backdrop) {\r\n        ctx.fillStyle = item.backdrop.color;\r\n        ctx.fillRect(item.backdrop.left, item.backdrop.top, item.backdrop.width, item.backdrop.height);\r\n      }\r\n\r\n      let y = item.textOffset;\r\n      renderText(ctx, label, 0, y, tickFont, item);\r\n    }\r\n\r\n    if (area) {\r\n      unclipArea(ctx);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawTitle() {\r\n    const {ctx, options: {position, title, reverse}} = this;\r\n\r\n    if (!title.display) {\r\n      return;\r\n    }\r\n\r\n    const font = toFont(title.font);\r\n    const padding = toPadding(title.padding);\r\n    const align = title.align;\r\n    let offset = font.lineHeight / 2;\r\n\r\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\r\n      offset += padding.bottom;\r\n      if (isArray(title.text)) {\r\n        offset += font.lineHeight * (title.text.length - 1);\r\n      }\r\n    } else {\r\n      offset += padding.top;\r\n    }\r\n\r\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\r\n\r\n    renderText(ctx, title.text, 0, 0, font, {\r\n      color: title.color,\r\n      maxWidth,\r\n      rotation,\r\n      textAlign: titleAlign(align, position, reverse),\r\n      textBaseline: 'middle',\r\n      translation: [titleX, titleY],\r\n    });\r\n  }\r\n\r\n  draw(chartArea) {\r\n    if (!this._isVisible()) {\r\n      return;\r\n    }\r\n\r\n    this.drawBackground();\r\n    this.drawGrid(chartArea);\r\n    this.drawBorder();\r\n    this.drawTitle();\r\n    this.drawLabels(chartArea);\r\n  }\r\n\r\n  /**\r\n\t * @return {object[]}\r\n\t * @private\r\n\t */\r\n  _layers() {\r\n    const opts = this.options;\r\n    const tz = opts.ticks && opts.ticks.z || 0;\r\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\r\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\r\n\r\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\r\n      // backward compatibility: draw has been overridden by custom scale\r\n      return [{\r\n        z: tz,\r\n        draw: (chartArea) => {\r\n          this.draw(chartArea);\r\n        }\r\n      }];\r\n    }\r\n\r\n    return [{\r\n      z: gz,\r\n      draw: (chartArea) => {\r\n        this.drawBackground();\r\n        this.drawGrid(chartArea);\r\n        this.drawTitle();\r\n      }\r\n    }, {\r\n      z: bz,\r\n      draw: () => {\r\n        this.drawBorder();\r\n      }\r\n    }, {\r\n      z: tz,\r\n      draw: (chartArea) => {\r\n        this.drawLabels(chartArea);\r\n      }\r\n    }];\r\n  }\r\n\r\n  /**\r\n\t * Returns visible dataset metas that are attached to this scale\r\n\t * @param {string} [type] - if specified, also filter by dataset type\r\n\t * @return {object[]}\r\n\t */\r\n  getMatchingVisibleMetas(type) {\r\n    const metas = this.chart.getSortedVisibleDatasetMetas();\r\n    const axisID = this.axis + 'AxisID';\r\n    const result = [];\r\n    let i, ilen;\r\n\r\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\r\n      const meta = metas[i];\r\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\r\n        result.push(meta);\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n\t * @param {number} index\r\n\t * @return {object}\r\n\t * @protected\r\n \t */\r\n  _resolveTickFontOptions(index) {\r\n    const opts = this.options.ticks.setContext(this.getContext(index));\r\n    return toFont(opts.font);\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  _maxDigits() {\r\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\r\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\r\n  }\r\n}\r\n","import {merge} from '../helpers';\r\nimport defaults, {overrides} from './core.defaults';\r\n\r\n/**\r\n * @typedef {{id: string, defaults: any, overrides?: any, defaultRoutes: any}} IChartComponent\r\n */\r\n\r\nexport default class TypedRegistry {\r\n  constructor(type, scope, override) {\r\n    this.type = type;\r\n    this.scope = scope;\r\n    this.override = override;\r\n    this.items = Object.create(null);\r\n  }\r\n\r\n  isForType(type) {\r\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\r\n  }\r\n\r\n  /**\r\n\t * @param {IChartComponent} item\r\n\t * @returns {string} The scope where items defaults were registered to.\r\n\t */\r\n  register(item) {\r\n    const proto = Object.getPrototypeOf(item);\r\n    let parentScope;\r\n\r\n    if (isIChartComponent(proto)) {\r\n      // Make sure the parent is registered and note the scope where its defaults are.\r\n      parentScope = this.register(proto);\r\n    }\r\n\r\n    const items = this.items;\r\n    const id = item.id;\r\n    const scope = this.scope + '.' + id;\r\n\r\n    if (!id) {\r\n      throw new Error('class does not have id: ' + item);\r\n    }\r\n\r\n    if (id in items) {\r\n      // already registered\r\n      return scope;\r\n    }\r\n\r\n    items[id] = item;\r\n    registerDefaults(item, scope, parentScope);\r\n    if (this.override) {\r\n      defaults.override(item.id, item.overrides);\r\n    }\r\n\r\n    return scope;\r\n  }\r\n\r\n  /**\r\n\t * @param {string} id\r\n\t * @returns {object?}\r\n\t */\r\n  get(id) {\r\n    return this.items[id];\r\n  }\r\n\r\n  /**\r\n\t * @param {IChartComponent} item\r\n\t */\r\n  unregister(item) {\r\n    const items = this.items;\r\n    const id = item.id;\r\n    const scope = this.scope;\r\n\r\n    if (id in items) {\r\n      delete items[id];\r\n    }\r\n\r\n    if (scope && id in defaults[scope]) {\r\n      delete defaults[scope][id];\r\n      if (this.override) {\r\n        delete overrides[id];\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction registerDefaults(item, scope, parentScope) {\r\n  // Inherit the parent's defaults and keep existing defaults\r\n  const itemDefaults = merge(Object.create(null), [\r\n    parentScope ? defaults.get(parentScope) : {},\r\n    defaults.get(scope),\r\n    item.defaults\r\n  ]);\r\n\r\n  defaults.set(scope, itemDefaults);\r\n\r\n  if (item.defaultRoutes) {\r\n    routeDefaults(scope, item.defaultRoutes);\r\n  }\r\n\r\n  if (item.descriptors) {\r\n    defaults.describe(scope, item.descriptors);\r\n  }\r\n}\r\n\r\nfunction routeDefaults(scope, routes) {\r\n  Object.keys(routes).forEach(property => {\r\n    const propertyParts = property.split('.');\r\n    const sourceName = propertyParts.pop();\r\n    const sourceScope = [scope].concat(propertyParts).join('.');\r\n    const parts = routes[property].split('.');\r\n    const targetName = parts.pop();\r\n    const targetScope = parts.join('.');\r\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\r\n  });\r\n}\r\n\r\nfunction isIChartComponent(proto) {\r\n  return 'id' in proto && 'defaults' in proto;\r\n}\r\n","import DatasetController from './core.datasetController';\r\nimport Element from './core.element';\r\nimport Scale from './core.scale';\r\nimport TypedRegistry from './core.typedRegistry';\r\nimport {each, callback as call, _capitalize} from '../helpers/helpers.core';\r\n\r\n/**\r\n * Please use the module's default export which provides a singleton instance\r\n * Note: class is exported for typedoc\r\n */\r\nexport class Registry {\r\n  constructor() {\r\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\r\n    this.elements = new TypedRegistry(Element, 'elements');\r\n    this.plugins = new TypedRegistry(Object, 'plugins');\r\n    this.scales = new TypedRegistry(Scale, 'scales');\r\n    // Order is important, Scale has Element in prototype chain,\r\n    // so Scales must be before Elements. Plugins are a fallback, so not listed here.\r\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\r\n  }\r\n\r\n  /**\r\n\t * @param  {...any} args\r\n\t */\r\n  add(...args) {\r\n    this._each('register', args);\r\n  }\r\n\r\n  remove(...args) {\r\n    this._each('unregister', args);\r\n  }\r\n\r\n  /**\r\n\t * @param  {...typeof DatasetController} args\r\n\t */\r\n  addControllers(...args) {\r\n    this._each('register', args, this.controllers);\r\n  }\r\n\r\n  /**\r\n\t * @param  {...typeof Element} args\r\n\t */\r\n  addElements(...args) {\r\n    this._each('register', args, this.elements);\r\n  }\r\n\r\n  /**\r\n\t * @param  {...any} args\r\n\t */\r\n  addPlugins(...args) {\r\n    this._each('register', args, this.plugins);\r\n  }\r\n\r\n  /**\r\n\t * @param  {...typeof Scale} args\r\n\t */\r\n  addScales(...args) {\r\n    this._each('register', args, this.scales);\r\n  }\r\n\r\n  /**\r\n\t * @param {string} id\r\n\t * @returns {typeof DatasetController}\r\n\t */\r\n  getController(id) {\r\n    return this._get(id, this.controllers, 'controller');\r\n  }\r\n\r\n  /**\r\n\t * @param {string} id\r\n\t * @returns {typeof Element}\r\n\t */\r\n  getElement(id) {\r\n    return this._get(id, this.elements, 'element');\r\n  }\r\n\r\n  /**\r\n\t * @param {string} id\r\n\t * @returns {object}\r\n\t */\r\n  getPlugin(id) {\r\n    return this._get(id, this.plugins, 'plugin');\r\n  }\r\n\r\n  /**\r\n\t * @param {string} id\r\n\t * @returns {typeof Scale}\r\n\t */\r\n  getScale(id) {\r\n    return this._get(id, this.scales, 'scale');\r\n  }\r\n\r\n  /**\r\n\t * @param  {...typeof DatasetController} args\r\n\t */\r\n  removeControllers(...args) {\r\n    this._each('unregister', args, this.controllers);\r\n  }\r\n\r\n  /**\r\n\t * @param  {...typeof Element} args\r\n\t */\r\n  removeElements(...args) {\r\n    this._each('unregister', args, this.elements);\r\n  }\r\n\r\n  /**\r\n\t * @param  {...any} args\r\n\t */\r\n  removePlugins(...args) {\r\n    this._each('unregister', args, this.plugins);\r\n  }\r\n\r\n  /**\r\n\t * @param  {...typeof Scale} args\r\n\t */\r\n  removeScales(...args) {\r\n    this._each('unregister', args, this.scales);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _each(method, args, typedRegistry) {\r\n    [...args].forEach(arg => {\r\n      const reg = typedRegistry || this._getRegistryForType(arg);\r\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\r\n        this._exec(method, reg, arg);\r\n      } else {\r\n        // Handle loopable args\r\n        // Use case:\r\n        //  import * as plugins from './plugins';\r\n        //  Chart.register(plugins);\r\n        each(arg, item => {\r\n          // If there are mixed types in the loopable, make sure those are\r\n          // registered in correct registry\r\n          // Use case: (treemap exporting controller, elements etc)\r\n          //  import * as treemap from 'chartjs-chart-treemap';\r\n          //  Chart.register(treemap);\r\n\r\n          const itemReg = typedRegistry || this._getRegistryForType(item);\r\n          this._exec(method, itemReg, item);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _exec(method, registry, component) {\r\n    const camelMethod = _capitalize(method);\r\n    call(component['before' + camelMethod], [], component); // beforeRegister / beforeUnregister\r\n    registry[method](component);\r\n    call(component['after' + camelMethod], [], component); // afterRegister / afterUnregister\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getRegistryForType(type) {\r\n    for (let i = 0; i < this._typedRegistries.length; i++) {\r\n      const reg = this._typedRegistries[i];\r\n      if (reg.isForType(type)) {\r\n        return reg;\r\n      }\r\n    }\r\n    // plugins is the fallback registry\r\n    return this.plugins;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _get(id, typedRegistry, type) {\r\n    const item = typedRegistry.get(id);\r\n    if (item === undefined) {\r\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\r\n    }\r\n    return item;\r\n  }\r\n\r\n}\r\n\r\n// singleton instance\r\nexport default /* #__PURE__ */ new Registry();\r\n","import registry from './core.registry';\r\nimport {callback as callCallback, isNullOrUndef, valueOrDefault} from '../helpers/helpers.core';\r\n\r\n/**\r\n * @typedef { import(\"./core.controller\").default } Chart\r\n * @typedef { import(\"../../types\").ChartEvent } ChartEvent\r\n * @typedef { import(\"../plugins/plugin.tooltip\").default } Tooltip\r\n */\r\n\r\n/**\r\n * @callback filterCallback\r\n * @param {{plugin: object, options: object}} value\r\n * @param {number} [index]\r\n * @param {array} [array]\r\n * @param {object} [thisArg]\r\n * @return {boolean}\r\n */\r\n\r\n\r\nexport default class PluginService {\r\n  constructor() {\r\n    this._init = [];\r\n  }\r\n\r\n  /**\r\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\r\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\r\n\t * returned value can be used, for instance, to interrupt the current action.\r\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\r\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\r\n\t * @param {object} [args] - Extra arguments to apply to the hook call.\r\n   * @param {filterCallback} [filter] - Filtering function for limiting which plugins are notified\r\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\r\n\t */\r\n  notify(chart, hook, args, filter) {\r\n    if (hook === 'beforeInit') {\r\n      this._init = this._createDescriptors(chart, true);\r\n      this._notify(this._init, chart, 'install');\r\n    }\r\n\r\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\r\n    const result = this._notify(descriptors, chart, hook, args);\r\n\r\n    if (hook === 'afterDestroy') {\r\n      this._notify(descriptors, chart, 'stop');\r\n      this._notify(this._init, chart, 'uninstall');\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _notify(descriptors, chart, hook, args) {\r\n    args = args || {};\r\n    for (const descriptor of descriptors) {\r\n      const plugin = descriptor.plugin;\r\n      const method = plugin[hook];\r\n      const params = [chart, args, descriptor.options];\r\n      if (callCallback(method, params, plugin) === false && args.cancelable) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  invalidate() {\r\n    // When plugins are registered, there is the possibility of a double\r\n    // invalidate situation. In this case, we only want to invalidate once.\r\n    // If we invalidate multiple times, the `_oldCache` is lost and all of the\r\n    // plugins are restarted without being correctly stopped.\r\n    // See https://github.com/chartjs/Chart.js/issues/8147\r\n    if (!isNullOrUndef(this._cache)) {\r\n      this._oldCache = this._cache;\r\n      this._cache = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @param {Chart} chart\r\n\t * @private\r\n\t */\r\n  _descriptors(chart) {\r\n    if (this._cache) {\r\n      return this._cache;\r\n    }\r\n\r\n    const descriptors = this._cache = this._createDescriptors(chart);\r\n\r\n    this._notifyStateChanges(chart);\r\n\r\n    return descriptors;\r\n  }\r\n\r\n  _createDescriptors(chart, all) {\r\n    const config = chart && chart.config;\r\n    const options = valueOrDefault(config.options && config.options.plugins, {});\r\n    const plugins = allPlugins(config);\r\n    // options === false => all plugins are disabled\r\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\r\n  }\r\n\r\n  /**\r\n\t * @param {Chart} chart\r\n\t * @private\r\n\t */\r\n  _notifyStateChanges(chart) {\r\n    const previousDescriptors = this._oldCache || [];\r\n    const descriptors = this._cache;\r\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\r\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\r\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"./core.config\").default} config\r\n */\r\nfunction allPlugins(config) {\r\n  const localIds = {};\r\n  const plugins = [];\r\n  const keys = Object.keys(registry.plugins.items);\r\n  for (let i = 0; i < keys.length; i++) {\r\n    plugins.push(registry.getPlugin(keys[i]));\r\n  }\r\n\r\n  const local = config.plugins || [];\r\n  for (let i = 0; i < local.length; i++) {\r\n    const plugin = local[i];\r\n\r\n    if (plugins.indexOf(plugin) === -1) {\r\n      plugins.push(plugin);\r\n      localIds[plugin.id] = true;\r\n    }\r\n  }\r\n\r\n  return {plugins, localIds};\r\n}\r\n\r\nfunction getOpts(options, all) {\r\n  if (!all && options === false) {\r\n    return null;\r\n  }\r\n  if (options === true) {\r\n    return {};\r\n  }\r\n  return options;\r\n}\r\n\r\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\r\n  const result = [];\r\n  const context = chart.getContext();\r\n\r\n  for (const plugin of plugins) {\r\n    const id = plugin.id;\r\n    const opts = getOpts(options[id], all);\r\n    if (opts === null) {\r\n      continue;\r\n    }\r\n    result.push({\r\n      plugin,\r\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\r\n    });\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction pluginOpts(config, {plugin, local}, opts, context) {\r\n  const keys = config.pluginScopeKeys(plugin);\r\n  const scopes = config.getOptionScopes(opts, keys);\r\n  if (local && plugin.defaults) {\r\n    // make sure plugin defaults are in scopes for local (not registered) plugins\r\n    scopes.push(plugin.defaults);\r\n  }\r\n  return config.createResolver(scopes, context, [''], {\r\n    // These are just defaults that plugins can override\r\n    scriptable: false,\r\n    indexable: false,\r\n    allKeys: true\r\n  });\r\n}\r\n","import defaults, {overrides, descriptors} from './core.defaults';\r\nimport {mergeIf, resolveObjectKey, isArray, isFunction, valueOrDefault, isObject} from '../helpers/helpers.core';\r\nimport {_attachContext, _createResolver, _descriptors} from '../helpers/helpers.config';\r\n\r\nexport function getIndexAxis(type, options) {\r\n  const datasetDefaults = defaults.datasets[type] || {};\r\n  const datasetOptions = (options.datasets || {})[type] || {};\r\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\r\n}\r\n\r\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\r\n  let axis = id;\r\n  if (id === '_index_') {\r\n    axis = indexAxis;\r\n  } else if (id === '_value_') {\r\n    axis = indexAxis === 'x' ? 'y' : 'x';\r\n  }\r\n  return axis;\r\n}\r\n\r\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\r\n  return axis === indexAxis ? '_index_' : '_value_';\r\n}\r\n\r\nfunction axisFromPosition(position) {\r\n  if (position === 'top' || position === 'bottom') {\r\n    return 'x';\r\n  }\r\n  if (position === 'left' || position === 'right') {\r\n    return 'y';\r\n  }\r\n}\r\n\r\nexport function determineAxis(id, scaleOptions) {\r\n  if (id === 'x' || id === 'y' || id === 'r') {\r\n    return id;\r\n  }\r\n\r\n  id = scaleOptions.axis\r\n    || axisFromPosition(scaleOptions.position)\r\n    || id.length > 1 && determineAxis(id[0].toLowerCase(), scaleOptions);\r\n\r\n  if (id) {\r\n    return id;\r\n  }\r\n\r\n  throw new Error(`Cannot determine type of '${name}' axis. Please provide 'axis' or 'position' option.`);\r\n}\r\n\r\nfunction mergeScaleConfig(config, options) {\r\n  const chartDefaults = overrides[config.type] || {scales: {}};\r\n  const configScales = options.scales || {};\r\n  const chartIndexAxis = getIndexAxis(config.type, options);\r\n  const scales = Object.create(null);\r\n\r\n  // First figure out first scale id's per axis.\r\n  Object.keys(configScales).forEach(id => {\r\n    const scaleConf = configScales[id];\r\n    if (!isObject(scaleConf)) {\r\n      return console.error(`Invalid scale configuration for scale: ${id}`);\r\n    }\r\n    if (scaleConf._proxy) {\r\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\r\n    }\r\n    const axis = determineAxis(id, scaleConf);\r\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\r\n    const defaultScaleOptions = chartDefaults.scales || {};\r\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\r\n  });\r\n\r\n  // Then merge dataset defaults to scale configs\r\n  config.data.datasets.forEach(dataset => {\r\n    const type = dataset.type || config.type;\r\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\r\n    const datasetDefaults = overrides[type] || {};\r\n    const defaultScaleOptions = datasetDefaults.scales || {};\r\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\r\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\r\n      const id = dataset[axis + 'AxisID'] || axis;\r\n      scales[id] = scales[id] || Object.create(null);\r\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\r\n    });\r\n  });\r\n\r\n  // apply scale defaults, if not overridden by dataset defaults\r\n  Object.keys(scales).forEach(key => {\r\n    const scale = scales[key];\r\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\r\n  });\r\n\r\n  return scales;\r\n}\r\n\r\nfunction initOptions(config) {\r\n  const options = config.options || (config.options = {});\r\n\r\n  options.plugins = valueOrDefault(options.plugins, {});\r\n  options.scales = mergeScaleConfig(config, options);\r\n}\r\n\r\nfunction initData(data) {\r\n  data = data || {};\r\n  data.datasets = data.datasets || [];\r\n  data.labels = data.labels || [];\r\n  return data;\r\n}\r\n\r\nfunction initConfig(config) {\r\n  config = config || {};\r\n  config.data = initData(config.data);\r\n\r\n  initOptions(config);\r\n\r\n  return config;\r\n}\r\n\r\nconst keyCache = new Map();\r\nconst keysCached = new Set();\r\n\r\nfunction cachedKeys(cacheKey, generate) {\r\n  let keys = keyCache.get(cacheKey);\r\n  if (!keys) {\r\n    keys = generate();\r\n    keyCache.set(cacheKey, keys);\r\n    keysCached.add(keys);\r\n  }\r\n  return keys;\r\n}\r\n\r\nconst addIfFound = (set, obj, key) => {\r\n  const opts = resolveObjectKey(obj, key);\r\n  if (opts !== undefined) {\r\n    set.add(opts);\r\n  }\r\n};\r\n\r\nexport default class Config {\r\n  constructor(config) {\r\n    this._config = initConfig(config);\r\n    this._scopeCache = new Map();\r\n    this._resolverCache = new Map();\r\n  }\r\n\r\n  get platform() {\r\n    return this._config.platform;\r\n  }\r\n\r\n  get type() {\r\n    return this._config.type;\r\n  }\r\n\r\n  set type(type) {\r\n    this._config.type = type;\r\n  }\r\n\r\n  get data() {\r\n    return this._config.data;\r\n  }\r\n\r\n  set data(data) {\r\n    this._config.data = initData(data);\r\n  }\r\n\r\n  get options() {\r\n    return this._config.options;\r\n  }\r\n\r\n  set options(options) {\r\n    this._config.options = options;\r\n  }\r\n\r\n  get plugins() {\r\n    return this._config.plugins;\r\n  }\r\n\r\n  update() {\r\n    const config = this._config;\r\n    this.clearCache();\r\n    initOptions(config);\r\n  }\r\n\r\n  clearCache() {\r\n    this._scopeCache.clear();\r\n    this._resolverCache.clear();\r\n  }\r\n\r\n  /**\r\n   * Returns the option scope keys for resolving dataset options.\r\n   * These keys do not include the dataset itself, because it is not under options.\r\n   * @param {string} datasetType\r\n   * @return {string[][]}\r\n   */\r\n  datasetScopeKeys(datasetType) {\r\n    return cachedKeys(datasetType,\r\n      () => [[\r\n        `datasets.${datasetType}`,\r\n        ''\r\n      ]]);\r\n  }\r\n\r\n  /**\r\n   * Returns the option scope keys for resolving dataset animation options.\r\n   * These keys do not include the dataset itself, because it is not under options.\r\n   * @param {string} datasetType\r\n   * @param {string} transition\r\n   * @return {string[][]}\r\n   */\r\n  datasetAnimationScopeKeys(datasetType, transition) {\r\n    return cachedKeys(`${datasetType}.transition.${transition}`,\r\n      () => [\r\n        [\r\n          `datasets.${datasetType}.transitions.${transition}`,\r\n          `transitions.${transition}`,\r\n        ],\r\n        // The following are used for looking up the `animations` and `animation` keys\r\n        [\r\n          `datasets.${datasetType}`,\r\n          ''\r\n        ]\r\n      ]);\r\n  }\r\n\r\n  /**\r\n   * Returns the options scope keys for resolving element options that belong\r\n   * to an dataset. These keys do not include the dataset itself, because it\r\n   * is not under options.\r\n   * @param {string} datasetType\r\n   * @param {string} elementType\r\n   * @return {string[][]}\r\n   */\r\n  datasetElementScopeKeys(datasetType, elementType) {\r\n    return cachedKeys(`${datasetType}-${elementType}`,\r\n      () => [[\r\n        `datasets.${datasetType}.elements.${elementType}`,\r\n        `datasets.${datasetType}`,\r\n        `elements.${elementType}`,\r\n        ''\r\n      ]]);\r\n  }\r\n\r\n  /**\r\n   * Returns the options scope keys for resolving plugin options.\r\n   * @param {{id: string, additionalOptionScopes?: string[]}} plugin\r\n   * @return {string[][]}\r\n   */\r\n  pluginScopeKeys(plugin) {\r\n    const id = plugin.id;\r\n    const type = this.type;\r\n    return cachedKeys(`${type}-plugin-${id}`,\r\n      () => [[\r\n        `plugins.${id}`,\r\n        ...plugin.additionalOptionScopes || [],\r\n      ]]);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _cachedScopes(mainScope, resetCache) {\r\n    const _scopeCache = this._scopeCache;\r\n    let cache = _scopeCache.get(mainScope);\r\n    if (!cache || resetCache) {\r\n      cache = new Map();\r\n      _scopeCache.set(mainScope, cache);\r\n    }\r\n    return cache;\r\n  }\r\n\r\n  /**\r\n   * Resolves the objects from options and defaults for option value resolution.\r\n   * @param {object} mainScope - The main scope object for options\r\n   * @param {string[][]} keyLists - The arrays of keys in resolution order\r\n   * @param {boolean} [resetCache] - reset the cache for this mainScope\r\n   */\r\n  getOptionScopes(mainScope, keyLists, resetCache) {\r\n    const {options, type} = this;\r\n    const cache = this._cachedScopes(mainScope, resetCache);\r\n    const cached = cache.get(keyLists);\r\n    if (cached) {\r\n      return cached;\r\n    }\r\n\r\n    const scopes = new Set();\r\n\r\n    keyLists.forEach(keys => {\r\n      if (mainScope) {\r\n        scopes.add(mainScope);\r\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\r\n      }\r\n      keys.forEach(key => addIfFound(scopes, options, key));\r\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\r\n      keys.forEach(key => addIfFound(scopes, defaults, key));\r\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\r\n    });\r\n\r\n    const array = Array.from(scopes);\r\n    if (array.length === 0) {\r\n      array.push(Object.create(null));\r\n    }\r\n    if (keysCached.has(keyLists)) {\r\n      cache.set(keyLists, array);\r\n    }\r\n    return array;\r\n  }\r\n\r\n  /**\r\n   * Returns the option scopes for resolving chart options\r\n   * @return {object[]}\r\n   */\r\n  chartOptionScopes() {\r\n    const {options, type} = this;\r\n\r\n    return [\r\n      options,\r\n      overrides[type] || {},\r\n      defaults.datasets[type] || {}, // https://github.com/chartjs/Chart.js/issues/8531\r\n      {type},\r\n      defaults,\r\n      descriptors\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * @param {object[]} scopes\r\n   * @param {string[]} names\r\n   * @param {function|object} context\r\n   * @param {string[]} [prefixes]\r\n   * @return {object}\r\n   */\r\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\r\n    const result = {$shared: true};\r\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\r\n    let options = resolver;\r\n    if (needContext(resolver, names)) {\r\n      result.$shared = false;\r\n      context = isFunction(context) ? context() : context;\r\n      // subResolver is passed to scriptable options. It should not resolve to hover options.\r\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\r\n      options = _attachContext(resolver, context, subResolver);\r\n    }\r\n\r\n    for (const prop of names) {\r\n      result[prop] = options[prop];\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @param {object[]} scopes\r\n   * @param {object} [context]\r\n   * @param {string[]} [prefixes]\r\n   * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults]\r\n   */\r\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\r\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\r\n    return isObject(context)\r\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\r\n      : resolver;\r\n  }\r\n}\r\n\r\nfunction getResolver(resolverCache, scopes, prefixes) {\r\n  let cache = resolverCache.get(scopes);\r\n  if (!cache) {\r\n    cache = new Map();\r\n    resolverCache.set(scopes, cache);\r\n  }\r\n  const cacheKey = prefixes.join();\r\n  let cached = cache.get(cacheKey);\r\n  if (!cached) {\r\n    const resolver = _createResolver(scopes, prefixes);\r\n    cached = {\r\n      resolver,\r\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\r\n    };\r\n    cache.set(cacheKey, cached);\r\n  }\r\n  return cached;\r\n}\r\n\r\nconst hasFunction = value => isObject(value)\r\n  && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);\r\n\r\nfunction needContext(proxy, names) {\r\n  const {isScriptable, isIndexable} = _descriptors(proxy);\r\n\r\n  for (const prop of names) {\r\n    const scriptable = isScriptable(prop);\r\n    const indexable = isIndexable(prop);\r\n    const value = (indexable || scriptable) && proxy[prop];\r\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\r\n      || (indexable && isArray(value))) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","import animator from './core.animator';\r\nimport defaults, {overrides} from './core.defaults';\r\nimport Interaction from './core.interaction';\r\nimport layouts from './core.layouts';\r\nimport {_detectPlatform} from '../platform';\r\nimport PluginService from './core.plugins';\r\nimport registry from './core.registry';\r\nimport Config, {determineAxis, getIndexAxis} from './core.config';\r\nimport {retinaScale, _isDomSupported} from '../helpers/helpers.dom';\r\nimport {each, callback as callCallback, uid, valueOrDefault, _elementsEqual, isNullOrUndef, setsEqual, defined, isFunction, _isClickEvent} from '../helpers/helpers.core';\r\nimport {clearCanvas, clipArea, createContext, unclipArea, _isPointInArea} from '../helpers';\r\n// @ts-ignore\r\nimport {version} from '../../package.json';\r\nimport {debounce} from '../helpers/helpers.extras';\r\n\r\n/**\r\n * @typedef { import('../../types').ChartEvent } ChartEvent\r\n * @typedef { import(\"../../types\").Point } Point\r\n */\r\n\r\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\r\nfunction positionIsHorizontal(position, axis) {\r\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\r\n}\r\n\r\nfunction compare2Level(l1, l2) {\r\n  return function(a, b) {\r\n    return a[l1] === b[l1]\r\n      ? a[l2] - b[l2]\r\n      : a[l1] - b[l1];\r\n  };\r\n}\r\n\r\nfunction onAnimationsComplete(context) {\r\n  const chart = context.chart;\r\n  const animationOptions = chart.options.animation;\r\n\r\n  chart.notifyPlugins('afterRender');\r\n  callCallback(animationOptions && animationOptions.onComplete, [context], chart);\r\n}\r\n\r\nfunction onAnimationProgress(context) {\r\n  const chart = context.chart;\r\n  const animationOptions = chart.options.animation;\r\n  callCallback(animationOptions && animationOptions.onProgress, [context], chart);\r\n}\r\n\r\n/**\r\n * Chart.js can take a string id of a canvas element, a 2d context, or a canvas element itself.\r\n * Attempt to unwrap the item passed into the chart constructor so that it is a canvas element (if possible).\r\n */\r\nfunction getCanvas(item) {\r\n  if (_isDomSupported() && typeof item === 'string') {\r\n    item = document.getElementById(item);\r\n  } else if (item && item.length) {\r\n    // Support for array based queries (such as jQuery)\r\n    item = item[0];\r\n  }\r\n\r\n  if (item && item.canvas) {\r\n    // Support for any object associated to a canvas (including a context2d)\r\n    item = item.canvas;\r\n  }\r\n  return item;\r\n}\r\n\r\nconst instances = {};\r\nconst getChart = (key) => {\r\n  const canvas = getCanvas(key);\r\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\r\n};\r\n\r\nfunction moveNumericKeys(obj, start, move) {\r\n  const keys = Object.keys(obj);\r\n  for (const key of keys) {\r\n    const intKey = +key;\r\n    if (intKey >= start) {\r\n      const value = obj[key];\r\n      delete obj[key];\r\n      if (move > 0 || intKey > start) {\r\n        obj[intKey + move] = value;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {ChartEvent} e\r\n * @param {ChartEvent|null} lastEvent\r\n * @param {boolean} inChartArea\r\n * @param {boolean} isClick\r\n * @returns {ChartEvent|null}\r\n */\r\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\r\n  if (!inChartArea || e.type === 'mouseout') {\r\n    return null;\r\n  }\r\n  if (isClick) {\r\n    return lastEvent;\r\n  }\r\n  return e;\r\n}\r\n\r\nfunction getDatasetArea(meta) {\r\n  const {xScale, yScale} = meta;\r\n  if (xScale && yScale) {\r\n    return {\r\n      left: xScale.left,\r\n      right: xScale.right,\r\n      top: yScale.top,\r\n      bottom: yScale.bottom\r\n    };\r\n  }\r\n}\r\n\r\nclass Chart {\r\n\r\n  static defaults = defaults;\r\n  static instances = instances;\r\n  static overrides = overrides;\r\n  static registry = registry;\r\n  static version = version;\r\n  static getChart = getChart;\r\n\r\n  static register(...items) {\r\n    registry.add(...items);\r\n    invalidatePlugins();\r\n  }\r\n\r\n  static unregister(...items) {\r\n    registry.remove(...items);\r\n    invalidatePlugins();\r\n  }\r\n\r\n  // eslint-disable-next-line max-statements\r\n  constructor(item, userConfig) {\r\n    const config = this.config = new Config(userConfig);\r\n    const initialCanvas = getCanvas(item);\r\n    const existingChart = getChart(initialCanvas);\r\n    if (existingChart) {\r\n      throw new Error(\r\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\r\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\r\n      );\r\n    }\r\n\r\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\r\n\r\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\r\n    this.platform.updateConfig(config);\r\n\r\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\r\n    const canvas = context && context.canvas;\r\n    const height = canvas && canvas.height;\r\n    const width = canvas && canvas.width;\r\n\r\n    this.id = uid();\r\n    this.ctx = context;\r\n    this.canvas = canvas;\r\n    this.width = width;\r\n    this.height = height;\r\n    this._options = options;\r\n    // Store the previously used aspect ratio to determine if a resize\r\n    // is needed during updates. Do this after _options is set since\r\n    // aspectRatio uses a getter\r\n    this._aspectRatio = this.aspectRatio;\r\n    this._layers = [];\r\n    this._metasets = [];\r\n    this._stacks = undefined;\r\n    this.boxes = [];\r\n    this.currentDevicePixelRatio = undefined;\r\n    this.chartArea = undefined;\r\n    this._active = [];\r\n    this._lastEvent = undefined;\r\n    this._listeners = {};\r\n    /** @type {?{attach?: function, detach?: function, resize?: function}} */\r\n    this._responsiveListeners = undefined;\r\n    this._sortedMetasets = [];\r\n    this.scales = {};\r\n    this._plugins = new PluginService();\r\n    this.$proxies = {};\r\n    this._hiddenIndices = {};\r\n    this.attached = false;\r\n    this._animationsDisabled = undefined;\r\n    this.$context = undefined;\r\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\r\n    this._dataChanges = [];\r\n\r\n    // Add the chart instance to the global namespace\r\n    instances[this.id] = this;\r\n\r\n    if (!context || !canvas) {\r\n      // The given item is not a compatible context2d element, let's return before finalizing\r\n      // the chart initialization but after setting basic chart / controller properties that\r\n      // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\r\n      // https://github.com/chartjs/Chart.js/issues/2807\r\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\r\n      return;\r\n    }\r\n\r\n    animator.listen(this, 'complete', onAnimationsComplete);\r\n    animator.listen(this, 'progress', onAnimationProgress);\r\n\r\n    this._initialize();\r\n    if (this.attached) {\r\n      this.update();\r\n    }\r\n  }\r\n\r\n  get aspectRatio() {\r\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\r\n    if (!isNullOrUndef(aspectRatio)) {\r\n      // If aspectRatio is defined in options, use that.\r\n      return aspectRatio;\r\n    }\r\n\r\n    if (maintainAspectRatio && _aspectRatio) {\r\n      // If maintainAspectRatio is truthly and we had previously determined _aspectRatio, use that\r\n      return _aspectRatio;\r\n    }\r\n\r\n    // Calculate\r\n    return height ? width / height : null;\r\n  }\r\n\r\n  get data() {\r\n    return this.config.data;\r\n  }\r\n\r\n  set data(data) {\r\n    this.config.data = data;\r\n  }\r\n\r\n  get options() {\r\n    return this._options;\r\n  }\r\n\r\n  set options(options) {\r\n    this.config.options = options;\r\n  }\r\n\r\n  get registry() {\r\n    return registry;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _initialize() {\r\n    // Before init plugin notification\r\n    this.notifyPlugins('beforeInit');\r\n\r\n    if (this.options.responsive) {\r\n      this.resize();\r\n    } else {\r\n      retinaScale(this, this.options.devicePixelRatio);\r\n    }\r\n\r\n    this.bindEvents();\r\n\r\n    // After init plugin notification\r\n    this.notifyPlugins('afterInit');\r\n\r\n    return this;\r\n  }\r\n\r\n  clear() {\r\n    clearCanvas(this.canvas, this.ctx);\r\n    return this;\r\n  }\r\n\r\n  stop() {\r\n    animator.stop(this);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n\t * Resize the chart to its container or to explicit dimensions.\r\n\t * @param {number} [width]\r\n\t * @param {number} [height]\r\n\t */\r\n  resize(width, height) {\r\n    if (!animator.running(this)) {\r\n      this._resize(width, height);\r\n    } else {\r\n      this._resizeBeforeDraw = {width, height};\r\n    }\r\n  }\r\n\r\n  _resize(width, height) {\r\n    const options = this.options;\r\n    const canvas = this.canvas;\r\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\r\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\r\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\r\n    const mode = this.width ? 'resize' : 'attach';\r\n\r\n    this.width = newSize.width;\r\n    this.height = newSize.height;\r\n    this._aspectRatio = this.aspectRatio;\r\n    if (!retinaScale(this, newRatio, true)) {\r\n      return;\r\n    }\r\n\r\n    this.notifyPlugins('resize', {size: newSize});\r\n\r\n    callCallback(options.onResize, [this, newSize], this);\r\n\r\n    if (this.attached) {\r\n      if (this._doResize(mode)) {\r\n        // The resize update is delayed, only draw without updating.\r\n        this.render();\r\n      }\r\n    }\r\n  }\r\n\r\n  ensureScalesHaveIDs() {\r\n    const options = this.options;\r\n    const scalesOptions = options.scales || {};\r\n\r\n    each(scalesOptions, (axisOptions, axisID) => {\r\n      axisOptions.id = axisID;\r\n    });\r\n  }\r\n\r\n  /**\r\n\t * Builds a map of scale ID to scale object for future lookup.\r\n\t */\r\n  buildOrUpdateScales() {\r\n    const options = this.options;\r\n    const scaleOpts = options.scales;\r\n    const scales = this.scales;\r\n    const updated = Object.keys(scales).reduce((obj, id) => {\r\n      obj[id] = false;\r\n      return obj;\r\n    }, {});\r\n    let items = [];\r\n\r\n    if (scaleOpts) {\r\n      items = items.concat(\r\n        Object.keys(scaleOpts).map((id) => {\r\n          const scaleOptions = scaleOpts[id];\r\n          const axis = determineAxis(id, scaleOptions);\r\n          const isRadial = axis === 'r';\r\n          const isHorizontal = axis === 'x';\r\n          return {\r\n            options: scaleOptions,\r\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\r\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\r\n          };\r\n        })\r\n      );\r\n    }\r\n\r\n    each(items, (item) => {\r\n      const scaleOptions = item.options;\r\n      const id = scaleOptions.id;\r\n      const axis = determineAxis(id, scaleOptions);\r\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\r\n\r\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\r\n        scaleOptions.position = item.dposition;\r\n      }\r\n\r\n      updated[id] = true;\r\n      let scale = null;\r\n      if (id in scales && scales[id].type === scaleType) {\r\n        scale = scales[id];\r\n      } else {\r\n        const scaleClass = registry.getScale(scaleType);\r\n        scale = new scaleClass({\r\n          id,\r\n          type: scaleType,\r\n          ctx: this.ctx,\r\n          chart: this\r\n        });\r\n        scales[scale.id] = scale;\r\n      }\r\n\r\n      scale.init(scaleOptions, options);\r\n    });\r\n    // clear up discarded scales\r\n    each(updated, (hasUpdated, id) => {\r\n      if (!hasUpdated) {\r\n        delete scales[id];\r\n      }\r\n    });\r\n\r\n    each(scales, (scale) => {\r\n      layouts.configure(this, scale, scale.options);\r\n      layouts.addBox(this, scale);\r\n    });\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _updateMetasets() {\r\n    const metasets = this._metasets;\r\n    const numData = this.data.datasets.length;\r\n    const numMeta = metasets.length;\r\n\r\n    metasets.sort((a, b) => a.index - b.index);\r\n    if (numMeta > numData) {\r\n      for (let i = numData; i < numMeta; ++i) {\r\n        this._destroyDatasetMeta(i);\r\n      }\r\n      metasets.splice(numData, numMeta - numData);\r\n    }\r\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _removeUnreferencedMetasets() {\r\n    const {_metasets: metasets, data: {datasets}} = this;\r\n    if (metasets.length > datasets.length) {\r\n      delete this._stacks;\r\n    }\r\n    metasets.forEach((meta, index) => {\r\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\r\n        this._destroyDatasetMeta(index);\r\n      }\r\n    });\r\n  }\r\n\r\n  buildOrUpdateControllers() {\r\n    const newControllers = [];\r\n    const datasets = this.data.datasets;\r\n    let i, ilen;\r\n\r\n    this._removeUnreferencedMetasets();\r\n\r\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\r\n      const dataset = datasets[i];\r\n      let meta = this.getDatasetMeta(i);\r\n      const type = dataset.type || this.config.type;\r\n\r\n      if (meta.type && meta.type !== type) {\r\n        this._destroyDatasetMeta(i);\r\n        meta = this.getDatasetMeta(i);\r\n      }\r\n      meta.type = type;\r\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\r\n      meta.order = dataset.order || 0;\r\n      meta.index = i;\r\n      meta.label = '' + dataset.label;\r\n      meta.visible = this.isDatasetVisible(i);\r\n\r\n      if (meta.controller) {\r\n        meta.controller.updateIndex(i);\r\n        meta.controller.linkScales();\r\n      } else {\r\n        const ControllerClass = registry.getController(type);\r\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\r\n        Object.assign(ControllerClass, {\r\n          dataElementType: registry.getElement(dataElementType),\r\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\r\n        });\r\n        meta.controller = new ControllerClass(this, i);\r\n        newControllers.push(meta.controller);\r\n      }\r\n    }\r\n\r\n    this._updateMetasets();\r\n    return newControllers;\r\n  }\r\n\r\n  /**\r\n\t * Reset the elements of all datasets\r\n\t * @private\r\n\t */\r\n  _resetElements() {\r\n    each(this.data.datasets, (dataset, datasetIndex) => {\r\n      this.getDatasetMeta(datasetIndex).controller.reset();\r\n    }, this);\r\n  }\r\n\r\n  /**\r\n\t* Resets the chart back to its state before the initial animation\r\n\t*/\r\n  reset() {\r\n    this._resetElements();\r\n    this.notifyPlugins('reset');\r\n  }\r\n\r\n  update(mode) {\r\n    const config = this.config;\r\n\r\n    config.update();\r\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\r\n    const animsDisabled = this._animationsDisabled = !options.animation;\r\n\r\n    this._updateScales();\r\n    this._checkEventBindings();\r\n    this._updateHiddenIndices();\r\n\r\n    // plugins options references might have change, let's invalidate the cache\r\n    // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\r\n    this._plugins.invalidate();\r\n\r\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\r\n      return;\r\n    }\r\n\r\n    // Make sure dataset controllers are updated and new controllers are reset\r\n    const newControllers = this.buildOrUpdateControllers();\r\n\r\n    this.notifyPlugins('beforeElementsUpdate');\r\n\r\n    // Make sure all dataset controllers have correct meta data counts\r\n    let minPadding = 0;\r\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\r\n      const {controller} = this.getDatasetMeta(i);\r\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\r\n      // New controllers will be reset after the layout pass, so we only want to modify\r\n      // elements added to new datasets\r\n      controller.buildOrUpdateElements(reset);\r\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\r\n    }\r\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\r\n    this._updateLayout(minPadding);\r\n\r\n    // Only reset the controllers if we have animations\r\n    if (!animsDisabled) {\r\n      // Can only reset the new controllers after the scales have been updated\r\n      // Reset is done to get the starting point for the initial animation\r\n      each(newControllers, (controller) => {\r\n        controller.reset();\r\n      });\r\n    }\r\n\r\n    this._updateDatasets(mode);\r\n\r\n    // Do this before render so that any plugins that need final scale updates can use it\r\n    this.notifyPlugins('afterUpdate', {mode});\r\n\r\n    this._layers.sort(compare2Level('z', '_idx'));\r\n\r\n    // Replay last event from before update, or set hover styles on active elements\r\n    const {_active, _lastEvent} = this;\r\n    if (_lastEvent) {\r\n      this._eventHandler(_lastEvent, true);\r\n    } else if (_active.length) {\r\n      this._updateHoverStyles(_active, _active, true);\r\n    }\r\n\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _updateScales() {\r\n    each(this.scales, (scale) => {\r\n      layouts.removeBox(this, scale);\r\n    });\r\n\r\n    this.ensureScalesHaveIDs();\r\n    this.buildOrUpdateScales();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _checkEventBindings() {\r\n    const options = this.options;\r\n    const existingEvents = new Set(Object.keys(this._listeners));\r\n    const newEvents = new Set(options.events);\r\n\r\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\r\n      // The configured events have changed. Rebind.\r\n      this.unbindEvents();\r\n      this.bindEvents();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _updateHiddenIndices() {\r\n    const {_hiddenIndices} = this;\r\n    const changes = this._getUniformDataChanges() || [];\r\n    for (const {method, start, count} of changes) {\r\n      const move = method === '_removeElements' ? -count : count;\r\n      moveNumericKeys(_hiddenIndices, start, move);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _getUniformDataChanges() {\r\n    const _dataChanges = this._dataChanges;\r\n    if (!_dataChanges || !_dataChanges.length) {\r\n      return;\r\n    }\r\n\r\n    this._dataChanges = [];\r\n    const datasetCount = this.data.datasets.length;\r\n    const makeSet = (idx) => new Set(\r\n      _dataChanges\r\n        .filter(c => c[0] === idx)\r\n        .map((c, i) => i + ',' + c.splice(1).join(','))\r\n    );\r\n\r\n    const changeSet = makeSet(0);\r\n    for (let i = 1; i < datasetCount; i++) {\r\n      if (!setsEqual(changeSet, makeSet(i))) {\r\n        return;\r\n      }\r\n    }\r\n    return Array.from(changeSet)\r\n      .map(c => c.split(','))\r\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\r\n  }\r\n\r\n  /**\r\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\r\n\t * hook, in which case, plugins will not be called on `afterLayout`.\r\n\t * @private\r\n\t */\r\n  _updateLayout(minPadding) {\r\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\r\n      return;\r\n    }\r\n\r\n    layouts.update(this, this.width, this.height, minPadding);\r\n\r\n    const area = this.chartArea;\r\n    const noArea = area.width <= 0 || area.height <= 0;\r\n\r\n    this._layers = [];\r\n    each(this.boxes, (box) => {\r\n      if (noArea && box.position === 'chartArea') {\r\n        // Skip drawing and configuring chartArea boxes when chartArea is zero or negative\r\n        return;\r\n      }\r\n\r\n      // configure is called twice, once in core.scale.update and once here.\r\n      // Here the boxes are fully updated and at their final positions.\r\n      if (box.configure) {\r\n        box.configure();\r\n      }\r\n      this._layers.push(...box._layers());\r\n    }, this);\r\n\r\n    this._layers.forEach((item, index) => {\r\n      item._idx = index;\r\n    });\r\n\r\n    this.notifyPlugins('afterLayout');\r\n  }\r\n\r\n  /**\r\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\r\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\r\n\t * @private\r\n\t */\r\n  _updateDatasets(mode) {\r\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\r\n      return;\r\n    }\r\n\r\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\r\n      this.getDatasetMeta(i).controller.configure();\r\n    }\r\n\r\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\r\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\r\n    }\r\n\r\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\r\n  }\r\n\r\n  /**\r\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\r\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\r\n\t * @private\r\n\t */\r\n  _updateDataset(index, mode) {\r\n    const meta = this.getDatasetMeta(index);\r\n    const args = {meta, index, mode, cancelable: true};\r\n\r\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\r\n      return;\r\n    }\r\n\r\n    meta.controller._update(mode);\r\n\r\n    args.cancelable = false;\r\n    this.notifyPlugins('afterDatasetUpdate', args);\r\n  }\r\n\r\n  render() {\r\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\r\n      return;\r\n    }\r\n\r\n    if (animator.has(this)) {\r\n      if (this.attached && !animator.running(this)) {\r\n        animator.start(this);\r\n      }\r\n    } else {\r\n      this.draw();\r\n      onAnimationsComplete({chart: this});\r\n    }\r\n  }\r\n\r\n  draw() {\r\n    let i;\r\n    if (this._resizeBeforeDraw) {\r\n      const {width, height} = this._resizeBeforeDraw;\r\n      this._resize(width, height);\r\n      this._resizeBeforeDraw = null;\r\n    }\r\n    this.clear();\r\n\r\n    if (this.width <= 0 || this.height <= 0) {\r\n      return;\r\n    }\r\n\r\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\r\n      return;\r\n    }\r\n\r\n    // Because of plugin hooks (before/afterDatasetsDraw), datasets can't\r\n    // currently be part of layers. Instead, we draw\r\n    // layers <= 0 before(default, backward compat), and the rest after\r\n    const layers = this._layers;\r\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\r\n      layers[i].draw(this.chartArea);\r\n    }\r\n\r\n    this._drawDatasets();\r\n\r\n    // Rest of layers\r\n    for (; i < layers.length; ++i) {\r\n      layers[i].draw(this.chartArea);\r\n    }\r\n\r\n    this.notifyPlugins('afterDraw');\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getSortedDatasetMetas(filterVisible) {\r\n    const metasets = this._sortedMetasets;\r\n    const result = [];\r\n    let i, ilen;\r\n\r\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\r\n      const meta = metasets[i];\r\n      if (!filterVisible || meta.visible) {\r\n        result.push(meta);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n\t * Gets the visible dataset metas in drawing order\r\n\t * @return {object[]}\r\n\t */\r\n  getSortedVisibleDatasetMetas() {\r\n    return this._getSortedDatasetMetas(true);\r\n  }\r\n\r\n  /**\r\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\r\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\r\n\t * @private\r\n\t */\r\n  _drawDatasets() {\r\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\r\n      return;\r\n    }\r\n\r\n    const metasets = this.getSortedVisibleDatasetMetas();\r\n    for (let i = metasets.length - 1; i >= 0; --i) {\r\n      this._drawDataset(metasets[i]);\r\n    }\r\n\r\n    this.notifyPlugins('afterDatasetsDraw');\r\n  }\r\n\r\n  /**\r\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\r\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\r\n\t * @private\r\n\t */\r\n  _drawDataset(meta) {\r\n    const ctx = this.ctx;\r\n    const clip = meta._clip;\r\n    const useClip = !clip.disabled;\r\n    const area = getDatasetArea(meta) || this.chartArea;\r\n    const args = {\r\n      meta,\r\n      index: meta.index,\r\n      cancelable: true\r\n    };\r\n\r\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\r\n      return;\r\n    }\r\n\r\n    if (useClip) {\r\n      clipArea(ctx, {\r\n        left: clip.left === false ? 0 : area.left - clip.left,\r\n        right: clip.right === false ? this.width : area.right + clip.right,\r\n        top: clip.top === false ? 0 : area.top - clip.top,\r\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\r\n      });\r\n    }\r\n\r\n    meta.controller.draw();\r\n\r\n    if (useClip) {\r\n      unclipArea(ctx);\r\n    }\r\n\r\n    args.cancelable = false;\r\n    this.notifyPlugins('afterDatasetDraw', args);\r\n  }\r\n\r\n  /**\r\n   * Checks whether the given point is in the chart area.\r\n   * @param {Point} point - in relative coordinates (see, e.g., getRelativePosition)\r\n   * @returns {boolean}\r\n   */\r\n  isPointInArea(point) {\r\n    return _isPointInArea(point, this.chartArea, this._minPadding);\r\n  }\r\n\r\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\r\n    const method = Interaction.modes[mode];\r\n    if (typeof method === 'function') {\r\n      return method(this, e, options, useFinalPosition);\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  getDatasetMeta(datasetIndex) {\r\n    const dataset = this.data.datasets[datasetIndex];\r\n    const metasets = this._metasets;\r\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\r\n\r\n    if (!meta) {\r\n      meta = {\r\n        type: null,\r\n        data: [],\r\n        dataset: null,\r\n        controller: null,\r\n        hidden: null,\t\t\t// See isDatasetVisible() comment\r\n        xAxisID: null,\r\n        yAxisID: null,\r\n        order: dataset && dataset.order || 0,\r\n        index: datasetIndex,\r\n        _dataset: dataset,\r\n        _parsed: [],\r\n        _sorted: false\r\n      };\r\n      metasets.push(meta);\r\n    }\r\n\r\n    return meta;\r\n  }\r\n\r\n  getContext() {\r\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\r\n  }\r\n\r\n  getVisibleDatasetCount() {\r\n    return this.getSortedVisibleDatasetMetas().length;\r\n  }\r\n\r\n  isDatasetVisible(datasetIndex) {\r\n    const dataset = this.data.datasets[datasetIndex];\r\n    if (!dataset) {\r\n      return false;\r\n    }\r\n\r\n    const meta = this.getDatasetMeta(datasetIndex);\r\n\r\n    // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\r\n    // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\r\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\r\n  }\r\n\r\n  setDatasetVisibility(datasetIndex, visible) {\r\n    const meta = this.getDatasetMeta(datasetIndex);\r\n    meta.hidden = !visible;\r\n  }\r\n\r\n  toggleDataVisibility(index) {\r\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\r\n  }\r\n\r\n  getDataVisibility(index) {\r\n    return !this._hiddenIndices[index];\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _updateVisibility(datasetIndex, dataIndex, visible) {\r\n    const mode = visible ? 'show' : 'hide';\r\n    const meta = this.getDatasetMeta(datasetIndex);\r\n    const anims = meta.controller._resolveAnimations(undefined, mode);\r\n\r\n    if (defined(dataIndex)) {\r\n      meta.data[dataIndex].hidden = !visible;\r\n      this.update();\r\n    } else {\r\n      this.setDatasetVisibility(datasetIndex, visible);\r\n      // Animate visible state, so hide animation can be seen. This could be handled better if update / updateDataset returned a Promise.\r\n      anims.update(meta, {visible});\r\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\r\n    }\r\n  }\r\n\r\n  hide(datasetIndex, dataIndex) {\r\n    this._updateVisibility(datasetIndex, dataIndex, false);\r\n  }\r\n\r\n  show(datasetIndex, dataIndex) {\r\n    this._updateVisibility(datasetIndex, dataIndex, true);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _destroyDatasetMeta(datasetIndex) {\r\n    const meta = this._metasets[datasetIndex];\r\n    if (meta && meta.controller) {\r\n      meta.controller._destroy();\r\n    }\r\n    delete this._metasets[datasetIndex];\r\n  }\r\n\r\n  _stop() {\r\n    let i, ilen;\r\n    this.stop();\r\n    animator.remove(this);\r\n\r\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\r\n      this._destroyDatasetMeta(i);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    this.notifyPlugins('beforeDestroy');\r\n    const {canvas, ctx} = this;\r\n\r\n    this._stop();\r\n    this.config.clearCache();\r\n\r\n    if (canvas) {\r\n      this.unbindEvents();\r\n      clearCanvas(canvas, ctx);\r\n      this.platform.releaseContext(ctx);\r\n      this.canvas = null;\r\n      this.ctx = null;\r\n    }\r\n\r\n    delete instances[this.id];\r\n\r\n    this.notifyPlugins('afterDestroy');\r\n  }\r\n\r\n  toBase64Image(...args) {\r\n    return this.canvas.toDataURL(...args);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  bindEvents() {\r\n    this.bindUserEvents();\r\n    if (this.options.responsive) {\r\n      this.bindResponsiveEvents();\r\n    } else {\r\n      this.attached = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  bindUserEvents() {\r\n    const listeners = this._listeners;\r\n    const platform = this.platform;\r\n\r\n    const _add = (type, listener) => {\r\n      platform.addEventListener(this, type, listener);\r\n      listeners[type] = listener;\r\n    };\r\n\r\n    const listener = (e, x, y) => {\r\n      e.offsetX = x;\r\n      e.offsetY = y;\r\n      this._eventHandler(e);\r\n    };\r\n\r\n    each(this.options.events, (type) => _add(type, listener));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  bindResponsiveEvents() {\r\n    if (!this._responsiveListeners) {\r\n      this._responsiveListeners = {};\r\n    }\r\n    const listeners = this._responsiveListeners;\r\n    const platform = this.platform;\r\n\r\n    const _add = (type, listener) => {\r\n      platform.addEventListener(this, type, listener);\r\n      listeners[type] = listener;\r\n    };\r\n    const _remove = (type, listener) => {\r\n      if (listeners[type]) {\r\n        platform.removeEventListener(this, type, listener);\r\n        delete listeners[type];\r\n      }\r\n    };\r\n\r\n    const listener = (width, height) => {\r\n      if (this.canvas) {\r\n        this.resize(width, height);\r\n      }\r\n    };\r\n\r\n    let detached; // eslint-disable-line prefer-const\r\n    const attached = () => {\r\n      _remove('attach', attached);\r\n\r\n      this.attached = true;\r\n      this.resize();\r\n\r\n      _add('resize', listener);\r\n      _add('detach', detached);\r\n    };\r\n\r\n    detached = () => {\r\n      this.attached = false;\r\n\r\n      _remove('resize', listener);\r\n\r\n      // Stop animating and remove metasets, so when re-attached, the animations start from beginning.\r\n      this._stop();\r\n      this._resize(0, 0);\r\n\r\n      _add('attach', attached);\r\n    };\r\n\r\n    if (platform.isAttached(this.canvas)) {\r\n      attached();\r\n    } else {\r\n      detached();\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  unbindEvents() {\r\n    each(this._listeners, (listener, type) => {\r\n      this.platform.removeEventListener(this, type, listener);\r\n    });\r\n    this._listeners = {};\r\n\r\n    each(this._responsiveListeners, (listener, type) => {\r\n      this.platform.removeEventListener(this, type, listener);\r\n    });\r\n    this._responsiveListeners = undefined;\r\n  }\r\n\r\n  updateHoverStyle(items, mode, enabled) {\r\n    const prefix = enabled ? 'set' : 'remove';\r\n    let meta, item, i, ilen;\r\n\r\n    if (mode === 'dataset') {\r\n      meta = this.getDatasetMeta(items[0].datasetIndex);\r\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\r\n    }\r\n\r\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\r\n      item = items[i];\r\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\r\n      if (controller) {\r\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Get active (hovered) elements\r\n\t * @returns array\r\n\t */\r\n  getActiveElements() {\r\n    return this._active || [];\r\n  }\r\n\r\n  /**\r\n\t * Set active (hovered) elements\r\n\t * @param {array} activeElements New active data points\r\n\t */\r\n  setActiveElements(activeElements) {\r\n    const lastActive = this._active || [];\r\n    const active = activeElements.map(({datasetIndex, index}) => {\r\n      const meta = this.getDatasetMeta(datasetIndex);\r\n      if (!meta) {\r\n        throw new Error('No dataset found at index ' + datasetIndex);\r\n      }\r\n\r\n      return {\r\n        datasetIndex,\r\n        element: meta.data[index],\r\n        index,\r\n      };\r\n    });\r\n    const changed = !_elementsEqual(active, lastActive);\r\n\r\n    if (changed) {\r\n      this._active = active;\r\n      // Make sure we don't use the previous mouse event to override the active elements in update.\r\n      this._lastEvent = null;\r\n      this._updateHoverStyles(active, lastActive);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Calls enabled plugins on the specified hook and with the given args.\r\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\r\n\t * returned value can be used, for instance, to interrupt the current action.\r\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\r\n\t * @param {Object} [args] - Extra arguments to apply to the hook call.\r\n   * @param {import('./core.plugins').filterCallback} [filter] - Filtering function for limiting which plugins are notified\r\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\r\n\t */\r\n  notifyPlugins(hook, args, filter) {\r\n    return this._plugins.notify(this, hook, args, filter);\r\n  }\r\n\r\n  /**\r\n   * Check if a plugin with the specific ID is registered and enabled\r\n   * @param {string} pluginId - The ID of the plugin of which to check if it is enabled\r\n   * @returns {boolean}\r\n   */\r\n  isPluginEnabled(pluginId) {\r\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _updateHoverStyles(active, lastActive, replay) {\r\n    const hoverOptions = this.options.hover;\r\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\r\n    const deactivated = diff(lastActive, active);\r\n    const activated = replay ? active : diff(active, lastActive);\r\n\r\n    if (deactivated.length) {\r\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\r\n    }\r\n\r\n    if (activated.length && hoverOptions.mode) {\r\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _eventHandler(e, replay) {\r\n    const args = {\r\n      event: e,\r\n      replay,\r\n      cancelable: true,\r\n      inChartArea: this.isPointInArea(e)\r\n    };\r\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\r\n\r\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\r\n      return;\r\n    }\r\n\r\n    const changed = this._handleEvent(e, replay, args.inChartArea);\r\n\r\n    args.cancelable = false;\r\n    this.notifyPlugins('afterEvent', args, eventFilter);\r\n\r\n    if (changed || args.changed) {\r\n      this.render();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n\t * Handle an event\r\n\t * @param {ChartEvent} e the event to handle\r\n\t * @param {boolean} [replay] - true if the event was replayed by `update`\r\n   * @param {boolean} [inChartArea] - true if the event is inside chartArea\r\n\t * @return {boolean} true if the chart needs to re-render\r\n\t * @private\r\n\t */\r\n  _handleEvent(e, replay, inChartArea) {\r\n    const {_active: lastActive = [], options} = this;\r\n\r\n    // If the event is replayed from `update`, we should evaluate with the final positions.\r\n    //\r\n    // The `replay`:\r\n    // It's the last event (excluding click) that has occurred before `update`.\r\n    // So mouse has not moved. It's also over the chart, because there is a `replay`.\r\n    //\r\n    // The why:\r\n    // If animations are active, the elements haven't moved yet compared to state before update.\r\n    // But if they will, we are activating the elements that would be active, if this check\r\n    // was done after the animations have completed. => \"final positions\".\r\n    // If there is no animations, the \"final\" and \"current\" positions are equal.\r\n    // This is done so we do not have to evaluate the active elements each animation frame\r\n    // - it would be expensive.\r\n    const useFinalPosition = replay;\r\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\r\n    const isClick = _isClickEvent(e);\r\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\r\n\r\n    if (inChartArea) {\r\n      // Set _lastEvent to null while we are processing the event handlers.\r\n      // This prevents recursion if the handler calls chart.update()\r\n      this._lastEvent = null;\r\n\r\n      // Invoke onHover hook\r\n      callCallback(options.onHover, [e, active, this], this);\r\n\r\n      if (isClick) {\r\n        callCallback(options.onClick, [e, active, this], this);\r\n      }\r\n    }\r\n\r\n    const changed = !_elementsEqual(active, lastActive);\r\n    if (changed || replay) {\r\n      this._active = active;\r\n      this._updateHoverStyles(active, lastActive, replay);\r\n    }\r\n\r\n    this._lastEvent = lastEvent;\r\n\r\n    return changed;\r\n  }\r\n\r\n  /**\r\n   * @param {ChartEvent} e - The event\r\n   * @param {import('../../types').ActiveElement[]} lastActive - Previously active elements\r\n   * @param {boolean} inChartArea - Is the envent inside chartArea\r\n   * @param {boolean} useFinalPosition - Should the evaluation be done with current or final (after animation) element positions\r\n   * @returns {import('../../types').ActiveElement[]} - The active elements\r\n   * @pravate\r\n   */\r\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\r\n    if (e.type === 'mouseout') {\r\n      return [];\r\n    }\r\n\r\n    if (!inChartArea) {\r\n      // Let user control the active elements outside chartArea. Eg. using Legend.\r\n      return lastActive;\r\n    }\r\n\r\n    const hoverOptions = this.options.hover;\r\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\r\n  }\r\n}\r\n\r\n// @ts-ignore\r\nfunction invalidatePlugins() {\r\n  return each(Chart.instances, (chart) => chart._plugins.invalidate());\r\n}\r\n\r\nexport default Chart;\r\n","/**\r\n * @namespace Chart._adapters\r\n * @since 2.8.0\r\n * @private\r\n */\r\n\r\nimport type {AnyObject} from '../../types/basic';\r\nimport type {ChartOptions} from '../../types';\r\n\r\nexport type TimeUnit = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';\r\n\r\nexport interface DateAdapter<T extends AnyObject = AnyObject> {\r\n  readonly options: T;\r\n  /**\r\n   * Will called with chart options after adapter creation.\r\n   */\r\n  init(this: DateAdapter<T>, chartOptions: ChartOptions): void;\r\n  /**\r\n   * Returns a map of time formats for the supported formatting units defined\r\n   * in Unit as well as 'datetime' representing a detailed date/time string.\r\n   */\r\n  formats(this: DateAdapter<T>): Record<string, string>;\r\n  /**\r\n   * Parses the given `value` and return the associated timestamp.\r\n   * @param value - the value to parse (usually comes from the data)\r\n   * @param [format] - the expected data format\r\n   */\r\n  parse(this: DateAdapter<T>, value: unknown, format?: TimeUnit): number | null;\r\n  /**\r\n   * Returns the formatted date in the specified `format` for a given `timestamp`.\r\n   * @param timestamp - the timestamp to format\r\n   * @param format - the date/time token\r\n   */\r\n  format(this: DateAdapter<T>, timestamp: number, format: TimeUnit): string;\r\n  /**\r\n   * Adds the specified `amount` of `unit` to the given `timestamp`.\r\n   * @param timestamp - the input timestamp\r\n   * @param amount - the amount to add\r\n   * @param unit - the unit as string\r\n   */\r\n  add(this: DateAdapter<T>, timestamp: number, amount: number, unit: TimeUnit): number;\r\n  /**\r\n   * Returns the number of `unit` between the given timestamps.\r\n   * @param a - the input timestamp (reference)\r\n   * @param b - the timestamp to subtract\r\n   * @param unit - the unit as string\r\n   */\r\n  diff(this: DateAdapter<T>, a: number, b: number, unit: TimeUnit): number;\r\n  /**\r\n   * Returns start of `unit` for the given `timestamp`.\r\n   * @param timestamp - the input timestamp\r\n   * @param unit - the unit as string\r\n   * @param [weekday] - the ISO day of the week with 1 being Monday\r\n   * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\r\n   */\r\n  startOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek', weekday?: number): number;\r\n  /**\r\n   * Returns end of `unit` for the given `timestamp`.\r\n   * @param timestamp - the input timestamp\r\n   * @param unit - the unit as string\r\n   */\r\n  endOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek'): number;\r\n}\r\n\r\nfunction abstract<T = void>(): T {\r\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\r\n}\r\n\r\n/**\r\n * Date adapter (current used by the time scale)\r\n * @namespace Chart._adapters._date\r\n * @memberof Chart._adapters\r\n * @private\r\n */\r\nclass DateAdapterBase implements DateAdapter {\r\n\r\n  /**\r\n   * Override default date adapter methods.\r\n   * Accepts type parameter to define options type.\r\n   * @example\r\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\r\n   *   init() {\r\n   *     console.log(this.options.myAdapterOption);\r\n   *   }\r\n   * })\r\n   */\r\n  static override<T extends AnyObject = AnyObject>(\r\n    members: Partial<Omit<DateAdapter<T>, 'options'>>\r\n  ) {\r\n    Object.assign(DateAdapterBase.prototype, members);\r\n  }\r\n\r\n  readonly options: AnyObject;\r\n\r\n  constructor(options: AnyObject) {\r\n    this.options = options || {};\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  init() {}\r\n\r\n  formats(): Record<string, string> {\r\n    return abstract();\r\n  }\r\n\r\n  parse(): number | null {\r\n    return abstract();\r\n  }\r\n\r\n  format(): string {\r\n    return abstract();\r\n  }\r\n\r\n  add(): number {\r\n    return abstract();\r\n  }\r\n\r\n  diff(): number {\r\n    return abstract();\r\n  }\r\n\r\n  startOf(): number {\r\n    return abstract();\r\n  }\r\n\r\n  endOf(): number {\r\n    return abstract();\r\n  }\r\n}\r\n\r\nexport default {\r\n  _date: DateAdapterBase\r\n};\r\n","import DatasetController from '../core/core.datasetController';\r\nimport {\r\n  _arrayUnique, isArray, isNullOrUndef,\r\n  valueOrDefault, resolveObjectKey, sign, defined\r\n} from '../helpers';\r\n\r\nfunction getAllScaleValues(scale, type) {\r\n  if (!scale._cache.$bar) {\r\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\r\n    let values = [];\r\n\r\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\r\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\r\n    }\r\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\r\n  }\r\n  return scale._cache.$bar;\r\n}\r\n\r\n/**\r\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\r\n * @private\r\n */\r\nfunction computeMinSampleSize(meta) {\r\n  const scale = meta.iScale;\r\n  const values = getAllScaleValues(scale, meta.type);\r\n  let min = scale._length;\r\n  let i, ilen, curr, prev;\r\n  const updateMinAndPrev = () => {\r\n    if (curr === 32767 || curr === -32768) {\r\n      // Ignore truncated pixels\r\n      return;\r\n    }\r\n    if (defined(prev)) {\r\n      // curr - prev === 0 is ignored\r\n      min = Math.min(min, Math.abs(curr - prev) || min);\r\n    }\r\n    prev = curr;\r\n  };\r\n\r\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\r\n    curr = scale.getPixelForValue(values[i]);\r\n    updateMinAndPrev();\r\n  }\r\n\r\n  prev = undefined;\r\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\r\n    curr = scale.getPixelForTick(i);\r\n    updateMinAndPrev();\r\n  }\r\n\r\n  return min;\r\n}\r\n\r\n/**\r\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\r\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\r\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\r\n * @private\r\n */\r\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\r\n  const thickness = options.barThickness;\r\n  let size, ratio;\r\n\r\n  if (isNullOrUndef(thickness)) {\r\n    size = ruler.min * options.categoryPercentage;\r\n    ratio = options.barPercentage;\r\n  } else {\r\n    // When bar thickness is enforced, category and bar percentages are ignored.\r\n    // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\r\n    // and deprecate barPercentage since this value is ignored when thickness is absolute.\r\n    size = thickness * stackCount;\r\n    ratio = 1;\r\n  }\r\n\r\n  return {\r\n    chunk: size / stackCount,\r\n    ratio,\r\n    start: ruler.pixels[index] - (size / 2)\r\n  };\r\n}\r\n\r\n/**\r\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\r\n * percentage options are 1), based on the previous and following categories. This mode\r\n * generates bars with different widths when data are not evenly spaced.\r\n * @private\r\n */\r\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\r\n  const pixels = ruler.pixels;\r\n  const curr = pixels[index];\r\n  let prev = index > 0 ? pixels[index - 1] : null;\r\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\r\n  const percent = options.categoryPercentage;\r\n\r\n  if (prev === null) {\r\n    // first data: its size is double based on the next point or,\r\n    // if it's also the last data, we use the scale size.\r\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\r\n  }\r\n\r\n  if (next === null) {\r\n    // last data: its size is also double based on the previous point.\r\n    next = curr + curr - prev;\r\n  }\r\n\r\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\r\n  const size = Math.abs(next - prev) / 2 * percent;\r\n\r\n  return {\r\n    chunk: size / stackCount,\r\n    ratio: options.barPercentage,\r\n    start\r\n  };\r\n}\r\n\r\nfunction parseFloatBar(entry, item, vScale, i) {\r\n  const startValue = vScale.parse(entry[0], i);\r\n  const endValue = vScale.parse(entry[1], i);\r\n  const min = Math.min(startValue, endValue);\r\n  const max = Math.max(startValue, endValue);\r\n  let barStart = min;\r\n  let barEnd = max;\r\n\r\n  if (Math.abs(min) > Math.abs(max)) {\r\n    barStart = max;\r\n    barEnd = min;\r\n  }\r\n\r\n  // Store `barEnd` (furthest away from origin) as parsed value,\r\n  // to make stacking straight forward\r\n  item[vScale.axis] = barEnd;\r\n\r\n  item._custom = {\r\n    barStart,\r\n    barEnd,\r\n    start: startValue,\r\n    end: endValue,\r\n    min,\r\n    max\r\n  };\r\n}\r\n\r\nfunction parseValue(entry, item, vScale, i) {\r\n  if (isArray(entry)) {\r\n    parseFloatBar(entry, item, vScale, i);\r\n  } else {\r\n    item[vScale.axis] = vScale.parse(entry, i);\r\n  }\r\n  return item;\r\n}\r\n\r\nfunction parseArrayOrPrimitive(meta, data, start, count) {\r\n  const iScale = meta.iScale;\r\n  const vScale = meta.vScale;\r\n  const labels = iScale.getLabels();\r\n  const singleScale = iScale === vScale;\r\n  const parsed = [];\r\n  let i, ilen, item, entry;\r\n\r\n  for (i = start, ilen = start + count; i < ilen; ++i) {\r\n    entry = data[i];\r\n    item = {};\r\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\r\n    parsed.push(parseValue(entry, item, vScale, i));\r\n  }\r\n  return parsed;\r\n}\r\n\r\nfunction isFloatBar(custom) {\r\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\r\n}\r\n\r\nfunction barSign(size, vScale, actualBase) {\r\n  if (size !== 0) {\r\n    return sign(size);\r\n  }\r\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\r\n}\r\n\r\nfunction borderProps(properties) {\r\n  let reverse, start, end, top, bottom;\r\n  if (properties.horizontal) {\r\n    reverse = properties.base > properties.x;\r\n    start = 'left';\r\n    end = 'right';\r\n  } else {\r\n    reverse = properties.base < properties.y;\r\n    start = 'bottom';\r\n    end = 'top';\r\n  }\r\n  if (reverse) {\r\n    top = 'end';\r\n    bottom = 'start';\r\n  } else {\r\n    top = 'start';\r\n    bottom = 'end';\r\n  }\r\n  return {start, end, reverse, top, bottom};\r\n}\r\n\r\nfunction setBorderSkipped(properties, options, stack, index) {\r\n  let edge = options.borderSkipped;\r\n  const res = {};\r\n\r\n  if (!edge) {\r\n    properties.borderSkipped = res;\r\n    return;\r\n  }\r\n\r\n  if (edge === true) {\r\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\r\n    return;\r\n  }\r\n\r\n  const {start, end, reverse, top, bottom} = borderProps(properties);\r\n\r\n  if (edge === 'middle' && stack) {\r\n    properties.enableBorderRadius = true;\r\n    if ((stack._top || 0) === index) {\r\n      edge = top;\r\n    } else if ((stack._bottom || 0) === index) {\r\n      edge = bottom;\r\n    } else {\r\n      res[parseEdge(bottom, start, end, reverse)] = true;\r\n      edge = top;\r\n    }\r\n  }\r\n\r\n  res[parseEdge(edge, start, end, reverse)] = true;\r\n  properties.borderSkipped = res;\r\n}\r\n\r\nfunction parseEdge(edge, a, b, reverse) {\r\n  if (reverse) {\r\n    edge = swap(edge, a, b);\r\n    edge = startEnd(edge, b, a);\r\n  } else {\r\n    edge = startEnd(edge, a, b);\r\n  }\r\n  return edge;\r\n}\r\n\r\nfunction swap(orig, v1, v2) {\r\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\r\n}\r\n\r\nfunction startEnd(v, start, end) {\r\n  return v === 'start' ? start : v === 'end' ? end : v;\r\n}\r\n\r\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\r\n  properties.inflateAmount = inflateAmount === 'auto'\r\n    ? ratio === 1 ? 0.33 : 0\r\n    : inflateAmount;\r\n}\r\n\r\nexport default class BarController extends DatasetController {\r\n\r\n  static id = 'bar';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    datasetElementType: false,\r\n    dataElementType: 'bar',\r\n\r\n    categoryPercentage: 0.8,\r\n    barPercentage: 0.9,\r\n    grouped: true,\r\n\r\n    animations: {\r\n      numbers: {\r\n        type: 'number',\r\n        properties: ['x', 'y', 'base', 'width', 'height']\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static overrides = {\r\n    scales: {\r\n      _index_: {\r\n        type: 'category',\r\n        offset: true,\r\n        grid: {\r\n          offset: true\r\n        }\r\n      },\r\n      _value_: {\r\n        type: 'linear',\r\n        beginAtZero: true,\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n\t * Overriding primitive data parsing since we support mixed primitive/array\r\n\t * data for float bars\r\n\t * @protected\r\n\t */\r\n  parsePrimitiveData(meta, data, start, count) {\r\n    return parseArrayOrPrimitive(meta, data, start, count);\r\n  }\r\n\r\n  /**\r\n\t * Overriding array data parsing since we support mixed primitive/array\r\n\t * data for float bars\r\n\t * @protected\r\n\t */\r\n  parseArrayData(meta, data, start, count) {\r\n    return parseArrayOrPrimitive(meta, data, start, count);\r\n  }\r\n\r\n  /**\r\n\t * Overriding object data parsing since we support mixed primitive/array\r\n\t * value-scale data for float bars\r\n\t * @protected\r\n\t */\r\n  parseObjectData(meta, data, start, count) {\r\n    const {iScale, vScale} = meta;\r\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\r\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\r\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\r\n    const parsed = [];\r\n    let i, ilen, item, obj;\r\n    for (i = start, ilen = start + count; i < ilen; ++i) {\r\n      obj = data[i];\r\n      item = {};\r\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\r\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\r\n    }\r\n    return parsed;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  updateRangeFromParsed(range, scale, parsed, stack) {\r\n    super.updateRangeFromParsed(range, scale, parsed, stack);\r\n    const custom = parsed._custom;\r\n    if (custom && scale === this._cachedMeta.vScale) {\r\n      // float bar: only one end of the bar is considered by `super`\r\n      range.min = Math.min(range.min, custom.min);\r\n      range.max = Math.max(range.max, custom.max);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @return {number|boolean}\r\n\t * @protected\r\n\t */\r\n  getMaxOverflow() {\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getLabelAndValue(index) {\r\n    const meta = this._cachedMeta;\r\n    const {iScale, vScale} = meta;\r\n    const parsed = this.getParsed(index);\r\n    const custom = parsed._custom;\r\n    const value = isFloatBar(custom)\r\n      ? '[' + custom.start + ', ' + custom.end + ']'\r\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\r\n\r\n    return {\r\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\r\n      value\r\n    };\r\n  }\r\n\r\n  initialize() {\r\n    this.enableOptionSharing = true;\r\n\r\n    super.initialize();\r\n\r\n    const meta = this._cachedMeta;\r\n    meta.stack = this.getDataset().stack;\r\n  }\r\n\r\n  update(mode) {\r\n    const meta = this._cachedMeta;\r\n    this.updateElements(meta.data, 0, meta.data.length, mode);\r\n  }\r\n\r\n  updateElements(bars, start, count, mode) {\r\n    const reset = mode === 'reset';\r\n    const {index, _cachedMeta: {vScale}} = this;\r\n    const base = vScale.getBasePixel();\r\n    const horizontal = vScale.isHorizontal();\r\n    const ruler = this._getRuler();\r\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\r\n\r\n    for (let i = start; i < start + count; i++) {\r\n      const parsed = this.getParsed(i);\r\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\r\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\r\n      const stack = (parsed._stacks || {})[vScale.axis];\r\n\r\n      const properties = {\r\n        horizontal,\r\n        base: vpixels.base,\r\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\r\n        x: horizontal ? vpixels.head : ipixels.center,\r\n        y: horizontal ? ipixels.center : vpixels.head,\r\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\r\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\r\n      };\r\n\r\n      if (includeOptions) {\r\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\r\n      }\r\n      const options = properties.options || bars[i].options;\r\n      setBorderSkipped(properties, options, stack, index);\r\n      setInflateAmount(properties, options, ruler.ratio);\r\n      this.updateElement(bars[i], i, properties, mode);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Returns the stacks based on groups and bar visibility.\r\n\t * @param {number} [last] - The dataset index\r\n\t * @param {number} [dataIndex] - The data index of the ruler\r\n\t * @returns {string[]} The list of stack IDs\r\n\t * @private\r\n\t */\r\n  _getStacks(last, dataIndex) {\r\n    const {iScale} = this._cachedMeta;\r\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\r\n      .filter(meta => meta.controller.options.grouped);\r\n    const stacked = iScale.options.stacked;\r\n    const stacks = [];\r\n\r\n    const skipNull = (meta) => {\r\n      const parsed = meta.controller.getParsed(dataIndex);\r\n      const val = parsed && parsed[meta.vScale.axis];\r\n\r\n      if (isNullOrUndef(val) || isNaN(val)) {\r\n        return true;\r\n      }\r\n    };\r\n\r\n    for (const meta of metasets) {\r\n      if (dataIndex !== undefined && skipNull(meta)) {\r\n        continue;\r\n      }\r\n\r\n      // stacked   | meta.stack\r\n      //           | found | not found | undefined\r\n      // false     |   x   |     x     |     x\r\n      // true      |       |     x     |\r\n      // undefined |       |     x     |     x\r\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\r\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\r\n        stacks.push(meta.stack);\r\n      }\r\n      if (meta.index === last) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    // No stacks? that means there is no visible data. Let's still initialize an `undefined`\r\n    // stack where possible invisible bars will be located.\r\n    // https://github.com/chartjs/Chart.js/issues/6368\r\n    if (!stacks.length) {\r\n      stacks.push(undefined);\r\n    }\r\n\r\n    return stacks;\r\n  }\r\n\r\n  /**\r\n\t * Returns the effective number of stacks based on groups and bar visibility.\r\n\t * @private\r\n\t */\r\n  _getStackCount(index) {\r\n    return this._getStacks(undefined, index).length;\r\n  }\r\n\r\n  /**\r\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\r\n\t * @param {number} [datasetIndex] - The dataset index\r\n\t * @param {string} [name] - The stack name to find\r\n   * @param {number} [dataIndex]\r\n\t * @returns {number} The stack index\r\n\t * @private\r\n\t */\r\n  _getStackIndex(datasetIndex, name, dataIndex) {\r\n    const stacks = this._getStacks(datasetIndex, dataIndex);\r\n    const index = (name !== undefined)\r\n      ? stacks.indexOf(name)\r\n      : -1; // indexOf returns -1 if element is not present\r\n\r\n    return (index === -1)\r\n      ? stacks.length - 1\r\n      : index;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getRuler() {\r\n    const opts = this.options;\r\n    const meta = this._cachedMeta;\r\n    const iScale = meta.iScale;\r\n    const pixels = [];\r\n    let i, ilen;\r\n\r\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\r\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\r\n    }\r\n\r\n    const barThickness = opts.barThickness;\r\n    const min = barThickness || computeMinSampleSize(meta);\r\n\r\n    return {\r\n      min,\r\n      pixels,\r\n      start: iScale._startPixel,\r\n      end: iScale._endPixel,\r\n      stackCount: this._getStackCount(),\r\n      scale: iScale,\r\n      grouped: opts.grouped,\r\n      // bar thickness ratio used for non-grouped bars\r\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * Note: pixel values are not clamped to the scale area.\r\n\t * @private\r\n\t */\r\n  _calculateBarValuePixels(index) {\r\n    const {_cachedMeta: {vScale, _stacked}, options: {base: baseValue, minBarLength}} = this;\r\n    const actualBase = baseValue || 0;\r\n    const parsed = this.getParsed(index);\r\n    const custom = parsed._custom;\r\n    const floating = isFloatBar(custom);\r\n    let value = parsed[vScale.axis];\r\n    let start = 0;\r\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\r\n    let head, size;\r\n\r\n    if (length !== value) {\r\n      start = length - value;\r\n      length = value;\r\n    }\r\n\r\n    if (floating) {\r\n      value = custom.barStart;\r\n      length = custom.barEnd - custom.barStart;\r\n      // bars crossing origin are not stacked\r\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\r\n        start = 0;\r\n      }\r\n      start += value;\r\n    }\r\n\r\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\r\n    let base = vScale.getPixelForValue(startValue);\r\n\r\n    if (this.chart.getDataVisibility(index)) {\r\n      head = vScale.getPixelForValue(start + length);\r\n    } else {\r\n      // When not visible, no height\r\n      head = base;\r\n    }\r\n\r\n    size = head - base;\r\n\r\n    if (Math.abs(size) < minBarLength) {\r\n      size = barSign(size, vScale, actualBase) * minBarLength;\r\n      if (value === actualBase) {\r\n        base -= size / 2;\r\n      }\r\n      const startPixel = vScale.getPixelForDecimal(0);\r\n      const endPixel = vScale.getPixelForDecimal(1);\r\n      const min = Math.min(startPixel, endPixel);\r\n      const max = Math.max(startPixel, endPixel);\r\n      base = Math.max(Math.min(base, max), min);\r\n      head = base + size;\r\n    }\r\n\r\n    if (base === vScale.getPixelForValue(actualBase)) {\r\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\r\n      base += halfGrid;\r\n      size -= halfGrid;\r\n    }\r\n\r\n    return {\r\n      size,\r\n      base,\r\n      head,\r\n      center: head + size / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _calculateBarIndexPixels(index, ruler) {\r\n    const scale = ruler.scale;\r\n    const options = this.options;\r\n    const skipNull = options.skipNull;\r\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\r\n    let center, size;\r\n    if (ruler.grouped) {\r\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\r\n      const range = options.barThickness === 'flex'\r\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\r\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\r\n\r\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\r\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\r\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\r\n    } else {\r\n      // For non-grouped bar charts, exact pixel values are used\r\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\r\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\r\n    }\r\n\r\n    return {\r\n      base: center - size / 2,\r\n      head: center + size / 2,\r\n      center,\r\n      size\r\n    };\r\n  }\r\n\r\n  draw() {\r\n    const meta = this._cachedMeta;\r\n    const vScale = meta.vScale;\r\n    const rects = meta.data;\r\n    const ilen = rects.length;\r\n    let i = 0;\r\n\r\n    for (; i < ilen; ++i) {\r\n      if (this.getParsed(i)[vScale.axis] !== null) {\r\n        rects[i].draw(this._ctx);\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","import DatasetController from '../core/core.datasetController';\r\nimport {isObject, resolveObjectKey, toPercentage, toDimension, valueOrDefault} from '../helpers/helpers.core';\r\nimport {formatNumber} from '../helpers/helpers.intl';\r\nimport {toRadians, PI, TAU, HALF_PI, _angleBetween} from '../helpers/helpers.math';\r\n\r\n/**\r\n * @typedef { import(\"../core/core.controller\").default } Chart\r\n */\r\n\r\nfunction getRatioAndOffset(rotation, circumference, cutout) {\r\n  let ratioX = 1;\r\n  let ratioY = 1;\r\n  let offsetX = 0;\r\n  let offsetY = 0;\r\n  // If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\r\n  if (circumference < TAU) {\r\n    const startAngle = rotation;\r\n    const endAngle = startAngle + circumference;\r\n    const startX = Math.cos(startAngle);\r\n    const startY = Math.sin(startAngle);\r\n    const endX = Math.cos(endAngle);\r\n    const endY = Math.sin(endAngle);\r\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\r\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\r\n    const maxX = calcMax(0, startX, endX);\r\n    const maxY = calcMax(HALF_PI, startY, endY);\r\n    const minX = calcMin(PI, startX, endX);\r\n    const minY = calcMin(PI + HALF_PI, startY, endY);\r\n    ratioX = (maxX - minX) / 2;\r\n    ratioY = (maxY - minY) / 2;\r\n    offsetX = -(maxX + minX) / 2;\r\n    offsetY = -(maxY + minY) / 2;\r\n  }\r\n  return {ratioX, ratioY, offsetX, offsetY};\r\n}\r\n\r\nexport default class DoughnutController extends DatasetController {\r\n\r\n  static id = 'doughnut';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    datasetElementType: false,\r\n    dataElementType: 'arc',\r\n    animation: {\r\n      // Boolean - Whether we animate the rotation of the Doughnut\r\n      animateRotate: true,\r\n      // Boolean - Whether we animate scaling the Doughnut from the centre\r\n      animateScale: false\r\n    },\r\n    animations: {\r\n      numbers: {\r\n        type: 'number',\r\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\r\n      },\r\n    },\r\n    // The percentage of the chart that we cut out of the middle.\r\n    cutout: '50%',\r\n\r\n    // The rotation of the chart, where the first data arc begins.\r\n    rotation: 0,\r\n\r\n    // The total circumference of the chart.\r\n    circumference: 360,\r\n\r\n    // The outr radius of the chart\r\n    radius: '100%',\r\n\r\n    // Spacing between arcs\r\n    spacing: 0,\r\n\r\n    indexAxis: 'r',\r\n  };\r\n\r\n  static descriptors = {\r\n    _scriptable: (name) => name !== 'spacing',\r\n    _indexable: (name) => name !== 'spacing',\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static overrides = {\r\n    aspectRatio: 1,\r\n\r\n    // Need to override these to give a nice default\r\n    plugins: {\r\n      legend: {\r\n        labels: {\r\n          generateLabels(chart) {\r\n            const data = chart.data;\r\n            if (data.labels.length && data.datasets.length) {\r\n              const {labels: {pointStyle}} = chart.legend.options;\r\n\r\n              return data.labels.map((label, i) => {\r\n                const meta = chart.getDatasetMeta(0);\r\n                const style = meta.controller.getStyle(i);\r\n\r\n                return {\r\n                  text: label,\r\n                  fillStyle: style.backgroundColor,\r\n                  strokeStyle: style.borderColor,\r\n                  lineWidth: style.borderWidth,\r\n                  pointStyle: pointStyle,\r\n                  hidden: !chart.getDataVisibility(i),\r\n\r\n                  // Extra data used for toggling the correct item\r\n                  index: i\r\n                };\r\n              });\r\n            }\r\n            return [];\r\n          }\r\n        },\r\n\r\n        onClick(e, legendItem, legend) {\r\n          legend.chart.toggleDataVisibility(legendItem.index);\r\n          legend.chart.update();\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  constructor(chart, datasetIndex) {\r\n    super(chart, datasetIndex);\r\n\r\n    this.enableOptionSharing = true;\r\n    this.innerRadius = undefined;\r\n    this.outerRadius = undefined;\r\n    this.offsetX = undefined;\r\n    this.offsetY = undefined;\r\n  }\r\n\r\n  linkScales() {}\r\n\r\n  /**\r\n\t * Override data parsing, since we are not using scales\r\n\t */\r\n  parse(start, count) {\r\n    const data = this.getDataset().data;\r\n    const meta = this._cachedMeta;\r\n\r\n    if (this._parsing === false) {\r\n      meta._parsed = data;\r\n    } else {\r\n      let getter = (i) => +data[i];\r\n\r\n      if (isObject(data[start])) {\r\n        const {key = 'value'} = this._parsing;\r\n        getter = (i) => +resolveObjectKey(data[i], key);\r\n      }\r\n\r\n      let i, ilen;\r\n      for (i = start, ilen = start + count; i < ilen; ++i) {\r\n        meta._parsed[i] = getter(i);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getRotation() {\r\n    return toRadians(this.options.rotation - 90);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getCircumference() {\r\n    return toRadians(this.options.circumference);\r\n  }\r\n\r\n  /**\r\n\t * Get the maximal rotation & circumference extents\r\n\t * across all visible datasets.\r\n\t */\r\n  _getRotationExtents() {\r\n    let min = TAU;\r\n    let max = -TAU;\r\n\r\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\r\n      if (this.chart.isDatasetVisible(i)) {\r\n        const controller = this.chart.getDatasetMeta(i).controller;\r\n        const rotation = controller._getRotation();\r\n        const circumference = controller._getCircumference();\r\n\r\n        min = Math.min(min, rotation);\r\n        max = Math.max(max, rotation + circumference);\r\n      }\r\n    }\r\n\r\n    return {\r\n      rotation: min,\r\n      circumference: max - min,\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * @param {string} mode\r\n\t */\r\n  update(mode) {\r\n    const chart = this.chart;\r\n    const {chartArea} = chart;\r\n    const meta = this._cachedMeta;\r\n    const arcs = meta.data;\r\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\r\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\r\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\r\n    const chartWeight = this._getRingWeight(this.index);\r\n\r\n    // Compute the maximal rotation & circumference limits.\r\n    // If we only consider our dataset, this can cause problems when two datasets\r\n    // are both less than a circle with different rotations (starting angles)\r\n    const {circumference, rotation} = this._getRotationExtents();\r\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\r\n    const maxWidth = (chartArea.width - spacing) / ratioX;\r\n    const maxHeight = (chartArea.height - spacing) / ratioY;\r\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\r\n    const outerRadius = toDimension(this.options.radius, maxRadius);\r\n    const innerRadius = Math.max(outerRadius * cutout, 0);\r\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\r\n    this.offsetX = offsetX * outerRadius;\r\n    this.offsetY = offsetY * outerRadius;\r\n\r\n    meta.total = this.calculateTotal();\r\n\r\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\r\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\r\n\r\n    this.updateElements(arcs, 0, arcs.length, mode);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _circumference(i, reset) {\r\n    const opts = this.options;\r\n    const meta = this._cachedMeta;\r\n    const circumference = this._getCircumference();\r\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\r\n      return 0;\r\n    }\r\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\r\n  }\r\n\r\n  updateElements(arcs, start, count, mode) {\r\n    const reset = mode === 'reset';\r\n    const chart = this.chart;\r\n    const chartArea = chart.chartArea;\r\n    const opts = chart.options;\r\n    const animationOpts = opts.animation;\r\n    const centerX = (chartArea.left + chartArea.right) / 2;\r\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\r\n    const animateScale = reset && animationOpts.animateScale;\r\n    const innerRadius = animateScale ? 0 : this.innerRadius;\r\n    const outerRadius = animateScale ? 0 : this.outerRadius;\r\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\r\n    let startAngle = this._getRotation();\r\n    let i;\r\n\r\n    for (i = 0; i < start; ++i) {\r\n      startAngle += this._circumference(i, reset);\r\n    }\r\n\r\n    for (i = start; i < start + count; ++i) {\r\n      const circumference = this._circumference(i, reset);\r\n      const arc = arcs[i];\r\n      const properties = {\r\n        x: centerX + this.offsetX,\r\n        y: centerY + this.offsetY,\r\n        startAngle,\r\n        endAngle: startAngle + circumference,\r\n        circumference,\r\n        outerRadius,\r\n        innerRadius\r\n      };\r\n      if (includeOptions) {\r\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\r\n      }\r\n      startAngle += circumference;\r\n\r\n      this.updateElement(arc, i, properties, mode);\r\n    }\r\n  }\r\n\r\n  calculateTotal() {\r\n    const meta = this._cachedMeta;\r\n    const metaData = meta.data;\r\n    let total = 0;\r\n    let i;\r\n\r\n    for (i = 0; i < metaData.length; i++) {\r\n      const value = meta._parsed[i];\r\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\r\n        total += Math.abs(value);\r\n      }\r\n    }\r\n\r\n    return total;\r\n  }\r\n\r\n  calculateCircumference(value) {\r\n    const total = this._cachedMeta.total;\r\n    if (total > 0 && !isNaN(value)) {\r\n      return TAU * (Math.abs(value) / total);\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  getLabelAndValue(index) {\r\n    const meta = this._cachedMeta;\r\n    const chart = this.chart;\r\n    const labels = chart.data.labels || [];\r\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\r\n\r\n    return {\r\n      label: labels[index] || '',\r\n      value,\r\n    };\r\n  }\r\n\r\n  getMaxBorderWidth(arcs) {\r\n    let max = 0;\r\n    const chart = this.chart;\r\n    let i, ilen, meta, controller, options;\r\n\r\n    if (!arcs) {\r\n      // Find the outmost visible dataset\r\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\r\n        if (chart.isDatasetVisible(i)) {\r\n          meta = chart.getDatasetMeta(i);\r\n          arcs = meta.data;\r\n          controller = meta.controller;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!arcs) {\r\n      return 0;\r\n    }\r\n\r\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\r\n      options = controller.resolveDataElementOptions(i);\r\n      if (options.borderAlign !== 'inner') {\r\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\r\n      }\r\n    }\r\n    return max;\r\n  }\r\n\r\n  getMaxOffset(arcs) {\r\n    let max = 0;\r\n\r\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\r\n      const options = this.resolveDataElementOptions(i);\r\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\r\n    }\r\n    return max;\r\n  }\r\n\r\n  /**\r\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\r\n\t * @private\r\n\t */\r\n  _getRingWeightOffset(datasetIndex) {\r\n    let ringWeightOffset = 0;\r\n\r\n    for (let i = 0; i < datasetIndex; ++i) {\r\n      if (this.chart.isDatasetVisible(i)) {\r\n        ringWeightOffset += this._getRingWeight(i);\r\n      }\r\n    }\r\n\r\n    return ringWeightOffset;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getRingWeight(datasetIndex) {\r\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\r\n  }\r\n\r\n  /**\r\n\t * Returns the sum of all visible data set weights.\r\n\t * @private\r\n\t */\r\n  _getVisibleDatasetWeightTotal() {\r\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\r\n  }\r\n}\r\n","import DatasetController from '../core/core.datasetController';\r\nimport {valueOrDefault} from '../helpers/helpers.core';\r\n\r\nexport default class BubbleController extends DatasetController {\r\n\r\n  static id = 'bubble';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    datasetElementType: false,\r\n    dataElementType: 'point',\r\n\r\n    animations: {\r\n      numbers: {\r\n        type: 'number',\r\n        properties: ['x', 'y', 'borderWidth', 'radius']\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static overrides = {\r\n    scales: {\r\n      x: {\r\n        type: 'linear'\r\n      },\r\n      y: {\r\n        type: 'linear'\r\n      }\r\n    }\r\n  };\r\n\r\n  initialize() {\r\n    this.enableOptionSharing = true;\r\n    super.initialize();\r\n  }\r\n\r\n  /**\r\n\t * Parse array of primitive values\r\n\t * @protected\r\n\t */\r\n  parsePrimitiveData(meta, data, start, count) {\r\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\r\n    for (let i = 0; i < parsed.length; i++) {\r\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\r\n    }\r\n    return parsed;\r\n  }\r\n\r\n  /**\r\n\t * Parse array of arrays\r\n\t * @protected\r\n\t */\r\n  parseArrayData(meta, data, start, count) {\r\n    const parsed = super.parseArrayData(meta, data, start, count);\r\n    for (let i = 0; i < parsed.length; i++) {\r\n      const item = data[start + i];\r\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\r\n    }\r\n    return parsed;\r\n  }\r\n\r\n  /**\r\n\t * Parse array of objects\r\n\t * @protected\r\n\t */\r\n  parseObjectData(meta, data, start, count) {\r\n    const parsed = super.parseObjectData(meta, data, start, count);\r\n    for (let i = 0; i < parsed.length; i++) {\r\n      const item = data[start + i];\r\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\r\n    }\r\n    return parsed;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getMaxOverflow() {\r\n    const data = this._cachedMeta.data;\r\n\r\n    let max = 0;\r\n    for (let i = data.length - 1; i >= 0; --i) {\r\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\r\n    }\r\n    return max > 0 && max;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getLabelAndValue(index) {\r\n    const meta = this._cachedMeta;\r\n    const labels = this.chart.data.labels || [];\r\n    const {xScale, yScale} = meta;\r\n    const parsed = this.getParsed(index);\r\n    const x = xScale.getLabelForValue(parsed.x);\r\n    const y = yScale.getLabelForValue(parsed.y);\r\n    const r = parsed._custom;\r\n\r\n    return {\r\n      label: labels[index] || '',\r\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\r\n    };\r\n  }\r\n\r\n  update(mode) {\r\n    const points = this._cachedMeta.data;\r\n\r\n    // Update Points\r\n    this.updateElements(points, 0, points.length, mode);\r\n  }\r\n\r\n  updateElements(points, start, count, mode) {\r\n    const reset = mode === 'reset';\r\n    const {iScale, vScale} = this._cachedMeta;\r\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\r\n    const iAxis = iScale.axis;\r\n    const vAxis = vScale.axis;\r\n\r\n    for (let i = start; i < start + count; i++) {\r\n      const point = points[i];\r\n      const parsed = !reset && this.getParsed(i);\r\n      const properties = {};\r\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\r\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\r\n\r\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\r\n\r\n      if (includeOptions) {\r\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\r\n\r\n        if (reset) {\r\n          properties.options.radius = 0;\r\n        }\r\n      }\r\n\r\n      this.updateElement(point, i, properties, mode);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @param {number} index\r\n\t * @param {string} [mode]\r\n\t * @protected\r\n\t */\r\n  resolveDataElementOptions(index, mode) {\r\n    const parsed = this.getParsed(index);\r\n    let values = super.resolveDataElementOptions(index, mode);\r\n\r\n    // In case values were cached (and thus frozen), we need to clone the values\r\n    if (values.$shared) {\r\n      values = Object.assign({}, values, {$shared: false});\r\n    }\r\n\r\n    // Custom radius resolution\r\n    const radius = values.radius;\r\n    if (mode !== 'active') {\r\n      values.radius = 0;\r\n    }\r\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\r\n\r\n    return values;\r\n  }\r\n}\r\n","import DatasetController from '../core/core.datasetController';\r\nimport {isNullOrUndef} from '../helpers';\r\nimport {isNumber} from '../helpers/helpers.math';\r\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras';\r\n\r\nexport default class LineController extends DatasetController {\r\n\r\n  static id = 'line';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    datasetElementType: 'line',\r\n    dataElementType: 'point',\r\n\r\n    showLine: true,\r\n    spanGaps: false,\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static overrides = {\r\n    scales: {\r\n      _index_: {\r\n        type: 'category',\r\n      },\r\n      _value_: {\r\n        type: 'linear',\r\n      },\r\n    }\r\n  };\r\n\r\n  initialize() {\r\n    this.enableOptionSharing = true;\r\n    this.supportsDecimation = true;\r\n    super.initialize();\r\n  }\r\n\r\n  update(mode) {\r\n    const meta = this._cachedMeta;\r\n    const {dataset: line, data: points = [], _dataset} = meta;\r\n    // @ts-ignore\r\n    const animationsDisabled = this.chart._animationsDisabled;\r\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\r\n\r\n    this._drawStart = start;\r\n    this._drawCount = count;\r\n\r\n    if (_scaleRangesChanged(meta)) {\r\n      start = 0;\r\n      count = points.length;\r\n    }\r\n\r\n    // Update Line\r\n    line._chart = this.chart;\r\n    line._datasetIndex = this.index;\r\n    line._decimated = !!_dataset._decimated;\r\n    line.points = points;\r\n\r\n    const options = this.resolveDatasetElementOptions(mode);\r\n    if (!this.options.showLine) {\r\n      options.borderWidth = 0;\r\n    }\r\n    options.segment = this.options.segment;\r\n    this.updateElement(line, undefined, {\r\n      animated: !animationsDisabled,\r\n      options\r\n    }, mode);\r\n\r\n    // Update Points\r\n    this.updateElements(points, start, count, mode);\r\n  }\r\n\r\n  updateElements(points, start, count, mode) {\r\n    const reset = mode === 'reset';\r\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\r\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\r\n    const iAxis = iScale.axis;\r\n    const vAxis = vScale.axis;\r\n    const {spanGaps, segment} = this.options;\r\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\r\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\r\n    const end = start + count;\r\n    const pointsCount = points.length;\r\n    let prevParsed = start > 0 && this.getParsed(start - 1);\r\n\r\n    for (let i = 0; i < pointsCount; ++i) {\r\n      const point = points[i];\r\n      const properties = directUpdate ? point : {};\r\n\r\n      if (i < start || i >= end) {\r\n        properties.skip = true;\r\n        continue;\r\n      }\r\n\r\n      const parsed = this.getParsed(i);\r\n      const nullData = isNullOrUndef(parsed[vAxis]);\r\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\r\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\r\n\r\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\r\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\r\n      if (segment) {\r\n        properties.parsed = parsed;\r\n        properties.raw = _dataset.data[i];\r\n      }\r\n\r\n      if (includeOptions) {\r\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\r\n      }\r\n\r\n      if (!directUpdate) {\r\n        this.updateElement(point, i, properties, mode);\r\n      }\r\n\r\n      prevParsed = parsed;\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getMaxOverflow() {\r\n    const meta = this._cachedMeta;\r\n    const dataset = meta.dataset;\r\n    const border = dataset.options && dataset.options.borderWidth || 0;\r\n    const data = meta.data || [];\r\n    if (!data.length) {\r\n      return border;\r\n    }\r\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\r\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\r\n    return Math.max(border, firstPoint, lastPoint) / 2;\r\n  }\r\n\r\n  draw() {\r\n    const meta = this._cachedMeta;\r\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\r\n    super.draw();\r\n  }\r\n}\r\n","import DatasetController from '../core/core.datasetController';\r\nimport {toRadians, PI, formatNumber, _parseObjectDataRadialScale} from '../helpers/index';\r\n\r\nexport default class PolarAreaController extends DatasetController {\r\n\r\n  static id = 'polarArea';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    dataElementType: 'arc',\r\n    animation: {\r\n      animateRotate: true,\r\n      animateScale: true\r\n    },\r\n    animations: {\r\n      numbers: {\r\n        type: 'number',\r\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\r\n      },\r\n    },\r\n    indexAxis: 'r',\r\n    startAngle: 0,\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static overrides = {\r\n    aspectRatio: 1,\r\n\r\n    plugins: {\r\n      legend: {\r\n        labels: {\r\n          generateLabels(chart) {\r\n            const data = chart.data;\r\n            if (data.labels.length && data.datasets.length) {\r\n              const {labels: {pointStyle}} = chart.legend.options;\r\n\r\n              return data.labels.map((label, i) => {\r\n                const meta = chart.getDatasetMeta(0);\r\n                const style = meta.controller.getStyle(i);\r\n\r\n                return {\r\n                  text: label,\r\n                  fillStyle: style.backgroundColor,\r\n                  strokeStyle: style.borderColor,\r\n                  lineWidth: style.borderWidth,\r\n                  pointStyle: pointStyle,\r\n                  hidden: !chart.getDataVisibility(i),\r\n\r\n                  // Extra data used for toggling the correct item\r\n                  index: i\r\n                };\r\n              });\r\n            }\r\n            return [];\r\n          }\r\n        },\r\n\r\n        onClick(e, legendItem, legend) {\r\n          legend.chart.toggleDataVisibility(legendItem.index);\r\n          legend.chart.update();\r\n        }\r\n      }\r\n    },\r\n\r\n    scales: {\r\n      r: {\r\n        type: 'radialLinear',\r\n        angleLines: {\r\n          display: false\r\n        },\r\n        beginAtZero: true,\r\n        grid: {\r\n          circular: true\r\n        },\r\n        pointLabels: {\r\n          display: false\r\n        },\r\n        startAngle: 0\r\n      }\r\n    }\r\n  };\r\n\r\n  constructor(chart, datasetIndex) {\r\n    super(chart, datasetIndex);\r\n\r\n    this.innerRadius = undefined;\r\n    this.outerRadius = undefined;\r\n  }\r\n\r\n  getLabelAndValue(index) {\r\n    const meta = this._cachedMeta;\r\n    const chart = this.chart;\r\n    const labels = chart.data.labels || [];\r\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\r\n\r\n    return {\r\n      label: labels[index] || '',\r\n      value,\r\n    };\r\n  }\r\n\r\n  parseObjectData(meta, data, start, count) {\r\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\r\n  }\r\n\r\n  update(mode) {\r\n    const arcs = this._cachedMeta.data;\r\n\r\n    this._updateRadius();\r\n    this.updateElements(arcs, 0, arcs.length, mode);\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  getMinMax() {\r\n    const meta = this._cachedMeta;\r\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\r\n\r\n    meta.data.forEach((element, index) => {\r\n      const parsed = this.getParsed(index).r;\r\n\r\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\r\n        if (parsed < range.min) {\r\n          range.min = parsed;\r\n        }\r\n\r\n        if (parsed > range.max) {\r\n          range.max = parsed;\r\n        }\r\n      }\r\n    });\r\n\r\n    return range;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _updateRadius() {\r\n    const chart = this.chart;\r\n    const chartArea = chart.chartArea;\r\n    const opts = chart.options;\r\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\r\n\r\n    const outerRadius = Math.max(minSize / 2, 0);\r\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\r\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\r\n\r\n    this.outerRadius = outerRadius - (radiusLength * this.index);\r\n    this.innerRadius = this.outerRadius - radiusLength;\r\n  }\r\n\r\n  updateElements(arcs, start, count, mode) {\r\n    const reset = mode === 'reset';\r\n    const chart = this.chart;\r\n    const opts = chart.options;\r\n    const animationOpts = opts.animation;\r\n    const scale = this._cachedMeta.rScale;\r\n    const centerX = scale.xCenter;\r\n    const centerY = scale.yCenter;\r\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\r\n    let angle = datasetStartAngle;\r\n    let i;\r\n\r\n    const defaultAngle = 360 / this.countVisibleElements();\r\n\r\n    for (i = 0; i < start; ++i) {\r\n      angle += this._computeAngle(i, mode, defaultAngle);\r\n    }\r\n    for (i = start; i < start + count; i++) {\r\n      const arc = arcs[i];\r\n      let startAngle = angle;\r\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\r\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\r\n      angle = endAngle;\r\n\r\n      if (reset) {\r\n        if (animationOpts.animateScale) {\r\n          outerRadius = 0;\r\n        }\r\n        if (animationOpts.animateRotate) {\r\n          startAngle = endAngle = datasetStartAngle;\r\n        }\r\n      }\r\n\r\n      const properties = {\r\n        x: centerX,\r\n        y: centerY,\r\n        innerRadius: 0,\r\n        outerRadius,\r\n        startAngle,\r\n        endAngle,\r\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\r\n      };\r\n\r\n      this.updateElement(arc, i, properties, mode);\r\n    }\r\n  }\r\n\r\n  countVisibleElements() {\r\n    const meta = this._cachedMeta;\r\n    let count = 0;\r\n\r\n    meta.data.forEach((element, index) => {\r\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\r\n        count++;\r\n      }\r\n    });\r\n\r\n    return count;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _computeAngle(index, mode, defaultAngle) {\r\n    return this.chart.getDataVisibility(index)\r\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\r\n      : 0;\r\n  }\r\n}\r\n","import DoughnutController from './controller.doughnut';\r\n\r\n// Pie charts are Doughnut chart with different defaults\r\nexport default class PieController extends DoughnutController {\r\n\r\n  static id = 'pie';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    // The percentage of the chart that we cut out of the middle.\r\n    cutout: 0,\r\n\r\n    // The rotation of the chart, where the first data arc begins.\r\n    rotation: 0,\r\n\r\n    // The total circumference of the chart.\r\n    circumference: 360,\r\n\r\n    // The outr radius of the chart\r\n    radius: '100%'\r\n  };\r\n}\r\n","import DatasetController from '../core/core.datasetController';\r\nimport {_parseObjectDataRadialScale} from '../helpers/index';\r\n\r\nexport default class RadarController extends DatasetController {\r\n\r\n  static id = 'radar';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    datasetElementType: 'line',\r\n    dataElementType: 'point',\r\n    indexAxis: 'r',\r\n    showLine: true,\r\n    elements: {\r\n      line: {\r\n        fill: 'start'\r\n      }\r\n    },\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static overrides = {\r\n    aspectRatio: 1,\r\n\r\n    scales: {\r\n      r: {\r\n        type: 'radialLinear',\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getLabelAndValue(index) {\r\n    const vScale = this._cachedMeta.vScale;\r\n    const parsed = this.getParsed(index);\r\n\r\n    return {\r\n      label: vScale.getLabels()[index],\r\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\r\n    };\r\n  }\r\n\r\n  parseObjectData(meta, data, start, count) {\r\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\r\n  }\r\n\r\n  update(mode) {\r\n    const meta = this._cachedMeta;\r\n    const line = meta.dataset;\r\n    const points = meta.data || [];\r\n    const labels = meta.iScale.getLabels();\r\n\r\n    // Update Line\r\n    line.points = points;\r\n    // In resize mode only point locations change, so no need to set the points or options.\r\n    if (mode !== 'resize') {\r\n      const options = this.resolveDatasetElementOptions(mode);\r\n      if (!this.options.showLine) {\r\n        options.borderWidth = 0;\r\n      }\r\n\r\n      const properties = {\r\n        _loop: true,\r\n        _fullLoop: labels.length === points.length,\r\n        options\r\n      };\r\n\r\n      this.updateElement(line, undefined, properties, mode);\r\n    }\r\n\r\n    // Update Points\r\n    this.updateElements(points, 0, points.length, mode);\r\n  }\r\n\r\n  updateElements(points, start, count, mode) {\r\n    const scale = this._cachedMeta.rScale;\r\n    const reset = mode === 'reset';\r\n\r\n    for (let i = start; i < start + count; i++) {\r\n      const point = points[i];\r\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\r\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\r\n\r\n      const x = reset ? scale.xCenter : pointPosition.x;\r\n      const y = reset ? scale.yCenter : pointPosition.y;\r\n\r\n      const properties = {\r\n        x,\r\n        y,\r\n        angle: pointPosition.angle,\r\n        skip: isNaN(x) || isNaN(y),\r\n        options\r\n      };\r\n\r\n      this.updateElement(point, i, properties, mode);\r\n    }\r\n  }\r\n}\r\n","import DatasetController from '../core/core.datasetController';\r\nimport {isNullOrUndef} from '../helpers';\r\nimport {isNumber} from '../helpers/helpers.math';\r\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras';\r\n\r\nexport default class ScatterController extends DatasetController {\r\n\r\n  static id = 'scatter';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    datasetElementType: false,\r\n    dataElementType: 'point',\r\n    showLine: false,\r\n    fill: false\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static overrides = {\r\n\r\n    interaction: {\r\n      mode: 'point'\r\n    },\r\n\r\n    scales: {\r\n      x: {\r\n        type: 'linear'\r\n      },\r\n      y: {\r\n        type: 'linear'\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getLabelAndValue(index) {\r\n    const meta = this._cachedMeta;\r\n    const labels = this.chart.data.labels || [];\r\n    const {xScale, yScale} = meta;\r\n    const parsed = this.getParsed(index);\r\n    const x = xScale.getLabelForValue(parsed.x);\r\n    const y = yScale.getLabelForValue(parsed.y);\r\n\r\n    return {\r\n      label: labels[index] || '',\r\n      value: '(' + x + ', ' + y + ')'\r\n    };\r\n  }\r\n\r\n  update(mode) {\r\n    const meta = this._cachedMeta;\r\n    const {data: points = []} = meta;\r\n    // @ts-ignore\r\n    const animationsDisabled = this.chart._animationsDisabled;\r\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\r\n\r\n    this._drawStart = start;\r\n    this._drawCount = count;\r\n\r\n    if (_scaleRangesChanged(meta)) {\r\n      start = 0;\r\n      count = points.length;\r\n    }\r\n\r\n    if (this.options.showLine) {\r\n\r\n      const {dataset: line, _dataset} = meta;\r\n\r\n      // Update Line\r\n      line._chart = this.chart;\r\n      line._datasetIndex = this.index;\r\n      line._decimated = !!_dataset._decimated;\r\n      line.points = points;\r\n\r\n      const options = this.resolveDatasetElementOptions(mode);\r\n      options.segment = this.options.segment;\r\n      this.updateElement(line, undefined, {\r\n        animated: !animationsDisabled,\r\n        options\r\n      }, mode);\r\n    }\r\n\r\n    // Update Points\r\n    this.updateElements(points, start, count, mode);\r\n  }\r\n\r\n  addElements() {\r\n    const {showLine} = this.options;\r\n\r\n    if (!this.datasetElementType && showLine) {\r\n      this.datasetElementType = this.chart.registry.getElement('line');\r\n    }\r\n\r\n    super.addElements();\r\n  }\r\n\r\n  updateElements(points, start, count, mode) {\r\n    const reset = mode === 'reset';\r\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\r\n    const firstOpts = this.resolveDataElementOptions(start, mode);\r\n    const sharedOptions = this.getSharedOptions(firstOpts);\r\n    const includeOptions = this.includeOptions(mode, sharedOptions);\r\n    const iAxis = iScale.axis;\r\n    const vAxis = vScale.axis;\r\n    const {spanGaps, segment} = this.options;\r\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\r\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\r\n    let prevParsed = start > 0 && this.getParsed(start - 1);\r\n\r\n    for (let i = start; i < start + count; ++i) {\r\n      const point = points[i];\r\n      const parsed = this.getParsed(i);\r\n      const properties = directUpdate ? point : {};\r\n      const nullData = isNullOrUndef(parsed[vAxis]);\r\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\r\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\r\n\r\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\r\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\r\n      if (segment) {\r\n        properties.parsed = parsed;\r\n        properties.raw = _dataset.data[i];\r\n      }\r\n\r\n      if (includeOptions) {\r\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\r\n      }\r\n\r\n      if (!directUpdate) {\r\n        this.updateElement(point, i, properties, mode);\r\n      }\r\n\r\n      prevParsed = parsed;\r\n    }\r\n\r\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getMaxOverflow() {\r\n    const meta = this._cachedMeta;\r\n    const data = meta.data || [];\r\n\r\n    if (!this.options.showLine) {\r\n      let max = 0;\r\n      for (let i = data.length - 1; i >= 0; --i) {\r\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\r\n      }\r\n      return max > 0 && max;\r\n    }\r\n\r\n    const dataset = meta.dataset;\r\n    const border = dataset.options && dataset.options.borderWidth || 0;\r\n\r\n    if (!data.length) {\r\n      return border;\r\n    }\r\n\r\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\r\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\r\n    return Math.max(border, firstPoint, lastPoint) / 2;\r\n  }\r\n}\r\n","import Element from '../core/core.element';\r\nimport {_angleBetween, getAngleFromPoint, TAU, HALF_PI, valueOrDefault} from '../helpers/index';\r\nimport {PI, _isBetween, _limitValue} from '../helpers/helpers.math';\r\nimport {_readValueToProps} from '../helpers/helpers.options';\r\n\r\n/** @typedef {{ x: number, y: number, startAngle: number, endAngle: number, innerRadius: number, outerRadius: number, circumference: number }} ArcProps */\r\n/** @typedef {import('../../types/geometric').Point} Point */\r\n\r\nfunction clipArc(ctx, element, endAngle) {\r\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\r\n  let angleMargin = pixelMargin / outerRadius;\r\n\r\n  // Draw an inner border by clipping the arc and drawing a double-width border\r\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\r\n  ctx.beginPath();\r\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\r\n  if (innerRadius > pixelMargin) {\r\n    angleMargin = pixelMargin / innerRadius;\r\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\r\n  } else {\r\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\r\n  }\r\n  ctx.closePath();\r\n  ctx.clip();\r\n}\r\n\r\nfunction toRadiusCorners(value) {\r\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\r\n}\r\n\r\n/**\r\n * Parse border radius from the provided options\r\n * @param {ArcElement} arc\r\n * @param {number} innerRadius\r\n * @param {number} outerRadius\r\n * @param {number} angleDelta Arc circumference in radians\r\n * @returns\r\n */\r\nfunction parseBorderRadius(arc, innerRadius, outerRadius, angleDelta) {\r\n  const o = toRadiusCorners(arc.options.borderRadius);\r\n  const halfThickness = (outerRadius - innerRadius) / 2;\r\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\r\n\r\n  // Outer limits are complicated. We want to compute the available angular distance at\r\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\r\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\r\n  //\r\n  // If the borderRadius is large, that value can become negative.\r\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\r\n  // we know that the thickness term will dominate and compute the limits at that point\r\n  const computeOuterLimit = (val) => {\r\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\r\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\r\n  };\r\n\r\n  return {\r\n    outerStart: computeOuterLimit(o.outerStart),\r\n    outerEnd: computeOuterLimit(o.outerEnd),\r\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\r\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\r\n  };\r\n}\r\n\r\n/**\r\n * Convert (r, 𝜃) to (x, y)\r\n * @param {number} r Radius from center point\r\n * @param {number} theta Angle in radians\r\n * @param {number} x Center X coordinate\r\n * @param {number} y Center Y coordinate\r\n * @returns {{ x: number; y: number }} Rectangular coordinate point\r\n */\r\nfunction rThetaToXY(r, theta, x, y) {\r\n  return {\r\n    x: x + r * Math.cos(theta),\r\n    y: y + r * Math.sin(theta),\r\n  };\r\n}\r\n\r\n\r\n/**\r\n * Path the arc, respecting the border radius\r\n *\r\n * 8 points of interest exist around the arc segment.\r\n * These points define the intersection of the arc edges and the corners.\r\n *\r\n *   Start      End\r\n *\r\n *    1---------2    Outer\r\n *   /           \\\r\n *   8           3\r\n *   |           |\r\n *   |           |\r\n *   7           4\r\n *   \\           /\r\n *    6---------5    Inner\r\n * @param {CanvasRenderingContext2D} ctx\r\n * @param {ArcElement} element\r\n */\r\nfunction pathArc(ctx, element, offset, spacing, end, circular) {\r\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\r\n\r\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\r\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\r\n\r\n  let spacingOffset = 0;\r\n  const alpha = end - start;\r\n\r\n  if (spacing) {\r\n    // When spacing is present, it is the same for all items\r\n    // So we adjust the start and end angle of the arc such that\r\n    // the distance is the same as it would be without the spacing\r\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\r\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\r\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\r\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\r\n    spacingOffset = (alpha - adjustedAngle) / 2;\r\n  }\r\n\r\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\r\n  const angleOffset = (alpha - beta) / 2;\r\n  const startAngle = start + angleOffset + spacingOffset;\r\n  const endAngle = end - angleOffset - spacingOffset;\r\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius(element, innerRadius, outerRadius, endAngle - startAngle);\r\n\r\n  const outerStartAdjustedRadius = outerRadius - outerStart;\r\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\r\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\r\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\r\n\r\n  const innerStartAdjustedRadius = innerRadius + innerStart;\r\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\r\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\r\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\r\n\r\n  ctx.beginPath();\r\n\r\n  if (circular) {\r\n    // The first arc segment from point 1 to point 2\r\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerEndAdjustedAngle);\r\n\r\n    // The corner segment from point 2 to point 3\r\n    if (outerEnd > 0) {\r\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\r\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\r\n    }\r\n\r\n    // The line from point 3 to point 4\r\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\r\n    ctx.lineTo(p4.x, p4.y);\r\n\r\n    // The corner segment from point 4 to point 5\r\n    if (innerEnd > 0) {\r\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\r\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\r\n    }\r\n\r\n    // The inner arc from point 5 to point 6\r\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), startAngle + (innerStart / innerRadius), true);\r\n\r\n    // The corner segment from point 6 to point 7\r\n    if (innerStart > 0) {\r\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\r\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\r\n    }\r\n\r\n    // The line from point 7 to point 8\r\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\r\n    ctx.lineTo(p8.x, p8.y);\r\n\r\n    // The corner segment from point 8 to point 1\r\n    if (outerStart > 0) {\r\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\r\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\r\n    }\r\n  } else {\r\n    ctx.moveTo(x, y);\r\n\r\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\r\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\r\n    ctx.lineTo(outerStartX, outerStartY);\r\n\r\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\r\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\r\n    ctx.lineTo(outerEndX, outerEndY);\r\n  }\r\n\r\n  ctx.closePath();\r\n}\r\n\r\nfunction drawArc(ctx, element, offset, spacing, circular) {\r\n  const {fullCircles, startAngle, circumference} = element;\r\n  let endAngle = element.endAngle;\r\n  if (fullCircles) {\r\n    pathArc(ctx, element, offset, spacing, startAngle + TAU, circular);\r\n\r\n    for (let i = 0; i < fullCircles; ++i) {\r\n      ctx.fill();\r\n    }\r\n\r\n    if (!isNaN(circumference)) {\r\n      endAngle = startAngle + circumference % TAU;\r\n      if (circumference % TAU === 0) {\r\n        endAngle += TAU;\r\n      }\r\n    }\r\n  }\r\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\r\n  ctx.fill();\r\n  return endAngle;\r\n}\r\n\r\nfunction drawFullCircleBorders(ctx, element, inner) {\r\n  const {x, y, startAngle, pixelMargin, fullCircles} = element;\r\n  const outerRadius = Math.max(element.outerRadius - pixelMargin, 0);\r\n  const innerRadius = element.innerRadius + pixelMargin;\r\n\r\n  let i;\r\n\r\n  if (inner) {\r\n    clipArc(ctx, element, startAngle + TAU);\r\n  }\r\n\r\n  ctx.beginPath();\r\n  ctx.arc(x, y, innerRadius, startAngle + TAU, startAngle, true);\r\n  for (i = 0; i < fullCircles; ++i) {\r\n    ctx.stroke();\r\n  }\r\n\r\n  ctx.beginPath();\r\n  ctx.arc(x, y, outerRadius, startAngle, startAngle + TAU);\r\n  for (i = 0; i < fullCircles; ++i) {\r\n    ctx.stroke();\r\n  }\r\n}\r\n\r\nfunction drawBorder(ctx, element, offset, spacing, endAngle, circular) {\r\n  const {options} = element;\r\n  const {borderWidth, borderJoinStyle} = options;\r\n  const inner = options.borderAlign === 'inner';\r\n\r\n  if (!borderWidth) {\r\n    return;\r\n  }\r\n\r\n  if (inner) {\r\n    ctx.lineWidth = borderWidth * 2;\r\n    ctx.lineJoin = borderJoinStyle || 'round';\r\n  } else {\r\n    ctx.lineWidth = borderWidth;\r\n    ctx.lineJoin = borderJoinStyle || 'bevel';\r\n  }\r\n\r\n  if (element.fullCircles) {\r\n    drawFullCircleBorders(ctx, element, inner);\r\n  }\r\n\r\n  if (inner) {\r\n    clipArc(ctx, element, endAngle);\r\n  }\r\n\r\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\r\n  ctx.stroke();\r\n}\r\n\r\nexport default class ArcElement extends Element {\r\n\r\n  static id = 'arc';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    borderAlign: 'center',\r\n    borderColor: '#fff',\r\n    borderJoinStyle: undefined,\r\n    borderRadius: 0,\r\n    borderWidth: 2,\r\n    offset: 0,\r\n    spacing: 0,\r\n    angle: undefined,\r\n    circular: true,\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaultRoutes = {\r\n    backgroundColor: 'backgroundColor'\r\n  };\r\n\r\n  constructor(cfg) {\r\n    super();\r\n\r\n    this.options = undefined;\r\n    this.circumference = undefined;\r\n    this.startAngle = undefined;\r\n    this.endAngle = undefined;\r\n    this.innerRadius = undefined;\r\n    this.outerRadius = undefined;\r\n    this.pixelMargin = 0;\r\n    this.fullCircles = 0;\r\n\r\n    if (cfg) {\r\n      Object.assign(this, cfg);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @param {number} chartX\r\n\t * @param {number} chartY\r\n\t * @param {boolean} [useFinalPosition]\r\n\t */\r\n  inRange(chartX, chartY, useFinalPosition) {\r\n    const point = /** @type {Point} */ (this.getProps(['x', 'y'], useFinalPosition));\r\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\r\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = /** @type {ArcProps} */ (this.getProps([\r\n      'startAngle',\r\n      'endAngle',\r\n      'innerRadius',\r\n      'outerRadius',\r\n      'circumference'\r\n    ], useFinalPosition));\r\n    const rAdjust = this.options.spacing / 2;\r\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\r\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\r\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\r\n\r\n    return (betweenAngles && withinRadius);\r\n  }\r\n\r\n  /**\r\n\t * @param {boolean} [useFinalPosition]\r\n\t */\r\n  getCenterPoint(useFinalPosition) {\r\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = /** @type {ArcProps} */ (this.getProps([\r\n      'x',\r\n      'y',\r\n      'startAngle',\r\n      'endAngle',\r\n      'innerRadius',\r\n      'outerRadius',\r\n      'circumference',\r\n    ], useFinalPosition));\r\n    const {offset, spacing} = this.options;\r\n    const halfAngle = (startAngle + endAngle) / 2;\r\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\r\n    return {\r\n      x: x + Math.cos(halfAngle) * halfRadius,\r\n      y: y + Math.sin(halfAngle) * halfRadius\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * @param {boolean} [useFinalPosition]\r\n\t */\r\n  tooltipPosition(useFinalPosition) {\r\n    return this.getCenterPoint(useFinalPosition);\r\n  }\r\n\r\n  draw(ctx) {\r\n    const {options, circumference} = this;\r\n    const offset = (options.offset || 0) / 4;\r\n    const spacing = (options.spacing || 0) / 2;\r\n    const circular = options.circular;\r\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\r\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\r\n\r\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\r\n      return;\r\n    }\r\n\r\n    ctx.save();\r\n\r\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\r\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\r\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\r\n    const radiusOffset = offset * fix;\r\n\r\n    ctx.fillStyle = options.backgroundColor;\r\n    ctx.strokeStyle = options.borderColor;\r\n\r\n    const endAngle = drawArc(ctx, this, radiusOffset, spacing, circular);\r\n    drawBorder(ctx, this, radiusOffset, spacing, endAngle, circular);\r\n\r\n    ctx.restore();\r\n  }\r\n}\r\n","import Element from '../core/core.element';\r\nimport {_bezierInterpolation, _pointInLine, _steppedInterpolation} from '../helpers/helpers.interpolation';\r\nimport {_computeSegments, _boundSegments} from '../helpers/helpers.segment';\r\nimport {_steppedLineTo, _bezierCurveTo} from '../helpers/helpers.canvas';\r\nimport {_updateBezierControlPoints} from '../helpers/helpers.curve';\r\nimport {valueOrDefault} from '../helpers';\r\n\r\n/**\r\n * @typedef { import(\"./element.point\").default } PointElement\r\n */\r\n\r\nfunction setStyle(ctx, options, style = options) {\r\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\r\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\r\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\r\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\r\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\r\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\r\n}\r\n\r\nfunction lineTo(ctx, previous, target) {\r\n  ctx.lineTo(target.x, target.y);\r\n}\r\n\r\nfunction getLineMethod(options) {\r\n  if (options.stepped) {\r\n    return _steppedLineTo;\r\n  }\r\n\r\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\r\n    return _bezierCurveTo;\r\n  }\r\n\r\n  return lineTo;\r\n}\r\n\r\nfunction pathVars(points, segment, params = {}) {\r\n  const count = points.length;\r\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\r\n  const {start: segmentStart, end: segmentEnd} = segment;\r\n  const start = Math.max(paramsStart, segmentStart);\r\n  const end = Math.min(paramsEnd, segmentEnd);\r\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\r\n\r\n  return {\r\n    count,\r\n    start,\r\n    loop: segment.loop,\r\n    ilen: end < start && !outside ? count + end - start : end - start\r\n  };\r\n}\r\n\r\n/**\r\n * Create path from points, grouping by truncated x-coordinate\r\n * Points need to be in order by x-coordinate for this to work efficiently\r\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\r\n * @param {LineElement} line\r\n * @param {object} segment\r\n * @param {number} segment.start - start index of the segment, referring the points array\r\n * @param {number} segment.end - end index of the segment, referring the points array\r\n * @param {boolean} segment.loop - indicates that the segment is a loop\r\n * @param {object} params\r\n * @param {boolean} params.move - move to starting point (vs line to it)\r\n * @param {boolean} params.reverse - path the segment from end to start\r\n * @param {number} params.start - limit segment to points starting from `start` index\r\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\r\n */\r\nfunction pathSegment(ctx, line, segment, params) {\r\n  const {points, options} = line;\r\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\r\n  const lineMethod = getLineMethod(options);\r\n  // eslint-disable-next-line prefer-const\r\n  let {move = true, reverse} = params || {};\r\n  let i, point, prev;\r\n\r\n  for (i = 0; i <= ilen; ++i) {\r\n    point = points[(start + (reverse ? ilen - i : i)) % count];\r\n\r\n    if (point.skip) {\r\n      // If there is a skipped point inside a segment, spanGaps must be true\r\n      continue;\r\n    } else if (move) {\r\n      ctx.moveTo(point.x, point.y);\r\n      move = false;\r\n    } else {\r\n      lineMethod(ctx, prev, point, reverse, options.stepped);\r\n    }\r\n\r\n    prev = point;\r\n  }\r\n\r\n  if (loop) {\r\n    point = points[(start + (reverse ? ilen : 0)) % count];\r\n    lineMethod(ctx, prev, point, reverse, options.stepped);\r\n  }\r\n\r\n  return !!loop;\r\n}\r\n\r\n/**\r\n * Create path from points, grouping by truncated x-coordinate\r\n * Points need to be in order by x-coordinate for this to work efficiently\r\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\r\n * @param {LineElement} line\r\n * @param {object} segment\r\n * @param {number} segment.start - start index of the segment, referring the points array\r\n * @param {number} segment.end - end index of the segment, referring the points array\r\n * @param {boolean} segment.loop - indicates that the segment is a loop\r\n * @param {object} params\r\n * @param {boolean} params.move - move to starting point (vs line to it)\r\n * @param {boolean} params.reverse - path the segment from end to start\r\n * @param {number} params.start - limit segment to points starting from `start` index\r\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\r\n */\r\nfunction fastPathSegment(ctx, line, segment, params) {\r\n  const points = line.points;\r\n  const {count, start, ilen} = pathVars(points, segment, params);\r\n  const {move = true, reverse} = params || {};\r\n  let avgX = 0;\r\n  let countX = 0;\r\n  let i, point, prevX, minY, maxY, lastY;\r\n\r\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\r\n  const drawX = () => {\r\n    if (minY !== maxY) {\r\n      // Draw line to maxY and minY, using the average x-coordinate\r\n      ctx.lineTo(avgX, maxY);\r\n      ctx.lineTo(avgX, minY);\r\n      // Line to y-value of last point in group. So the line continues\r\n      // from correct position. Not using move, to have solid path.\r\n      ctx.lineTo(avgX, lastY);\r\n    }\r\n  };\r\n\r\n  if (move) {\r\n    point = points[pointIndex(0)];\r\n    ctx.moveTo(point.x, point.y);\r\n  }\r\n\r\n  for (i = 0; i <= ilen; ++i) {\r\n    point = points[pointIndex(i)];\r\n\r\n    if (point.skip) {\r\n      // If there is a skipped point inside a segment, spanGaps must be true\r\n      continue;\r\n    }\r\n\r\n    const x = point.x;\r\n    const y = point.y;\r\n    const truncX = x | 0; // truncated x-coordinate\r\n\r\n    if (truncX === prevX) {\r\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\r\n      if (y < minY) {\r\n        minY = y;\r\n      } else if (y > maxY) {\r\n        maxY = y;\r\n      }\r\n      // For first point in group, countX is `0`, so average will be `x` / 1.\r\n      avgX = (countX * avgX + x) / ++countX;\r\n    } else {\r\n      drawX();\r\n      // Draw line to next x-position, using the first (or only)\r\n      // y-value in that group\r\n      ctx.lineTo(x, y);\r\n\r\n      prevX = truncX;\r\n      countX = 0;\r\n      minY = maxY = y;\r\n    }\r\n    // Keep track of the last y-value in group\r\n    lastY = y;\r\n  }\r\n  drawX();\r\n}\r\n\r\n/**\r\n * @param {LineElement} line - the line\r\n * @returns {function}\r\n * @private\r\n */\r\nfunction _getSegmentMethod(line) {\r\n  const opts = line.options;\r\n  const borderDash = opts.borderDash && opts.borderDash.length;\r\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\r\n  return useFastPath ? fastPathSegment : pathSegment;\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nfunction _getInterpolationMethod(options) {\r\n  if (options.stepped) {\r\n    return _steppedInterpolation;\r\n  }\r\n\r\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\r\n    return _bezierInterpolation;\r\n  }\r\n\r\n  return _pointInLine;\r\n}\r\n\r\nfunction strokePathWithCache(ctx, line, start, count) {\r\n  let path = line._path;\r\n  if (!path) {\r\n    path = line._path = new Path2D();\r\n    if (line.path(path, start, count)) {\r\n      path.closePath();\r\n    }\r\n  }\r\n  setStyle(ctx, line.options);\r\n  ctx.stroke(path);\r\n}\r\n\r\nfunction strokePathDirect(ctx, line, start, count) {\r\n  const {segments, options} = line;\r\n  const segmentMethod = _getSegmentMethod(line);\r\n\r\n  for (const segment of segments) {\r\n    setStyle(ctx, options, segment.style);\r\n    ctx.beginPath();\r\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\r\n      ctx.closePath();\r\n    }\r\n    ctx.stroke();\r\n  }\r\n}\r\n\r\nconst usePath2D = typeof Path2D === 'function';\r\n\r\nfunction draw(ctx, line, start, count) {\r\n  if (usePath2D && !line.options.segment) {\r\n    strokePathWithCache(ctx, line, start, count);\r\n  } else {\r\n    strokePathDirect(ctx, line, start, count);\r\n  }\r\n}\r\n\r\nexport default class LineElement extends Element {\r\n\r\n  static id = 'line';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    borderCapStyle: 'butt',\r\n    borderDash: [],\r\n    borderDashOffset: 0,\r\n    borderJoinStyle: 'miter',\r\n    borderWidth: 3,\r\n    capBezierPoints: true,\r\n    cubicInterpolationMode: 'default',\r\n    fill: false,\r\n    spanGaps: false,\r\n    stepped: false,\r\n    tension: 0,\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaultRoutes = {\r\n    backgroundColor: 'backgroundColor',\r\n    borderColor: 'borderColor'\r\n  };\r\n\r\n\r\n  static descriptors = {\r\n    _scriptable: true,\r\n    _indexable: (name) => name !== 'borderDash' && name !== 'fill',\r\n  };\r\n\r\n\r\n  constructor(cfg) {\r\n    super();\r\n\r\n    this.animated = true;\r\n    this.options = undefined;\r\n    this._chart = undefined;\r\n    this._loop = undefined;\r\n    this._fullLoop = undefined;\r\n    this._path = undefined;\r\n    this._points = undefined;\r\n    this._segments = undefined;\r\n    this._decimated = false;\r\n    this._pointsUpdated = false;\r\n    this._datasetIndex = undefined;\r\n\r\n    if (cfg) {\r\n      Object.assign(this, cfg);\r\n    }\r\n  }\r\n\r\n  updateControlPoints(chartArea, indexAxis) {\r\n    const options = this.options;\r\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\r\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\r\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\r\n      this._pointsUpdated = true;\r\n    }\r\n  }\r\n\r\n  set points(points) {\r\n    this._points = points;\r\n    delete this._segments;\r\n    delete this._path;\r\n    this._pointsUpdated = false;\r\n  }\r\n\r\n  get points() {\r\n    return this._points;\r\n  }\r\n\r\n  get segments() {\r\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\r\n  }\r\n\r\n  /**\r\n\t * First non-skipped point on this line\r\n\t * @returns {PointElement|undefined}\r\n\t */\r\n  first() {\r\n    const segments = this.segments;\r\n    const points = this.points;\r\n    return segments.length && points[segments[0].start];\r\n  }\r\n\r\n  /**\r\n\t * Last non-skipped point on this line\r\n\t * @returns {PointElement|undefined}\r\n\t */\r\n  last() {\r\n    const segments = this.segments;\r\n    const points = this.points;\r\n    const count = segments.length;\r\n    return count && points[segments[count - 1].end];\r\n  }\r\n\r\n  /**\r\n\t * Interpolate a point in this line at the same value on `property` as\r\n\t * the reference `point` provided\r\n\t * @param {PointElement} point - the reference point\r\n\t * @param {string} property - the property to match on\r\n\t * @returns {PointElement|undefined}\r\n\t */\r\n  interpolate(point, property) {\r\n    const options = this.options;\r\n    const value = point[property];\r\n    const points = this.points;\r\n    const segments = _boundSegments(this, {property, start: value, end: value});\r\n\r\n    if (!segments.length) {\r\n      return;\r\n    }\r\n\r\n    const result = [];\r\n    const _interpolate = _getInterpolationMethod(options);\r\n    let i, ilen;\r\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\r\n      const {start, end} = segments[i];\r\n      const p1 = points[start];\r\n      const p2 = points[end];\r\n      if (p1 === p2) {\r\n        result.push(p1);\r\n        continue;\r\n      }\r\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\r\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\r\n      interpolated[property] = point[property];\r\n      result.push(interpolated);\r\n    }\r\n    return result.length === 1 ? result[0] : result;\r\n  }\r\n\r\n  /**\r\n\t * Append a segment of this line to current path.\r\n\t * @param {CanvasRenderingContext2D} ctx\r\n\t * @param {object} segment\r\n\t * @param {number} segment.start - start index of the segment, referring the points array\r\n \t * @param {number} segment.end - end index of the segment, referring the points array\r\n \t * @param {boolean} segment.loop - indicates that the segment is a loop\r\n\t * @param {object} params\r\n\t * @param {boolean} params.move - move to starting point (vs line to it)\r\n\t * @param {boolean} params.reverse - path the segment from end to start\r\n\t * @param {number} params.start - limit segment to points starting from `start` index\r\n\t * @param {number} params.end - limit segment to points ending at `start` + `count` index\r\n\t * @returns {undefined|boolean} - true if the segment is a full loop (path should be closed)\r\n\t */\r\n  pathSegment(ctx, segment, params) {\r\n    const segmentMethod = _getSegmentMethod(this);\r\n    return segmentMethod(ctx, this, segment, params);\r\n  }\r\n\r\n  /**\r\n\t * Append all segments of this line to current path.\r\n\t * @param {CanvasRenderingContext2D|Path2D} ctx\r\n\t * @param {number} [start]\r\n\t * @param {number} [count]\r\n\t * @returns {undefined|boolean} - true if line is a full loop (path should be closed)\r\n\t */\r\n  path(ctx, start, count) {\r\n    const segments = this.segments;\r\n    const segmentMethod = _getSegmentMethod(this);\r\n    let loop = this._loop;\r\n\r\n    start = start || 0;\r\n    count = count || (this.points.length - start);\r\n\r\n    for (const segment of segments) {\r\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\r\n    }\r\n    return !!loop;\r\n  }\r\n\r\n  /**\r\n\t * Draw\r\n\t * @param {CanvasRenderingContext2D} ctx\r\n\t * @param {object} chartArea\r\n\t * @param {number} [start]\r\n\t * @param {number} [count]\r\n\t */\r\n  draw(ctx, chartArea, start, count) {\r\n    const options = this.options || {};\r\n    const points = this.points || [];\r\n\r\n    if (points.length && options.borderWidth) {\r\n      ctx.save();\r\n\r\n      draw(ctx, this, start, count);\r\n\r\n      ctx.restore();\r\n    }\r\n\r\n    if (this.animated) {\r\n      // When line is animated, the control points and path are not cached.\r\n      this._pointsUpdated = false;\r\n      this._path = undefined;\r\n    }\r\n  }\r\n}\r\n","import Element from '../core/core.element';\r\nimport {drawPoint, _isPointInArea} from '../helpers/helpers.canvas';\r\n\r\nfunction inRange(el, pos, axis, useFinalPosition) {\r\n  const options = el.options;\r\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\r\n\r\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\r\n}\r\n\r\nexport default class PointElement extends Element {\r\n\r\n  static id = 'point';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    borderWidth: 1,\r\n    hitRadius: 1,\r\n    hoverBorderWidth: 1,\r\n    hoverRadius: 4,\r\n    pointStyle: 'circle',\r\n    radius: 3,\r\n    rotation: 0\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaultRoutes = {\r\n    backgroundColor: 'backgroundColor',\r\n    borderColor: 'borderColor'\r\n  };\r\n\r\n  constructor(cfg) {\r\n    super();\r\n\r\n    this.options = undefined;\r\n    this.parsed = undefined;\r\n    this.skip = undefined;\r\n    this.stop = undefined;\r\n\r\n    if (cfg) {\r\n      Object.assign(this, cfg);\r\n    }\r\n  }\r\n\r\n  inRange(mouseX, mouseY, useFinalPosition) {\r\n    const options = this.options;\r\n    const {x, y} = /** @type {{ x: number, y: number }} */ (this.getProps(['x', 'y'], useFinalPosition));\r\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\r\n  }\r\n\r\n  inXRange(mouseX, useFinalPosition) {\r\n    return inRange(this, mouseX, 'x', useFinalPosition);\r\n  }\r\n\r\n  inYRange(mouseY, useFinalPosition) {\r\n    return inRange(this, mouseY, 'y', useFinalPosition);\r\n  }\r\n\r\n  getCenterPoint(useFinalPosition) {\r\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\r\n    return {x, y};\r\n  }\r\n\r\n  size(options) {\r\n    options = options || this.options || {};\r\n    let radius = options.radius || 0;\r\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\r\n    const borderWidth = radius && options.borderWidth || 0;\r\n    return (radius + borderWidth) * 2;\r\n  }\r\n\r\n  draw(ctx, area) {\r\n    const options = this.options;\r\n\r\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\r\n      return;\r\n    }\r\n\r\n    ctx.strokeStyle = options.borderColor;\r\n    ctx.lineWidth = options.borderWidth;\r\n    ctx.fillStyle = options.backgroundColor;\r\n    drawPoint(ctx, options, this.x, this.y);\r\n  }\r\n\r\n  getRange() {\r\n    const options = this.options || {};\r\n    return options.radius + options.hitRadius;\r\n  }\r\n}\r\n","import Element from '../core/core.element';\r\nimport {isObject, _isBetween, _limitValue} from '../helpers';\r\nimport {addRoundedRectPath} from '../helpers/helpers.canvas';\r\nimport {toTRBL, toTRBLCorners} from '../helpers/helpers.options';\r\n\r\n/** @typedef {{ x: number, y: number, base: number, horizontal: boolean, width: number, height: number }} BarProps */\r\n\r\n/**\r\n * Helper function to get the bounds of the bar regardless of the orientation\r\n * @param {BarElement} bar the bar\r\n * @param {boolean} [useFinalPosition]\r\n * @return {object} bounds of the bar\r\n * @private\r\n */\r\nfunction getBarBounds(bar, useFinalPosition) {\r\n  const {x, y, base, width, height} = /** @type {BarProps} */ (bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition));\r\n\r\n  let left, right, top, bottom, half;\r\n\r\n  if (bar.horizontal) {\r\n    half = height / 2;\r\n    left = Math.min(x, base);\r\n    right = Math.max(x, base);\r\n    top = y - half;\r\n    bottom = y + half;\r\n  } else {\r\n    half = width / 2;\r\n    left = x - half;\r\n    right = x + half;\r\n    top = Math.min(y, base);\r\n    bottom = Math.max(y, base);\r\n  }\r\n\r\n  return {left, top, right, bottom};\r\n}\r\n\r\nfunction skipOrLimit(skip, value, min, max) {\r\n  return skip ? 0 : _limitValue(value, min, max);\r\n}\r\n\r\nfunction parseBorderWidth(bar, maxW, maxH) {\r\n  const value = bar.options.borderWidth;\r\n  const skip = bar.borderSkipped;\r\n  const o = toTRBL(value);\r\n\r\n  return {\r\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\r\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\r\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\r\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\r\n  };\r\n}\r\n\r\nfunction parseBorderRadius(bar, maxW, maxH) {\r\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\r\n  const value = bar.options.borderRadius;\r\n  const o = toTRBLCorners(value);\r\n  const maxR = Math.min(maxW, maxH);\r\n  const skip = bar.borderSkipped;\r\n\r\n  // If the value is an object, assume the user knows what they are doing\r\n  // and apply as directed.\r\n  const enableBorder = enableBorderRadius || isObject(value);\r\n\r\n  return {\r\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\r\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\r\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\r\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\r\n  };\r\n}\r\n\r\nfunction boundingRects(bar) {\r\n  const bounds = getBarBounds(bar);\r\n  const width = bounds.right - bounds.left;\r\n  const height = bounds.bottom - bounds.top;\r\n  const border = parseBorderWidth(bar, width / 2, height / 2);\r\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\r\n\r\n  return {\r\n    outer: {\r\n      x: bounds.left,\r\n      y: bounds.top,\r\n      w: width,\r\n      h: height,\r\n      radius\r\n    },\r\n    inner: {\r\n      x: bounds.left + border.l,\r\n      y: bounds.top + border.t,\r\n      w: width - border.l - border.r,\r\n      h: height - border.t - border.b,\r\n      radius: {\r\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\r\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\r\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\r\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nfunction inRange(bar, x, y, useFinalPosition) {\r\n  const skipX = x === null;\r\n  const skipY = y === null;\r\n  const skipBoth = skipX && skipY;\r\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\r\n\r\n  return bounds\r\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\r\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\r\n}\r\n\r\nfunction hasRadius(radius) {\r\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\r\n}\r\n\r\n/**\r\n * Add a path of a rectangle to the current sub-path\r\n * @param {CanvasRenderingContext2D} ctx Context\r\n * @param {*} rect Bounding rect\r\n */\r\nfunction addNormalRectPath(ctx, rect) {\r\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\r\n}\r\n\r\nfunction inflateRect(rect, amount, refRect = {}) {\r\n  const x = rect.x !== refRect.x ? -amount : 0;\r\n  const y = rect.y !== refRect.y ? -amount : 0;\r\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\r\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\r\n  return {\r\n    x: rect.x + x,\r\n    y: rect.y + y,\r\n    w: rect.w + w,\r\n    h: rect.h + h,\r\n    radius: rect.radius\r\n  };\r\n}\r\n\r\nexport default class BarElement extends Element {\r\n\r\n  static id = 'bar';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    borderSkipped: 'start',\r\n    borderWidth: 0,\r\n    borderRadius: 0,\r\n    inflateAmount: 'auto',\r\n    pointStyle: undefined\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaultRoutes = {\r\n    backgroundColor: 'backgroundColor',\r\n    borderColor: 'borderColor'\r\n  };\r\n\r\n  constructor(cfg) {\r\n    super();\r\n\r\n    this.options = undefined;\r\n    this.horizontal = undefined;\r\n    this.base = undefined;\r\n    this.width = undefined;\r\n    this.height = undefined;\r\n    this.inflateAmount = undefined;\r\n\r\n    if (cfg) {\r\n      Object.assign(this, cfg);\r\n    }\r\n  }\r\n\r\n  draw(ctx) {\r\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\r\n    const {inner, outer} = boundingRects(this);\r\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\r\n\r\n    ctx.save();\r\n\r\n    if (outer.w !== inner.w || outer.h !== inner.h) {\r\n      ctx.beginPath();\r\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\r\n      ctx.clip();\r\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\r\n      ctx.fillStyle = borderColor;\r\n      ctx.fill('evenodd');\r\n    }\r\n\r\n    ctx.beginPath();\r\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\r\n    ctx.fillStyle = backgroundColor;\r\n    ctx.fill();\r\n\r\n    ctx.restore();\r\n  }\r\n\r\n  inRange(mouseX, mouseY, useFinalPosition) {\r\n    return inRange(this, mouseX, mouseY, useFinalPosition);\r\n  }\r\n\r\n  inXRange(mouseX, useFinalPosition) {\r\n    return inRange(this, mouseX, null, useFinalPosition);\r\n  }\r\n\r\n  inYRange(mouseY, useFinalPosition) {\r\n    return inRange(this, null, mouseY, useFinalPosition);\r\n  }\r\n\r\n  getCenterPoint(useFinalPosition) {\r\n    const {x, y, base, horizontal} = /** @type {BarProps} */ (this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition));\r\n    return {\r\n      x: horizontal ? (x + base) / 2 : x,\r\n      y: horizontal ? y : (y + base) / 2\r\n    };\r\n  }\r\n\r\n  getRange(axis) {\r\n    return axis === 'x' ? this.width / 2 : this.height / 2;\r\n  }\r\n}\r\n","import {_limitValue, _lookupByKey, isNullOrUndef, resolve} from '../helpers';\r\n\r\nfunction lttbDecimation(data, start, count, availableWidth, options) {\r\n  /**\r\n   * Implementation of the Largest Triangle Three Buckets algorithm.\r\n   *\r\n   * This implementation is based on the original implementation by Sveinn Steinarsson\r\n   * in https://github.com/sveinn-steinarsson/flot-downsample/blob/master/jquery.flot.downsample.js\r\n   *\r\n   * The original implementation is MIT licensed.\r\n   */\r\n  const samples = options.samples || availableWidth;\r\n  // There are less points than the threshold, returning the whole array\r\n  if (samples >= count) {\r\n    return data.slice(start, start + count);\r\n  }\r\n\r\n  const decimated = [];\r\n\r\n  const bucketWidth = (count - 2) / (samples - 2);\r\n  let sampledIndex = 0;\r\n  const endIndex = start + count - 1;\r\n  // Starting from offset\r\n  let a = start;\r\n  let i, maxAreaPoint, maxArea, area, nextA;\r\n\r\n  decimated[sampledIndex++] = data[a];\r\n\r\n  for (i = 0; i < samples - 2; i++) {\r\n    let avgX = 0;\r\n    let avgY = 0;\r\n    let j;\r\n\r\n    // Adding offset\r\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\r\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\r\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\r\n\r\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\r\n      avgX += data[j].x;\r\n      avgY += data[j].y;\r\n    }\r\n\r\n    avgX /= avgRangeLength;\r\n    avgY /= avgRangeLength;\r\n\r\n    // Adding offset\r\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\r\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\r\n    const {x: pointAx, y: pointAy} = data[a];\r\n\r\n    // Note that this is changed from the original algorithm which initializes these\r\n    // values to 1. The reason for this change is that if the area is small, nextA\r\n    // would never be set and thus a crash would occur in the next loop as `a` would become\r\n    // `undefined`. Since the area is always positive, but could be 0 in the case of a flat trace,\r\n    // initializing with a negative number is the correct solution.\r\n    maxArea = area = -1;\r\n\r\n    for (j = rangeOffs; j < rangeTo; j++) {\r\n      area = 0.5 * Math.abs(\r\n        (pointAx - avgX) * (data[j].y - pointAy) -\r\n        (pointAx - data[j].x) * (avgY - pointAy)\r\n      );\r\n\r\n      if (area > maxArea) {\r\n        maxArea = area;\r\n        maxAreaPoint = data[j];\r\n        nextA = j;\r\n      }\r\n    }\r\n\r\n    decimated[sampledIndex++] = maxAreaPoint;\r\n    a = nextA;\r\n  }\r\n\r\n  // Include the last point\r\n  decimated[sampledIndex++] = data[endIndex];\r\n\r\n  return decimated;\r\n}\r\n\r\nfunction minMaxDecimation(data, start, count, availableWidth) {\r\n  let avgX = 0;\r\n  let countX = 0;\r\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\r\n  const decimated = [];\r\n  const endIndex = start + count - 1;\r\n\r\n  const xMin = data[start].x;\r\n  const xMax = data[endIndex].x;\r\n  const dx = xMax - xMin;\r\n\r\n  for (i = start; i < start + count; ++i) {\r\n    point = data[i];\r\n    x = (point.x - xMin) / dx * availableWidth;\r\n    y = point.y;\r\n    const truncX = x | 0;\r\n\r\n    if (truncX === prevX) {\r\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\r\n      if (y < minY) {\r\n        minY = y;\r\n        minIndex = i;\r\n      } else if (y > maxY) {\r\n        maxY = y;\r\n        maxIndex = i;\r\n      }\r\n      // For first point in group, countX is `0`, so average will be `x` / 1.\r\n      // Use point.x here because we're computing the average data `x` value\r\n      avgX = (countX * avgX + point.x) / ++countX;\r\n    } else {\r\n      // Push up to 4 points, 3 for the last interval and the first point for this interval\r\n      const lastIndex = i - 1;\r\n\r\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\r\n        // The interval is defined by 4 points: start, min, max, end.\r\n        // The starting point is already considered at this point, so we need to determine which\r\n        // of the other points to add. We need to sort these points to ensure the decimated data\r\n        // is still sorted and then ensure there are no duplicates.\r\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\r\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\r\n\r\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\r\n          decimated.push({\r\n            ...data[intermediateIndex1],\r\n            x: avgX,\r\n          });\r\n        }\r\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\r\n          decimated.push({\r\n            ...data[intermediateIndex2],\r\n            x: avgX\r\n          });\r\n        }\r\n      }\r\n\r\n      // lastIndex === startIndex will occur when a range has only 1 point which could\r\n      // happen with very uneven data\r\n      if (i > 0 && lastIndex !== startIndex) {\r\n        // Last point in the previous interval\r\n        decimated.push(data[lastIndex]);\r\n      }\r\n\r\n      // Start of the new interval\r\n      decimated.push(point);\r\n      prevX = truncX;\r\n      countX = 0;\r\n      minY = maxY = y;\r\n      minIndex = maxIndex = startIndex = i;\r\n    }\r\n  }\r\n\r\n  return decimated;\r\n}\r\n\r\nfunction cleanDecimatedDataset(dataset) {\r\n  if (dataset._decimated) {\r\n    const data = dataset._data;\r\n    delete dataset._decimated;\r\n    delete dataset._data;\r\n    Object.defineProperty(dataset, 'data', {value: data});\r\n  }\r\n}\r\n\r\nfunction cleanDecimatedData(chart) {\r\n  chart.data.datasets.forEach((dataset) => {\r\n    cleanDecimatedDataset(dataset);\r\n  });\r\n}\r\n\r\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\r\n  const pointCount = points.length;\r\n\r\n  let start = 0;\r\n  let count;\r\n\r\n  const {iScale} = meta;\r\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\r\n\r\n  if (minDefined) {\r\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\r\n  }\r\n  if (maxDefined) {\r\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\r\n  } else {\r\n    count = pointCount - start;\r\n  }\r\n\r\n  return {start, count};\r\n}\r\n\r\nexport default {\r\n  id: 'decimation',\r\n\r\n  defaults: {\r\n    algorithm: 'min-max',\r\n    enabled: false,\r\n  },\r\n\r\n  beforeElementsUpdate: (chart, args, options) => {\r\n    if (!options.enabled) {\r\n      // The decimation plugin may have been previously enabled. Need to remove old `dataset._data` handlers\r\n      cleanDecimatedData(chart);\r\n      return;\r\n    }\r\n\r\n    // Assume the entire chart is available to show a few more points than needed\r\n    const availableWidth = chart.width;\r\n\r\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\r\n      const {_data, indexAxis} = dataset;\r\n      const meta = chart.getDatasetMeta(datasetIndex);\r\n      const data = _data || dataset.data;\r\n\r\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\r\n        // Decimation is only supported for lines that have an X indexAxis\r\n        return;\r\n      }\r\n\r\n      if (!meta.controller.supportsDecimation) {\r\n        // Only line datasets are supported\r\n        return;\r\n      }\r\n\r\n      const xAxis = chart.scales[meta.xAxisID];\r\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\r\n        // Only linear interpolation is supported\r\n        return;\r\n      }\r\n\r\n      if (chart.options.parsing) {\r\n        // Plugin only supports data that does not need parsing\r\n        return;\r\n      }\r\n\r\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\r\n      const threshold = options.threshold || 4 * availableWidth;\r\n      if (count <= threshold) {\r\n        // No decimation is required until we are above this threshold\r\n        cleanDecimatedDataset(dataset);\r\n        return;\r\n      }\r\n\r\n      if (isNullOrUndef(_data)) {\r\n        // First time we are seeing this dataset\r\n        // We override the 'data' property with a setter that stores the\r\n        // raw data in _data, but reads the decimated data from _decimated\r\n        dataset._data = data;\r\n        delete dataset.data;\r\n        Object.defineProperty(dataset, 'data', {\r\n          configurable: true,\r\n          enumerable: true,\r\n          get: function() {\r\n            return this._decimated;\r\n          },\r\n          set: function(d) {\r\n            this._data = d;\r\n          }\r\n        });\r\n      }\r\n\r\n      // Point the chart to the decimated data\r\n      let decimated;\r\n      switch (options.algorithm) {\r\n      case 'lttb':\r\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\r\n        break;\r\n      case 'min-max':\r\n        decimated = minMaxDecimation(data, start, count, availableWidth);\r\n        break;\r\n      default:\r\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\r\n      }\r\n\r\n      dataset._decimated = decimated;\r\n    });\r\n  },\r\n\r\n  destroy(chart) {\r\n    cleanDecimatedData(chart);\r\n  }\r\n};\r\n","import {_boundSegment, _boundSegments, _normalizeAngle} from '../../helpers';\r\n\r\nexport function _segments(line, target, property) {\r\n  const segments = line.segments;\r\n  const points = line.points;\r\n  const tpoints = target.points;\r\n  const parts = [];\r\n\r\n  for (const segment of segments) {\r\n    let {start, end} = segment;\r\n    end = _findSegmentEnd(start, end, points);\r\n\r\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\r\n\r\n    if (!target.segments) {\r\n      // Special case for boundary not supporting `segments` (simpleArc)\r\n      // Bounds are provided as `target` for partial circle, or undefined for full circle\r\n      parts.push({\r\n        source: segment,\r\n        target: bounds,\r\n        start: points[start],\r\n        end: points[end]\r\n      });\r\n      continue;\r\n    }\r\n\r\n    // Get all segments from `target` that intersect the bounds of current segment of `line`\r\n    const targetSegments = _boundSegments(target, bounds);\r\n\r\n    for (const tgt of targetSegments) {\r\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\r\n      const fillSources = _boundSegment(segment, points, subBounds);\r\n\r\n      for (const fillSource of fillSources) {\r\n        parts.push({\r\n          source: fillSource,\r\n          target: tgt,\r\n          start: {\r\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\r\n          },\r\n          end: {\r\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n  return parts;\r\n}\r\n\r\nexport function _getBounds(property, first, last, loop) {\r\n  if (loop) {\r\n    return;\r\n  }\r\n  let start = first[property];\r\n  let end = last[property];\r\n\r\n  if (property === 'angle') {\r\n    start = _normalizeAngle(start);\r\n    end = _normalizeAngle(end);\r\n  }\r\n  return {property, start, end};\r\n}\r\n\r\nexport function _pointsFromSegments(boundary, line) {\r\n  const {x = null, y = null} = boundary || {};\r\n  const linePoints = line.points;\r\n  const points = [];\r\n  line.segments.forEach(({start, end}) => {\r\n    end = _findSegmentEnd(start, end, linePoints);\r\n    const first = linePoints[start];\r\n    const last = linePoints[end];\r\n    if (y !== null) {\r\n      points.push({x: first.x, y});\r\n      points.push({x: last.x, y});\r\n    } else if (x !== null) {\r\n      points.push({x, y: first.y});\r\n      points.push({x, y: last.y});\r\n    }\r\n  });\r\n  return points;\r\n}\r\n\r\nexport function _findSegmentEnd(start, end, points) {\r\n  for (;end > start; end--) {\r\n    const point = points[end];\r\n    if (!isNaN(point.x) && !isNaN(point.y)) {\r\n      break;\r\n    }\r\n  }\r\n  return end;\r\n}\r\n\r\nfunction _getEdge(a, b, prop, fn) {\r\n  if (a && b) {\r\n    return fn(a[prop], b[prop]);\r\n  }\r\n  return a ? a[prop] : b ? b[prop] : 0;\r\n}\r\n","/**\r\n * @typedef { import('../../core/core.controller').default } Chart\r\n * @typedef { import('../../core/core.scale').default } Scale\r\n * @typedef { import('../../elements/element.point').default } PointElement\r\n */\r\n\r\nimport {LineElement} from '../../elements';\r\nimport {isArray} from '../../helpers';\r\nimport {_pointsFromSegments} from './filler.segment';\r\n\r\n/**\r\n * @param {PointElement[] | { x: number; y: number; }} boundary\r\n * @param {LineElement} line\r\n * @return {LineElement?}\r\n */\r\nexport function _createBoundaryLine(boundary, line) {\r\n  let points = [];\r\n  let _loop = false;\r\n\r\n  if (isArray(boundary)) {\r\n    _loop = true;\r\n    // @ts-ignore\r\n    points = boundary;\r\n  } else {\r\n    points = _pointsFromSegments(boundary, line);\r\n  }\r\n\r\n  return points.length ? new LineElement({\r\n    points,\r\n    options: {tension: 0},\r\n    _loop,\r\n    _fullLoop: _loop\r\n  }) : null;\r\n}\r\n\r\nexport function _shouldApplyFill(source) {\r\n  return source && source.fill !== false;\r\n}\r\n","import {isObject, isFinite, valueOrDefault} from '../../helpers/helpers.core';\r\n\r\n/**\r\n * @typedef { import('../../core/core.scale').default } Scale\r\n * @typedef { import('../../elements/element.line').default } LineElement\r\n * @typedef { import('../../../types').FillTarget } FillTarget\r\n * @typedef { import('../../../types').ComplexFillTarget } ComplexFillTarget\r\n */\r\n\r\nexport function _resolveTarget(sources, index, propagate) {\r\n  const source = sources[index];\r\n  let fill = source.fill;\r\n  const visited = [index];\r\n  let target;\r\n\r\n  if (!propagate) {\r\n    return fill;\r\n  }\r\n\r\n  while (fill !== false && visited.indexOf(fill) === -1) {\r\n    if (!isFinite(fill)) {\r\n      return fill;\r\n    }\r\n\r\n    target = sources[fill];\r\n    if (!target) {\r\n      return false;\r\n    }\r\n\r\n    if (target.visible) {\r\n      return fill;\r\n    }\r\n\r\n    visited.push(fill);\r\n    fill = target.fill;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n * @param {LineElement} line\r\n * @param {number} index\r\n * @param {number} count\r\n */\r\nexport function _decodeFill(line, index, count) {\r\n  /** @type {string | {value: number}} */\r\n  const fill = parseFillOption(line);\r\n\r\n  if (isObject(fill)) {\r\n    return isNaN(fill.value) ? false : fill;\r\n  }\r\n\r\n  let target = parseFloat(fill);\r\n\r\n  if (isFinite(target) && Math.floor(target) === target) {\r\n    return decodeTargetIndex(fill[0], index, target, count);\r\n  }\r\n\r\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\r\n}\r\n\r\nfunction decodeTargetIndex(firstCh, index, target, count) {\r\n  if (firstCh === '-' || firstCh === '+') {\r\n    target = index + target;\r\n  }\r\n\r\n  if (target === index || target < 0 || target >= count) {\r\n    return false;\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\n/**\r\n * @param {FillTarget | ComplexFillTarget} fill\r\n * @param {Scale} scale\r\n * @returns {number | null}\r\n */\r\nexport function _getTargetPixel(fill, scale) {\r\n  let pixel = null;\r\n  if (fill === 'start') {\r\n    pixel = scale.bottom;\r\n  } else if (fill === 'end') {\r\n    pixel = scale.top;\r\n  } else if (isObject(fill)) {\r\n    // @ts-ignore\r\n    pixel = scale.getPixelForValue(fill.value);\r\n  } else if (scale.getBasePixel) {\r\n    pixel = scale.getBasePixel();\r\n  }\r\n  return pixel;\r\n}\r\n\r\n/**\r\n * @param {FillTarget | ComplexFillTarget} fill\r\n * @param {Scale} scale\r\n * @param {number} startValue\r\n * @returns {number | undefined}\r\n */\r\nexport function _getTargetValue(fill, scale, startValue) {\r\n  let value;\r\n\r\n  if (fill === 'start') {\r\n    value = startValue;\r\n  } else if (fill === 'end') {\r\n    value = scale.options.reverse ? scale.min : scale.max;\r\n  } else if (isObject(fill)) {\r\n    // @ts-ignore\r\n    value = fill.value;\r\n  } else {\r\n    value = scale.getBaseValue();\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * @param {LineElement} line\r\n */\r\nfunction parseFillOption(line) {\r\n  const options = line.options;\r\n  const fillOption = options.fill;\r\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\r\n\r\n  if (fill === undefined) {\r\n    fill = !!options.backgroundColor;\r\n  }\r\n\r\n  if (fill === false || fill === null) {\r\n    return false;\r\n  }\r\n\r\n  if (fill === true) {\r\n    return 'origin';\r\n  }\r\n  return fill;\r\n}\r\n","/**\r\n * @typedef { import('../../core/core.controller').default } Chart\r\n * @typedef { import('../../core/core.scale').default } Scale\r\n * @typedef { import('../../elements/element.point').default } PointElement\r\n */\r\n\r\nimport {LineElement} from '../../elements';\r\nimport {_isBetween} from '../../helpers';\r\nimport {_createBoundaryLine} from './filler.helper';\r\n\r\n/**\r\n * @param {{ chart: Chart; scale: Scale; index: number; line: LineElement; }} source\r\n * @return {LineElement}\r\n */\r\nexport function _buildStackLine(source) {\r\n  const {scale, index, line} = source;\r\n  const points = [];\r\n  const segments = line.segments;\r\n  const sourcePoints = line.points;\r\n  const linesBelow = getLinesBelow(scale, index);\r\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\r\n\r\n  for (let i = 0; i < segments.length; i++) {\r\n    const segment = segments[i];\r\n    for (let j = segment.start; j <= segment.end; j++) {\r\n      addPointsBelow(points, sourcePoints[j], linesBelow);\r\n    }\r\n  }\r\n  return new LineElement({points, options: {}});\r\n}\r\n\r\n/**\r\n * @param {Scale} scale\r\n * @param {number} index\r\n * @return {LineElement[]}\r\n */\r\nfunction getLinesBelow(scale, index) {\r\n  const below = [];\r\n  const metas = scale.getMatchingVisibleMetas('line');\r\n\r\n  for (let i = 0; i < metas.length; i++) {\r\n    const meta = metas[i];\r\n    if (meta.index === index) {\r\n      break;\r\n    }\r\n    if (!meta.hidden) {\r\n      below.unshift(meta.dataset);\r\n    }\r\n  }\r\n  return below;\r\n}\r\n\r\n/**\r\n * @param {PointElement[]} points\r\n * @param {PointElement} sourcePoint\r\n * @param {LineElement[]} linesBelow\r\n */\r\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\r\n  const postponed = [];\r\n  for (let j = 0; j < linesBelow.length; j++) {\r\n    const line = linesBelow[j];\r\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\r\n\r\n    if (!point || (first && last)) {\r\n      continue;\r\n    }\r\n    if (first) {\r\n      // First point of an segment -> need to add another point before this,\r\n      // from next line below.\r\n      postponed.unshift(point);\r\n    } else {\r\n      points.push(point);\r\n      if (!last) {\r\n        // In the middle of an segment, no need to add more points.\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  points.push(...postponed);\r\n}\r\n\r\n/**\r\n * @param {LineElement} line\r\n * @param {PointElement} sourcePoint\r\n * @param {string} property\r\n * @returns {{point?: PointElement, first?: boolean, last?: boolean}}\r\n */\r\nfunction findPoint(line, sourcePoint, property) {\r\n  const point = line.interpolate(sourcePoint, property);\r\n  if (!point) {\r\n    return {};\r\n  }\r\n\r\n  const pointValue = point[property];\r\n  const segments = line.segments;\r\n  const linePoints = line.points;\r\n  let first = false;\r\n  let last = false;\r\n  for (let i = 0; i < segments.length; i++) {\r\n    const segment = segments[i];\r\n    const firstValue = linePoints[segment.start][property];\r\n    const lastValue = linePoints[segment.end][property];\r\n    if (_isBetween(pointValue, firstValue, lastValue)) {\r\n      first = pointValue === firstValue;\r\n      last = pointValue === lastValue;\r\n      break;\r\n    }\r\n  }\r\n  return {first, last, point};\r\n}\r\n","import {TAU} from '../../helpers';\r\n\r\n// TODO: use elements.ArcElement instead\r\nexport class simpleArc {\r\n  constructor(opts) {\r\n    this.x = opts.x;\r\n    this.y = opts.y;\r\n    this.radius = opts.radius;\r\n  }\r\n\r\n  pathSegment(ctx, bounds, opts) {\r\n    const {x, y, radius} = this;\r\n    bounds = bounds || {start: 0, end: TAU};\r\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\r\n    return !opts.bounds;\r\n  }\r\n\r\n  interpolate(point) {\r\n    const {x, y, radius} = this;\r\n    const angle = point.angle;\r\n    return {\r\n      x: x + Math.cos(angle) * radius,\r\n      y: y + Math.sin(angle) * radius,\r\n      angle\r\n    };\r\n  }\r\n}\r\n","import {isFinite} from '../../helpers';\r\nimport {_createBoundaryLine} from './filler.helper';\r\nimport {_getTargetPixel, _getTargetValue} from './filler.options';\r\nimport {_buildStackLine} from './filler.target.stack';\r\nimport {simpleArc} from './simpleArc';\r\n\r\n/**\r\n * @typedef { import('../../core/core.controller').default } Chart\r\n * @typedef { import('../../core/core.scale').default } Scale\r\n * @typedef { import('../../elements/element.point').default } PointElement\r\n */\r\n\r\nexport function _getTarget(source) {\r\n  const {chart, fill, line} = source;\r\n\r\n  if (isFinite(fill)) {\r\n    return getLineByIndex(chart, fill);\r\n  }\r\n\r\n  if (fill === 'stack') {\r\n    return _buildStackLine(source);\r\n  }\r\n\r\n  if (fill === 'shape') {\r\n    return true;\r\n  }\r\n\r\n  const boundary = computeBoundary(source);\r\n\r\n  if (boundary instanceof simpleArc) {\r\n    return boundary;\r\n  }\r\n\r\n  return _createBoundaryLine(boundary, line);\r\n}\r\n\r\n/**\r\n * @param {Chart} chart\r\n * @param {number} index\r\n */\r\nfunction getLineByIndex(chart, index) {\r\n  const meta = chart.getDatasetMeta(index);\r\n  const visible = meta && chart.isDatasetVisible(index);\r\n  return visible ? meta.dataset : null;\r\n}\r\n\r\nfunction computeBoundary(source) {\r\n  const scale = source.scale || {};\r\n\r\n  if (scale.getPointPositionForValue) {\r\n    return computeCircularBoundary(source);\r\n  }\r\n  return computeLinearBoundary(source);\r\n}\r\n\r\n\r\nfunction computeLinearBoundary(source) {\r\n  const {scale = {}, fill} = source;\r\n  const pixel = _getTargetPixel(fill, scale);\r\n\r\n  if (isFinite(pixel)) {\r\n    const horizontal = scale.isHorizontal();\r\n\r\n    return {\r\n      x: horizontal ? pixel : null,\r\n      y: horizontal ? null : pixel\r\n    };\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction computeCircularBoundary(source) {\r\n  const {scale, fill} = source;\r\n  const options = scale.options;\r\n  const length = scale.getLabels().length;\r\n  const start = options.reverse ? scale.max : scale.min;\r\n  const value = _getTargetValue(fill, scale, start);\r\n  const target = [];\r\n\r\n  if (options.grid.circular) {\r\n    const center = scale.getPointPositionForValue(0, start);\r\n    return new simpleArc({\r\n      x: center.x,\r\n      y: center.y,\r\n      radius: scale.getDistanceFromCenterForValue(value)\r\n    });\r\n  }\r\n\r\n  for (let i = 0; i < length; ++i) {\r\n    target.push(scale.getPointPositionForValue(i, value));\r\n  }\r\n  return target;\r\n}\r\n\r\n","import {clipArea, unclipArea} from '../../helpers';\r\nimport {_findSegmentEnd, _getBounds, _segments} from './filler.segment';\r\nimport {_getTarget} from './filler.target';\r\n\r\nexport function _drawfill(ctx, source, area) {\r\n  const target = _getTarget(source);\r\n  const {line, scale, axis} = source;\r\n  const lineOpts = line.options;\r\n  const fillOption = lineOpts.fill;\r\n  const color = lineOpts.backgroundColor;\r\n  const {above = color, below = color} = fillOption || {};\r\n  if (target && line.points.length) {\r\n    clipArea(ctx, area);\r\n    doFill(ctx, {line, target, above, below, area, scale, axis});\r\n    unclipArea(ctx);\r\n  }\r\n}\r\n\r\nfunction doFill(ctx, cfg) {\r\n  const {line, target, above, below, area, scale} = cfg;\r\n  const property = line._loop ? 'angle' : cfg.axis;\r\n\r\n  ctx.save();\r\n\r\n  if (property === 'x' && below !== above) {\r\n    clipVertical(ctx, target, area.top);\r\n    fill(ctx, {line, target, color: above, scale, property});\r\n    ctx.restore();\r\n    ctx.save();\r\n    clipVertical(ctx, target, area.bottom);\r\n  }\r\n  fill(ctx, {line, target, color: below, scale, property});\r\n\r\n  ctx.restore();\r\n}\r\n\r\nfunction clipVertical(ctx, target, clipY) {\r\n  const {segments, points} = target;\r\n  let first = true;\r\n  let lineLoop = false;\r\n\r\n  ctx.beginPath();\r\n  for (const segment of segments) {\r\n    const {start, end} = segment;\r\n    const firstPoint = points[start];\r\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\r\n    if (first) {\r\n      ctx.moveTo(firstPoint.x, firstPoint.y);\r\n      first = false;\r\n    } else {\r\n      ctx.lineTo(firstPoint.x, clipY);\r\n      ctx.lineTo(firstPoint.x, firstPoint.y);\r\n    }\r\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\r\n    if (lineLoop) {\r\n      ctx.closePath();\r\n    } else {\r\n      ctx.lineTo(lastPoint.x, clipY);\r\n    }\r\n  }\r\n\r\n  ctx.lineTo(target.first().x, clipY);\r\n  ctx.closePath();\r\n  ctx.clip();\r\n}\r\n\r\nfunction fill(ctx, cfg) {\r\n  const {line, target, property, color, scale} = cfg;\r\n  const segments = _segments(line, target, property);\r\n\r\n  for (const {source: src, target: tgt, start, end} of segments) {\r\n    const {style: {backgroundColor = color} = {}} = src;\r\n    const notShape = target !== true;\r\n\r\n    ctx.save();\r\n    ctx.fillStyle = backgroundColor;\r\n\r\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\r\n\r\n    ctx.beginPath();\r\n\r\n    const lineLoop = !!line.pathSegment(ctx, src);\r\n\r\n    let loop;\r\n    if (notShape) {\r\n      if (lineLoop) {\r\n        ctx.closePath();\r\n      } else {\r\n        interpolatedLineTo(ctx, target, end, property);\r\n      }\r\n\r\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\r\n      loop = lineLoop && targetLoop;\r\n      if (!loop) {\r\n        interpolatedLineTo(ctx, target, start, property);\r\n      }\r\n    }\r\n\r\n    ctx.closePath();\r\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\r\n\r\n    ctx.restore();\r\n  }\r\n}\r\n\r\nfunction clipBounds(ctx, scale, bounds) {\r\n  const {top, bottom} = scale.chart.chartArea;\r\n  const {property, start, end} = bounds || {};\r\n  if (property === 'x') {\r\n    ctx.beginPath();\r\n    ctx.rect(start, top, end - start, bottom - top);\r\n    ctx.clip();\r\n  }\r\n}\r\n\r\nfunction interpolatedLineTo(ctx, target, point, property) {\r\n  const interpolatedPoint = target.interpolate(point, property);\r\n  if (interpolatedPoint) {\r\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\r\n  }\r\n}\r\n\r\n","/**\r\n * Plugin based on discussion from the following Chart.js issues:\r\n * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569\r\n * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897\r\n */\r\n\r\nimport LineElement from '../../elements/element.line';\r\nimport {_drawfill} from './filler.drawing';\r\nimport {_shouldApplyFill} from './filler.helper';\r\nimport {_decodeFill, _resolveTarget} from './filler.options';\r\n\r\nexport default {\r\n  id: 'filler',\r\n\r\n  afterDatasetsUpdate(chart, _args, options) {\r\n    const count = (chart.data.datasets || []).length;\r\n    const sources = [];\r\n    let meta, i, line, source;\r\n\r\n    for (i = 0; i < count; ++i) {\r\n      meta = chart.getDatasetMeta(i);\r\n      line = meta.dataset;\r\n      source = null;\r\n\r\n      if (line && line.options && line instanceof LineElement) {\r\n        source = {\r\n          visible: chart.isDatasetVisible(i),\r\n          index: i,\r\n          fill: _decodeFill(line, i, count),\r\n          chart,\r\n          axis: meta.controller.options.indexAxis,\r\n          scale: meta.vScale,\r\n          line,\r\n        };\r\n      }\r\n\r\n      meta.$filler = source;\r\n      sources.push(source);\r\n    }\r\n\r\n    for (i = 0; i < count; ++i) {\r\n      source = sources[i];\r\n      if (!source || source.fill === false) {\r\n        continue;\r\n      }\r\n\r\n      source.fill = _resolveTarget(sources, i, options.propagate);\r\n    }\r\n  },\r\n\r\n  beforeDraw(chart, _args, options) {\r\n    const draw = options.drawTime === 'beforeDraw';\r\n    const metasets = chart.getSortedVisibleDatasetMetas();\r\n    const area = chart.chartArea;\r\n    for (let i = metasets.length - 1; i >= 0; --i) {\r\n      const source = metasets[i].$filler;\r\n      if (!source) {\r\n        continue;\r\n      }\r\n\r\n      source.line.updateControlPoints(area, source.axis);\r\n      if (draw && source.fill) {\r\n        _drawfill(chart.ctx, source, area);\r\n      }\r\n    }\r\n  },\r\n\r\n  beforeDatasetsDraw(chart, _args, options) {\r\n    if (options.drawTime !== 'beforeDatasetsDraw') {\r\n      return;\r\n    }\r\n\r\n    const metasets = chart.getSortedVisibleDatasetMetas();\r\n    for (let i = metasets.length - 1; i >= 0; --i) {\r\n      const source = metasets[i].$filler;\r\n\r\n      if (_shouldApplyFill(source)) {\r\n        _drawfill(chart.ctx, source, chart.chartArea);\r\n      }\r\n    }\r\n  },\r\n\r\n  beforeDatasetDraw(chart, args, options) {\r\n    const source = args.meta.$filler;\r\n\r\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\r\n      return;\r\n    }\r\n\r\n    _drawfill(chart.ctx, source, chart.chartArea);\r\n  },\r\n\r\n  defaults: {\r\n    propagate: true,\r\n    drawTime: 'beforeDatasetDraw'\r\n  }\r\n};\r\n","import defaults from '../core/core.defaults';\r\nimport Element from '../core/core.element';\r\nimport layouts from '../core/core.layouts';\r\nimport {addRoundedRectPath, drawPointLegend, renderText} from '../helpers/helpers.canvas';\r\nimport {\r\n  _isBetween,\r\n  callback as call,\r\n  clipArea,\r\n  getRtlAdapter,\r\n  overrideTextDirection,\r\n  restoreTextDirection,\r\n  toFont,\r\n  toPadding,\r\n  unclipArea,\r\n  valueOrDefault,\r\n} from '../helpers/index';\r\nimport {_alignStartEnd, _textX, _toLeftRightCenter} from '../helpers/helpers.extras';\r\nimport {toTRBLCorners} from '../helpers/helpers.options';\r\n\r\n/**\r\n * @typedef { import(\"../../types\").ChartEvent } ChartEvent\r\n */\r\n\r\nconst getBoxSize = (labelOpts, fontSize) => {\r\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\r\n\r\n  if (labelOpts.usePointStyle) {\r\n    boxHeight = Math.min(boxHeight, fontSize);\r\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\r\n  }\r\n\r\n  return {\r\n    boxWidth,\r\n    boxHeight,\r\n    itemHeight: Math.max(fontSize, boxHeight)\r\n  };\r\n};\r\n\r\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\r\n\r\nexport class Legend extends Element {\r\n\r\n  /**\r\n\t * @param {{ ctx: any; options: any; chart: any; }} config\r\n\t */\r\n  constructor(config) {\r\n    super();\r\n\r\n    this._added = false;\r\n\r\n    // Contains hit boxes for each dataset (in dataset order)\r\n    this.legendHitBoxes = [];\r\n\r\n    /**\r\n \t\t * @private\r\n \t\t */\r\n    this._hoveredItem = null;\r\n\r\n    // Are we in doughnut mode which has a different data type\r\n    this.doughnutMode = false;\r\n\r\n    this.chart = config.chart;\r\n    this.options = config.options;\r\n    this.ctx = config.ctx;\r\n    this.legendItems = undefined;\r\n    this.columnSizes = undefined;\r\n    this.lineWidths = undefined;\r\n    this.maxHeight = undefined;\r\n    this.maxWidth = undefined;\r\n    this.top = undefined;\r\n    this.bottom = undefined;\r\n    this.left = undefined;\r\n    this.right = undefined;\r\n    this.height = undefined;\r\n    this.width = undefined;\r\n    this._margins = undefined;\r\n    this.position = undefined;\r\n    this.weight = undefined;\r\n    this.fullSize = undefined;\r\n  }\r\n\r\n  update(maxWidth, maxHeight, margins) {\r\n    this.maxWidth = maxWidth;\r\n    this.maxHeight = maxHeight;\r\n    this._margins = margins;\r\n\r\n    this.setDimensions();\r\n    this.buildLabels();\r\n    this.fit();\r\n  }\r\n\r\n  setDimensions() {\r\n    if (this.isHorizontal()) {\r\n      this.width = this.maxWidth;\r\n      this.left = this._margins.left;\r\n      this.right = this.width;\r\n    } else {\r\n      this.height = this.maxHeight;\r\n      this.top = this._margins.top;\r\n      this.bottom = this.height;\r\n    }\r\n  }\r\n\r\n  buildLabels() {\r\n    const labelOpts = this.options.labels || {};\r\n    let legendItems = call(labelOpts.generateLabels, [this.chart], this) || [];\r\n\r\n    if (labelOpts.filter) {\r\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\r\n    }\r\n\r\n    if (labelOpts.sort) {\r\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\r\n    }\r\n\r\n    if (this.options.reverse) {\r\n      legendItems.reverse();\r\n    }\r\n\r\n    this.legendItems = legendItems;\r\n  }\r\n\r\n  fit() {\r\n    const {options, ctx} = this;\r\n\r\n    // The legend may not be displayed for a variety of reasons including\r\n    // the fact that the defaults got set to `false`.\r\n    // When the legend is not displayed, there are no guarantees that the options\r\n    // are correctly formatted so we need to bail out as early as possible.\r\n    if (!options.display) {\r\n      this.width = this.height = 0;\r\n      return;\r\n    }\r\n\r\n    const labelOpts = options.labels;\r\n    const labelFont = toFont(labelOpts.font);\r\n    const fontSize = labelFont.size;\r\n    const titleHeight = this._computeTitleHeight();\r\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\r\n\r\n    let width, height;\r\n\r\n    ctx.font = labelFont.string;\r\n\r\n    if (this.isHorizontal()) {\r\n      width = this.maxWidth; // fill all the width\r\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\r\n    } else {\r\n      height = this.maxHeight; // fill all the height\r\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\r\n    }\r\n\r\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\r\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\r\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\r\n    const hitboxes = this.legendHitBoxes = [];\r\n    // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\r\n    const lineWidths = this.lineWidths = [0];\r\n    const lineHeight = itemHeight + padding;\r\n    let totalHeight = titleHeight;\r\n\r\n    ctx.textAlign = 'left';\r\n    ctx.textBaseline = 'middle';\r\n\r\n    let row = -1;\r\n    let top = -lineHeight;\r\n    this.legendItems.forEach((legendItem, i) => {\r\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\r\n\r\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\r\n        totalHeight += lineHeight;\r\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\r\n        top += lineHeight;\r\n        row++;\r\n      }\r\n\r\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\r\n\r\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\r\n    });\r\n\r\n    return totalHeight;\r\n  }\r\n\r\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\r\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\r\n    const hitboxes = this.legendHitBoxes = [];\r\n    const columnSizes = this.columnSizes = [];\r\n    const heightLimit = maxHeight - titleHeight;\r\n\r\n    let totalWidth = padding;\r\n    let currentColWidth = 0;\r\n    let currentColHeight = 0;\r\n\r\n    let left = 0;\r\n    let col = 0;\r\n\r\n    this.legendItems.forEach((legendItem, i) => {\r\n      const {itemWidth, itemHeight} = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\r\n\r\n      // If too tall, go to new column\r\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\r\n        totalWidth += currentColWidth + padding;\r\n        columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\r\n        left += currentColWidth + padding;\r\n        col++;\r\n        currentColWidth = currentColHeight = 0;\r\n      }\r\n\r\n      // Store the hitbox width and height here. Final position will be updated in `draw`\r\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\r\n\r\n      // Get max width\r\n      currentColWidth = Math.max(currentColWidth, itemWidth);\r\n      currentColHeight += itemHeight + padding;\r\n    });\r\n\r\n    totalWidth += currentColWidth;\r\n    columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\r\n\r\n    return totalWidth;\r\n  }\r\n\r\n  adjustHitBoxes() {\r\n    if (!this.options.display) {\r\n      return;\r\n    }\r\n    const titleHeight = this._computeTitleHeight();\r\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\r\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\r\n    if (this.isHorizontal()) {\r\n      let row = 0;\r\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\r\n      for (const hitbox of hitboxes) {\r\n        if (row !== hitbox.row) {\r\n          row = hitbox.row;\r\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\r\n        }\r\n        hitbox.top += this.top + titleHeight + padding;\r\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\r\n        left += hitbox.width + padding;\r\n      }\r\n    } else {\r\n      let col = 0;\r\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\r\n      for (const hitbox of hitboxes) {\r\n        if (hitbox.col !== col) {\r\n          col = hitbox.col;\r\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\r\n        }\r\n        hitbox.top = top;\r\n        hitbox.left += this.left + padding;\r\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\r\n        top += hitbox.height + padding;\r\n      }\r\n    }\r\n  }\r\n\r\n  isHorizontal() {\r\n    return this.options.position === 'top' || this.options.position === 'bottom';\r\n  }\r\n\r\n  draw() {\r\n    if (this.options.display) {\r\n      const ctx = this.ctx;\r\n      clipArea(ctx, this);\r\n\r\n      this._draw();\r\n\r\n      unclipArea(ctx);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _draw() {\r\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\r\n    const {align, labels: labelOpts} = opts;\r\n    const defaultColor = defaults.color;\r\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\r\n    const labelFont = toFont(labelOpts.font);\r\n    const {padding} = labelOpts;\r\n    const fontSize = labelFont.size;\r\n    const halfFontSize = fontSize / 2;\r\n    let cursor;\r\n\r\n    this.drawTitle();\r\n\r\n    // Canvas setup\r\n    ctx.textAlign = rtlHelper.textAlign('left');\r\n    ctx.textBaseline = 'middle';\r\n    ctx.lineWidth = 0.5;\r\n    ctx.font = labelFont.string;\r\n\r\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\r\n\r\n    // current position\r\n    const drawLegendBox = function(x, y, legendItem) {\r\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\r\n        return;\r\n      }\r\n\r\n      // Set the ctx for the box\r\n      ctx.save();\r\n\r\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\r\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\r\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\r\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\r\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\r\n      ctx.lineWidth = lineWidth;\r\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\r\n\r\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\r\n\r\n      if (labelOpts.usePointStyle) {\r\n        // Recalculate x and y for drawPoint() because its expecting\r\n        // x and y to be center of figure (instead of top left)\r\n        const drawOptions = {\r\n          radius: boxHeight * Math.SQRT2 / 2,\r\n          pointStyle: legendItem.pointStyle,\r\n          rotation: legendItem.rotation,\r\n          borderWidth: lineWidth\r\n        };\r\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\r\n        const centerY = y + halfFontSize;\r\n\r\n        // Draw pointStyle as legend symbol\r\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\r\n      } else {\r\n        // Draw box as legend symbol\r\n        // Adjust position when boxHeight < fontSize (want it centered)\r\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\r\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\r\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\r\n\r\n        ctx.beginPath();\r\n\r\n        if (Object.values(borderRadius).some(v => v !== 0)) {\r\n          addRoundedRectPath(ctx, {\r\n            x: xBoxLeft,\r\n            y: yBoxTop,\r\n            w: boxWidth,\r\n            h: boxHeight,\r\n            radius: borderRadius,\r\n          });\r\n        } else {\r\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\r\n        }\r\n\r\n        ctx.fill();\r\n        if (lineWidth !== 0) {\r\n          ctx.stroke();\r\n        }\r\n      }\r\n\r\n      ctx.restore();\r\n    };\r\n\r\n    const fillText = function(x, y, legendItem) {\r\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\r\n        strikethrough: legendItem.hidden,\r\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\r\n      });\r\n    };\r\n\r\n    // Horizontal\r\n    const isHorizontal = this.isHorizontal();\r\n    const titleHeight = this._computeTitleHeight();\r\n    if (isHorizontal) {\r\n      cursor = {\r\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\r\n        y: this.top + padding + titleHeight,\r\n        line: 0\r\n      };\r\n    } else {\r\n      cursor = {\r\n        x: this.left + padding,\r\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\r\n        line: 0\r\n      };\r\n    }\r\n\r\n    overrideTextDirection(this.ctx, opts.textDirection);\r\n\r\n    const lineHeight = itemHeight + padding;\r\n    this.legendItems.forEach((legendItem, i) => {\r\n      ctx.strokeStyle = legendItem.fontColor; // for strikethrough effect\r\n      ctx.fillStyle = legendItem.fontColor; // render in correct colour\r\n\r\n      const textWidth = ctx.measureText(legendItem.text).width;\r\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\r\n      const width = boxWidth + halfFontSize + textWidth;\r\n      let x = cursor.x;\r\n      let y = cursor.y;\r\n\r\n      rtlHelper.setWidth(this.width);\r\n\r\n      if (isHorizontal) {\r\n        if (i > 0 && x + width + padding > this.right) {\r\n          y = cursor.y += lineHeight;\r\n          cursor.line++;\r\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\r\n        }\r\n      } else if (i > 0 && y + lineHeight > this.bottom) {\r\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\r\n        cursor.line++;\r\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\r\n      }\r\n\r\n      const realX = rtlHelper.x(x);\r\n\r\n      drawLegendBox(realX, y, legendItem);\r\n\r\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\r\n\r\n      // Fill the actual label\r\n      fillText(rtlHelper.x(x), y, legendItem);\r\n\r\n      if (isHorizontal) {\r\n        cursor.x += width + padding;\r\n      } else if (typeof legendItem.text !== 'string') {\r\n        const fontLineHeight = labelFont.lineHeight;\r\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);\r\n      } else {\r\n        cursor.y += lineHeight;\r\n      }\r\n    });\r\n\r\n    restoreTextDirection(this.ctx, opts.textDirection);\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawTitle() {\r\n    const opts = this.options;\r\n    const titleOpts = opts.title;\r\n    const titleFont = toFont(titleOpts.font);\r\n    const titlePadding = toPadding(titleOpts.padding);\r\n\r\n    if (!titleOpts.display) {\r\n      return;\r\n    }\r\n\r\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\r\n    const ctx = this.ctx;\r\n    const position = titleOpts.position;\r\n    const halfFontSize = titleFont.size / 2;\r\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\r\n    let y;\r\n\r\n    // These defaults are used when the legend is vertical.\r\n    // When horizontal, they are computed below.\r\n    let left = this.left;\r\n    let maxWidth = this.width;\r\n\r\n    if (this.isHorizontal()) {\r\n      // Move left / right so that the title is above the legend lines\r\n      maxWidth = Math.max(...this.lineWidths);\r\n      y = this.top + topPaddingPlusHalfFontSize;\r\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\r\n    } else {\r\n      // Move down so that the title is above the legend stack in every alignment\r\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\r\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\r\n    }\r\n\r\n    // Now that we know the left edge of the inner legend box, compute the correct\r\n    // X coordinate from the title alignment\r\n    const x = _alignStartEnd(position, left, left + maxWidth);\r\n\r\n    // Canvas setup\r\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\r\n    ctx.textBaseline = 'middle';\r\n    ctx.strokeStyle = titleOpts.color;\r\n    ctx.fillStyle = titleOpts.color;\r\n    ctx.font = titleFont.string;\r\n\r\n    renderText(ctx, titleOpts.text, x, y, titleFont);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _computeTitleHeight() {\r\n    const titleOpts = this.options.title;\r\n    const titleFont = toFont(titleOpts.font);\r\n    const titlePadding = toPadding(titleOpts.padding);\r\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getLegendItemAt(x, y) {\r\n    let i, hitBox, lh;\r\n\r\n    if (_isBetween(x, this.left, this.right)\r\n      && _isBetween(y, this.top, this.bottom)) {\r\n      // See if we are touching one of the dataset boxes\r\n      lh = this.legendHitBoxes;\r\n      for (i = 0; i < lh.length; ++i) {\r\n        hitBox = lh[i];\r\n\r\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\r\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\r\n          // Touching an element\r\n          return this.legendItems[i];\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n\t * Handle an event\r\n\t * @param {ChartEvent} e - The event to handle\r\n\t */\r\n  handleEvent(e) {\r\n    const opts = this.options;\r\n    if (!isListened(e.type, opts)) {\r\n      return;\r\n    }\r\n\r\n    // Chart event already has relative position in it\r\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\r\n\r\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\r\n      const previous = this._hoveredItem;\r\n      const sameItem = itemsEqual(previous, hoveredItem);\r\n      if (previous && !sameItem) {\r\n        call(opts.onLeave, [e, previous, this], this);\r\n      }\r\n\r\n      this._hoveredItem = hoveredItem;\r\n\r\n      if (hoveredItem && !sameItem) {\r\n        call(opts.onHover, [e, hoveredItem, this], this);\r\n      }\r\n    } else if (hoveredItem) {\r\n      call(opts.onClick, [e, hoveredItem, this], this);\r\n    }\r\n  }\r\n}\r\n\r\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\r\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\r\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\r\n  return {itemWidth, itemHeight};\r\n}\r\n\r\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\r\n  let legendItemText = legendItem.text;\r\n  if (legendItemText && typeof legendItemText !== 'string') {\r\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\r\n  }\r\n  return boxWidth + (labelFont.size / 2) + ctx.measureText(legendItemText).width;\r\n}\r\n\r\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\r\n  let itemHeight = _itemHeight;\r\n  if (typeof legendItem.text !== 'string') {\r\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\r\n  }\r\n  return itemHeight;\r\n}\r\n\r\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\r\n  const labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;\r\n  return fontLineHeight * labelHeight;\r\n}\r\n\r\nfunction isListened(type, opts) {\r\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\r\n    return true;\r\n  }\r\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport default {\r\n  id: 'legend',\r\n\r\n  /**\r\n\t * For tests\r\n\t * @private\r\n\t */\r\n  _element: Legend,\r\n\r\n  start(chart, _args, options) {\r\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\r\n    layouts.configure(chart, legend, options);\r\n    layouts.addBox(chart, legend);\r\n  },\r\n\r\n  stop(chart) {\r\n    layouts.removeBox(chart, chart.legend);\r\n    delete chart.legend;\r\n  },\r\n\r\n  // During the beforeUpdate step, the layout configuration needs to run\r\n  // This ensures that if the legend position changes (via an option update)\r\n  // the layout system respects the change. See https://github.com/chartjs/Chart.js/issues/7527\r\n  beforeUpdate(chart, _args, options) {\r\n    const legend = chart.legend;\r\n    layouts.configure(chart, legend, options);\r\n    legend.options = options;\r\n  },\r\n\r\n  // The labels need to be built after datasets are updated to ensure that colors\r\n  // and other styling are correct. See https://github.com/chartjs/Chart.js/issues/6968\r\n  afterUpdate(chart) {\r\n    const legend = chart.legend;\r\n    legend.buildLabels();\r\n    legend.adjustHitBoxes();\r\n  },\r\n\r\n\r\n  afterEvent(chart, args) {\r\n    if (!args.replay) {\r\n      chart.legend.handleEvent(args.event);\r\n    }\r\n  },\r\n\r\n  defaults: {\r\n    display: true,\r\n    position: 'top',\r\n    align: 'center',\r\n    fullSize: true,\r\n    reverse: false,\r\n    weight: 1000,\r\n\r\n    // a callback that will handle\r\n    onClick(e, legendItem, legend) {\r\n      const index = legendItem.datasetIndex;\r\n      const ci = legend.chart;\r\n      if (ci.isDatasetVisible(index)) {\r\n        ci.hide(index);\r\n        legendItem.hidden = true;\r\n      } else {\r\n        ci.show(index);\r\n        legendItem.hidden = false;\r\n      }\r\n    },\r\n\r\n    onHover: null,\r\n    onLeave: null,\r\n\r\n    labels: {\r\n      color: (ctx) => ctx.chart.options.color,\r\n      boxWidth: 40,\r\n      padding: 10,\r\n      // Generates labels shown in the legend\r\n      // Valid properties to return:\r\n      // text : text to display\r\n      // fillStyle : fill of coloured box\r\n      // strokeStyle: stroke of coloured box\r\n      // hidden : if this legend item refers to a hidden item\r\n      // lineCap : cap style for line\r\n      // lineDash\r\n      // lineDashOffset :\r\n      // lineJoin :\r\n      // lineWidth :\r\n      generateLabels(chart) {\r\n        const datasets = chart.data.datasets;\r\n        const {labels: {usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius}} = chart.legend.options;\r\n\r\n        return chart._getSortedDatasetMetas().map((meta) => {\r\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\r\n          const borderWidth = toPadding(style.borderWidth);\r\n\r\n          return {\r\n            text: datasets[meta.index].label,\r\n            fillStyle: style.backgroundColor,\r\n            fontColor: color,\r\n            hidden: !meta.visible,\r\n            lineCap: style.borderCapStyle,\r\n            lineDash: style.borderDash,\r\n            lineDashOffset: style.borderDashOffset,\r\n            lineJoin: style.borderJoinStyle,\r\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\r\n            strokeStyle: style.borderColor,\r\n            pointStyle: pointStyle || style.pointStyle,\r\n            rotation: style.rotation,\r\n            textAlign: textAlign || style.textAlign,\r\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\r\n\r\n            // Below is extra data used for toggling the datasets\r\n            datasetIndex: meta.index\r\n          };\r\n        }, this);\r\n      }\r\n    },\r\n\r\n    title: {\r\n      color: (ctx) => ctx.chart.options.color,\r\n      display: false,\r\n      position: 'center',\r\n      text: '',\r\n    }\r\n  },\r\n\r\n  descriptors: {\r\n    _scriptable: (name) => !name.startsWith('on'),\r\n    labels: {\r\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\r\n    }\r\n  },\r\n};\r\n","import Element from '../core/core.element';\r\nimport layouts from '../core/core.layouts';\r\nimport {PI, isArray, toPadding, toFont} from '../helpers';\r\nimport {_toLeftRightCenter, _alignStartEnd} from '../helpers/helpers.extras';\r\nimport {renderText} from '../helpers/helpers.canvas';\r\n\r\nexport class Title extends Element {\r\n  /**\r\n\t * @param {{ ctx: any; options: any; chart: any; }} config\r\n\t */\r\n  constructor(config) {\r\n    super();\r\n\r\n    this.chart = config.chart;\r\n    this.options = config.options;\r\n    this.ctx = config.ctx;\r\n    this._padding = undefined;\r\n    this.top = undefined;\r\n    this.bottom = undefined;\r\n    this.left = undefined;\r\n    this.right = undefined;\r\n    this.width = undefined;\r\n    this.height = undefined;\r\n    this.position = undefined;\r\n    this.weight = undefined;\r\n    this.fullSize = undefined;\r\n  }\r\n\r\n  update(maxWidth, maxHeight) {\r\n    const opts = this.options;\r\n\r\n    this.left = 0;\r\n    this.top = 0;\r\n\r\n    if (!opts.display) {\r\n      this.width = this.height = this.right = this.bottom = 0;\r\n      return;\r\n    }\r\n\r\n    this.width = this.right = maxWidth;\r\n    this.height = this.bottom = maxHeight;\r\n\r\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\r\n    this._padding = toPadding(opts.padding);\r\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\r\n\r\n    if (this.isHorizontal()) {\r\n      this.height = textSize;\r\n    } else {\r\n      this.width = textSize;\r\n    }\r\n  }\r\n\r\n  isHorizontal() {\r\n    const pos = this.options.position;\r\n    return pos === 'top' || pos === 'bottom';\r\n  }\r\n\r\n  _drawArgs(offset) {\r\n    const {top, left, bottom, right, options} = this;\r\n    const align = options.align;\r\n    let rotation = 0;\r\n    let maxWidth, titleX, titleY;\r\n\r\n    if (this.isHorizontal()) {\r\n      titleX = _alignStartEnd(align, left, right);\r\n      titleY = top + offset;\r\n      maxWidth = right - left;\r\n    } else {\r\n      if (options.position === 'left') {\r\n        titleX = left + offset;\r\n        titleY = _alignStartEnd(align, bottom, top);\r\n        rotation = PI * -0.5;\r\n      } else {\r\n        titleX = right - offset;\r\n        titleY = _alignStartEnd(align, top, bottom);\r\n        rotation = PI * 0.5;\r\n      }\r\n      maxWidth = bottom - top;\r\n    }\r\n    return {titleX, titleY, maxWidth, rotation};\r\n  }\r\n\r\n  draw() {\r\n    const ctx = this.ctx;\r\n    const opts = this.options;\r\n\r\n    if (!opts.display) {\r\n      return;\r\n    }\r\n\r\n    const fontOpts = toFont(opts.font);\r\n    const lineHeight = fontOpts.lineHeight;\r\n    const offset = lineHeight / 2 + this._padding.top;\r\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\r\n\r\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\r\n      color: opts.color,\r\n      maxWidth,\r\n      rotation,\r\n      textAlign: _toLeftRightCenter(opts.align),\r\n      textBaseline: 'middle',\r\n      translation: [titleX, titleY],\r\n    });\r\n  }\r\n}\r\n\r\nfunction createTitle(chart, titleOpts) {\r\n  const title = new Title({\r\n    ctx: chart.ctx,\r\n    options: titleOpts,\r\n    chart\r\n  });\r\n\r\n  layouts.configure(chart, title, titleOpts);\r\n  layouts.addBox(chart, title);\r\n  chart.titleBlock = title;\r\n}\r\n\r\nexport default {\r\n  id: 'title',\r\n\r\n  /**\r\n\t * For tests\r\n\t * @private\r\n\t */\r\n  _element: Title,\r\n\r\n  start(chart, _args, options) {\r\n    createTitle(chart, options);\r\n  },\r\n\r\n  stop(chart) {\r\n    const titleBlock = chart.titleBlock;\r\n    layouts.removeBox(chart, titleBlock);\r\n    delete chart.titleBlock;\r\n  },\r\n\r\n  beforeUpdate(chart, _args, options) {\r\n    const title = chart.titleBlock;\r\n    layouts.configure(chart, title, options);\r\n    title.options = options;\r\n  },\r\n\r\n  defaults: {\r\n    align: 'center',\r\n    display: false,\r\n    font: {\r\n      weight: 'bold',\r\n    },\r\n    fullSize: true,\r\n    padding: 10,\r\n    position: 'top',\r\n    text: '',\r\n    weight: 2000         // by default greater than legend (1000) to be above\r\n  },\r\n\r\n  defaultRoutes: {\r\n    color: 'color'\r\n  },\r\n\r\n  descriptors: {\r\n    _scriptable: true,\r\n    _indexable: false,\r\n  },\r\n};\r\n","import {Title} from './plugin.title';\r\nimport layouts from '../core/core.layouts';\r\n\r\nconst map = new WeakMap();\r\n\r\nexport default {\r\n  id: 'subtitle',\r\n\r\n  start(chart, _args, options) {\r\n    const title = new Title({\r\n      ctx: chart.ctx,\r\n      options,\r\n      chart\r\n    });\r\n\r\n    layouts.configure(chart, title, options);\r\n    layouts.addBox(chart, title);\r\n    map.set(chart, title);\r\n  },\r\n\r\n  stop(chart) {\r\n    layouts.removeBox(chart, map.get(chart));\r\n    map.delete(chart);\r\n  },\r\n\r\n  beforeUpdate(chart, _args, options) {\r\n    const title = map.get(chart);\r\n    layouts.configure(chart, title, options);\r\n    title.options = options;\r\n  },\r\n\r\n  defaults: {\r\n    align: 'center',\r\n    display: false,\r\n    font: {\r\n      weight: 'normal',\r\n    },\r\n    fullSize: true,\r\n    padding: 0,\r\n    position: 'top',\r\n    text: '',\r\n    weight: 1500         // by default greater than legend (1000) and smaller than title (2000)\r\n  },\r\n\r\n  defaultRoutes: {\r\n    color: 'color'\r\n  },\r\n\r\n  descriptors: {\r\n    _scriptable: true,\r\n    _indexable: false,\r\n  },\r\n};\r\n","import Animations from '../core/core.animations';\r\nimport Element from '../core/core.element';\r\nimport {addRoundedRectPath} from '../helpers/helpers.canvas';\r\nimport {each, noop, isNullOrUndef, isArray, _elementsEqual, isObject} from '../helpers/helpers.core';\r\nimport {toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options';\r\nimport {getRtlAdapter, overrideTextDirection, restoreTextDirection} from '../helpers/helpers.rtl';\r\nimport {distanceBetweenPoints, _limitValue} from '../helpers/helpers.math';\r\nimport {createContext, drawPoint} from '../helpers';\r\n\r\n/**\r\n * @typedef { import(\"../platform/platform.base\").Chart } Chart\r\n * @typedef { import(\"../../types\").ChartEvent } ChartEvent\r\n * @typedef { import(\"../../types\").ActiveElement } ActiveElement\r\n * @typedef { import(\"../core/core.interaction\").InteractionItem } InteractionItem\r\n */\r\n\r\nconst positioners = {\r\n  /**\r\n\t * Average mode places the tooltip at the average position of the elements shown\r\n\t */\r\n  average(items) {\r\n    if (!items.length) {\r\n      return false;\r\n    }\r\n\r\n    let i, len;\r\n    let x = 0;\r\n    let y = 0;\r\n    let count = 0;\r\n\r\n    for (i = 0, len = items.length; i < len; ++i) {\r\n      const el = items[i].element;\r\n      if (el && el.hasValue()) {\r\n        const pos = el.tooltipPosition();\r\n        x += pos.x;\r\n        y += pos.y;\r\n        ++count;\r\n      }\r\n    }\r\n\r\n    return {\r\n      x: x / count,\r\n      y: y / count\r\n    };\r\n  },\r\n\r\n  /**\r\n\t * Gets the tooltip position nearest of the item nearest to the event position\r\n\t */\r\n  nearest(items, eventPosition) {\r\n    if (!items.length) {\r\n      return false;\r\n    }\r\n\r\n    let x = eventPosition.x;\r\n    let y = eventPosition.y;\r\n    let minDistance = Number.POSITIVE_INFINITY;\r\n    let i, len, nearestElement;\r\n\r\n    for (i = 0, len = items.length; i < len; ++i) {\r\n      const el = items[i].element;\r\n      if (el && el.hasValue()) {\r\n        const center = el.getCenterPoint();\r\n        const d = distanceBetweenPoints(eventPosition, center);\r\n\r\n        if (d < minDistance) {\r\n          minDistance = d;\r\n          nearestElement = el;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (nearestElement) {\r\n      const tp = nearestElement.tooltipPosition();\r\n      x = tp.x;\r\n      y = tp.y;\r\n    }\r\n\r\n    return {\r\n      x,\r\n      y\r\n    };\r\n  }\r\n};\r\n\r\n// Helper to push or concat based on if the 2nd parameter is an array or not\r\nfunction pushOrConcat(base, toPush) {\r\n  if (toPush) {\r\n    if (isArray(toPush)) {\r\n      // base = base.concat(toPush);\r\n      Array.prototype.push.apply(base, toPush);\r\n    } else {\r\n      base.push(toPush);\r\n    }\r\n  }\r\n\r\n  return base;\r\n}\r\n\r\n/**\r\n * Returns array of strings split by newline\r\n * @param {*} str - The value to split by newline.\r\n * @returns {string|string[]} value if newline present - Returned from String split() method\r\n * @function\r\n */\r\nfunction splitNewlines(str) {\r\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\r\n    return str.split('\\n');\r\n  }\r\n  return str;\r\n}\r\n\r\n\r\n/**\r\n * Private helper to create a tooltip item model\r\n * @param {Chart} chart\r\n * @param {ActiveElement} item - {element, index, datasetIndex} to create the tooltip item for\r\n * @return new tooltip item\r\n */\r\nfunction createTooltipItem(chart, item) {\r\n  const {element, datasetIndex, index} = item;\r\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\r\n  const {label, value} = controller.getLabelAndValue(index);\r\n\r\n  return {\r\n    chart,\r\n    label,\r\n    parsed: controller.getParsed(index),\r\n    raw: chart.data.datasets[datasetIndex].data[index],\r\n    formattedValue: value,\r\n    dataset: controller.getDataset(),\r\n    dataIndex: index,\r\n    datasetIndex,\r\n    element\r\n  };\r\n}\r\n\r\n/**\r\n * Get the size of the tooltip\r\n */\r\nfunction getTooltipSize(tooltip, options) {\r\n  const ctx = tooltip.chart.ctx;\r\n  const {body, footer, title} = tooltip;\r\n  const {boxWidth, boxHeight} = options;\r\n  const bodyFont = toFont(options.bodyFont);\r\n  const titleFont = toFont(options.titleFont);\r\n  const footerFont = toFont(options.footerFont);\r\n  const titleLineCount = title.length;\r\n  const footerLineCount = footer.length;\r\n  const bodyLineItemCount = body.length;\r\n\r\n  const padding = toPadding(options.padding);\r\n  let height = padding.height;\r\n  let width = 0;\r\n\r\n  // Count of all lines in the body\r\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\r\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\r\n\r\n  if (titleLineCount) {\r\n    height += titleLineCount * titleFont.lineHeight\r\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\r\n\t\t\t+ options.titleMarginBottom;\r\n  }\r\n  if (combinedBodyLength) {\r\n    // Body lines may include some extra height depending on boxHeight\r\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\r\n    height += bodyLineItemCount * bodyLineHeight\r\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\r\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\r\n  }\r\n  if (footerLineCount) {\r\n    height += options.footerMarginTop\r\n\t\t\t+ footerLineCount * footerFont.lineHeight\r\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\r\n  }\r\n\r\n  // Title width\r\n  let widthPadding = 0;\r\n  const maxLineWidth = function(line) {\r\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\r\n  };\r\n\r\n  ctx.save();\r\n\r\n  ctx.font = titleFont.string;\r\n  each(tooltip.title, maxLineWidth);\r\n\r\n  // Body width\r\n  ctx.font = bodyFont.string;\r\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\r\n\r\n  // Body lines may include some extra width due to the color box\r\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\r\n  each(body, (bodyItem) => {\r\n    each(bodyItem.before, maxLineWidth);\r\n    each(bodyItem.lines, maxLineWidth);\r\n    each(bodyItem.after, maxLineWidth);\r\n  });\r\n\r\n  // Reset back to 0\r\n  widthPadding = 0;\r\n\r\n  // Footer width\r\n  ctx.font = footerFont.string;\r\n  each(tooltip.footer, maxLineWidth);\r\n\r\n  ctx.restore();\r\n\r\n  // Add padding\r\n  width += padding.width;\r\n\r\n  return {width, height};\r\n}\r\n\r\nfunction determineYAlign(chart, size) {\r\n  const {y, height} = size;\r\n\r\n  if (y < height / 2) {\r\n    return 'top';\r\n  } else if (y > (chart.height - height / 2)) {\r\n    return 'bottom';\r\n  }\r\n  return 'center';\r\n}\r\n\r\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\r\n  const {x, width} = size;\r\n  const caret = options.caretSize + options.caretPadding;\r\n  if (xAlign === 'left' && x + width + caret > chart.width) {\r\n    return true;\r\n  }\r\n\r\n  if (xAlign === 'right' && x - width - caret < 0) {\r\n    return true;\r\n  }\r\n}\r\n\r\nfunction determineXAlign(chart, options, size, yAlign) {\r\n  const {x, width} = size;\r\n  const {width: chartWidth, chartArea: {left, right}} = chart;\r\n  let xAlign = 'center';\r\n\r\n  if (yAlign === 'center') {\r\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\r\n  } else if (x <= width / 2) {\r\n    xAlign = 'left';\r\n  } else if (x >= chartWidth - width / 2) {\r\n    xAlign = 'right';\r\n  }\r\n\r\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\r\n    xAlign = 'center';\r\n  }\r\n\r\n  return xAlign;\r\n}\r\n\r\n/**\r\n * Helper to get the alignment of a tooltip given the size\r\n */\r\nfunction determineAlignment(chart, options, size) {\r\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\r\n\r\n  return {\r\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\r\n    yAlign\r\n  };\r\n}\r\n\r\nfunction alignX(size, xAlign) {\r\n  let {x, width} = size;\r\n  if (xAlign === 'right') {\r\n    x -= width;\r\n  } else if (xAlign === 'center') {\r\n    x -= (width / 2);\r\n  }\r\n  return x;\r\n}\r\n\r\nfunction alignY(size, yAlign, paddingAndSize) {\r\n  // eslint-disable-next-line prefer-const\r\n  let {y, height} = size;\r\n  if (yAlign === 'top') {\r\n    y += paddingAndSize;\r\n  } else if (yAlign === 'bottom') {\r\n    y -= height + paddingAndSize;\r\n  } else {\r\n    y -= (height / 2);\r\n  }\r\n  return y;\r\n}\r\n\r\n/**\r\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\r\n */\r\nfunction getBackgroundPoint(options, size, alignment, chart) {\r\n  const {caretSize, caretPadding, cornerRadius} = options;\r\n  const {xAlign, yAlign} = alignment;\r\n  const paddingAndSize = caretSize + caretPadding;\r\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\r\n\r\n  let x = alignX(size, xAlign);\r\n  const y = alignY(size, yAlign, paddingAndSize);\r\n\r\n  if (yAlign === 'center') {\r\n    if (xAlign === 'left') {\r\n      x += paddingAndSize;\r\n    } else if (xAlign === 'right') {\r\n      x -= paddingAndSize;\r\n    }\r\n  } else if (xAlign === 'left') {\r\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\r\n  } else if (xAlign === 'right') {\r\n    x += Math.max(topRight, bottomRight) + caretSize;\r\n  }\r\n\r\n  return {\r\n    x: _limitValue(x, 0, chart.width - size.width),\r\n    y: _limitValue(y, 0, chart.height - size.height)\r\n  };\r\n}\r\n\r\nfunction getAlignedX(tooltip, align, options) {\r\n  const padding = toPadding(options.padding);\r\n\r\n  return align === 'center'\r\n    ? tooltip.x + tooltip.width / 2\r\n    : align === 'right'\r\n      ? tooltip.x + tooltip.width - padding.right\r\n      : tooltip.x + padding.left;\r\n}\r\n\r\n/**\r\n * Helper to build before and after body lines\r\n */\r\nfunction getBeforeAfterBodyLines(callback) {\r\n  return pushOrConcat([], splitNewlines(callback));\r\n}\r\n\r\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\r\n  return createContext(parent, {\r\n    tooltip,\r\n    tooltipItems,\r\n    type: 'tooltip'\r\n  });\r\n}\r\n\r\nfunction overrideCallbacks(callbacks, context) {\r\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\r\n  return override ? callbacks.override(override) : callbacks;\r\n}\r\n\r\nconst defaultCallbacks = {\r\n  // Args are: (tooltipItems, data)\r\n  beforeTitle: noop,\r\n  title(tooltipItems) {\r\n    if (tooltipItems.length > 0) {\r\n      const item = tooltipItems[0];\r\n      const labels = item.chart.data.labels;\r\n      const labelCount = labels ? labels.length : 0;\r\n\r\n      if (this && this.options && this.options.mode === 'dataset') {\r\n        return item.dataset.label || '';\r\n      } else if (item.label) {\r\n        return item.label;\r\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\r\n        return labels[item.dataIndex];\r\n      }\r\n    }\r\n\r\n    return '';\r\n  },\r\n  afterTitle: noop,\r\n\r\n  // Args are: (tooltipItems, data)\r\n  beforeBody: noop,\r\n\r\n  // Args are: (tooltipItem, data)\r\n  beforeLabel: noop,\r\n  label(tooltipItem) {\r\n    if (this && this.options && this.options.mode === 'dataset') {\r\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\r\n    }\r\n\r\n    let label = tooltipItem.dataset.label || '';\r\n\r\n    if (label) {\r\n      label += ': ';\r\n    }\r\n    const value = tooltipItem.formattedValue;\r\n    if (!isNullOrUndef(value)) {\r\n      label += value;\r\n    }\r\n    return label;\r\n  },\r\n  labelColor(tooltipItem) {\r\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\r\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\r\n    return {\r\n      borderColor: options.borderColor,\r\n      backgroundColor: options.backgroundColor,\r\n      borderWidth: options.borderWidth,\r\n      borderDash: options.borderDash,\r\n      borderDashOffset: options.borderDashOffset,\r\n      borderRadius: 0,\r\n    };\r\n  },\r\n  labelTextColor() {\r\n    return this.options.bodyColor;\r\n  },\r\n  labelPointStyle(tooltipItem) {\r\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\r\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\r\n    return {\r\n      pointStyle: options.pointStyle,\r\n      rotation: options.rotation,\r\n    };\r\n  },\r\n  afterLabel: noop,\r\n\r\n  // Args are: (tooltipItems, data)\r\n  afterBody: noop,\r\n\r\n  // Args are: (tooltipItems, data)\r\n  beforeFooter: noop,\r\n  footer: noop,\r\n  afterFooter: noop\r\n};\r\n\r\n/**\r\n * Invoke callback from object with context and arguments.\r\n * If callback returns `undefined`, then will be invoked default callback.\r\n * @param {Record<keyof typeof defaultCallbacks, Function>} callbacks\r\n * @param {keyof typeof defaultCallbacks} name\r\n * @param {*} ctx\r\n * @param {*} arg\r\n * @returns {any}\r\n */\r\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\r\n  const result = callbacks[name].call(ctx, arg);\r\n\r\n  if (typeof result === 'undefined') {\r\n    return defaultCallbacks[name].call(ctx, arg);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport class Tooltip extends Element {\r\n\r\n  /**\r\n   * @namespace Chart.Tooltip.positioners\r\n   */\r\n  static positioners = positioners;\r\n\r\n  constructor(config) {\r\n    super();\r\n\r\n    this.opacity = 0;\r\n    this._active = [];\r\n    this._eventPosition = undefined;\r\n    this._size = undefined;\r\n    this._cachedAnimations = undefined;\r\n    this._tooltipItems = [];\r\n    this.$animations = undefined;\r\n    this.$context = undefined;\r\n    this.chart = config.chart;\r\n    this.options = config.options;\r\n    this.dataPoints = undefined;\r\n    this.title = undefined;\r\n    this.beforeBody = undefined;\r\n    this.body = undefined;\r\n    this.afterBody = undefined;\r\n    this.footer = undefined;\r\n    this.xAlign = undefined;\r\n    this.yAlign = undefined;\r\n    this.x = undefined;\r\n    this.y = undefined;\r\n    this.height = undefined;\r\n    this.width = undefined;\r\n    this.caretX = undefined;\r\n    this.caretY = undefined;\r\n    // TODO: V4, make this private, rename to `_labelStyles`, and combine with `labelPointStyles`\r\n    // and `labelTextColors` to create a single variable\r\n    this.labelColors = undefined;\r\n    this.labelPointStyles = undefined;\r\n    this.labelTextColors = undefined;\r\n  }\r\n\r\n  initialize(options) {\r\n    this.options = options;\r\n    this._cachedAnimations = undefined;\r\n    this.$context = undefined;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _resolveAnimations() {\r\n    const cached = this._cachedAnimations;\r\n\r\n    if (cached) {\r\n      return cached;\r\n    }\r\n\r\n    const chart = this.chart;\r\n    const options = this.options.setContext(this.getContext());\r\n    const opts = options.enabled && chart.options.animation && options.animations;\r\n    const animations = new Animations(this.chart, opts);\r\n    if (opts._cacheable) {\r\n      this._cachedAnimations = Object.freeze(animations);\r\n    }\r\n\r\n    return animations;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getContext() {\r\n    return this.$context ||\r\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\r\n  }\r\n\r\n  getTitle(context, options) {\r\n    const {callbacks} = options;\r\n\r\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\r\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\r\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\r\n\r\n    let lines = [];\r\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\r\n    lines = pushOrConcat(lines, splitNewlines(title));\r\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\r\n\r\n    return lines;\r\n  }\r\n\r\n  getBeforeBody(tooltipItems, options) {\r\n    return getBeforeAfterBodyLines(\r\n      invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems)\r\n    );\r\n  }\r\n\r\n  getBody(tooltipItems, options) {\r\n    const {callbacks} = options;\r\n    const bodyItems = [];\r\n\r\n    each(tooltipItems, (context) => {\r\n      const bodyItem = {\r\n        before: [],\r\n        lines: [],\r\n        after: []\r\n      };\r\n      const scoped = overrideCallbacks(callbacks, context);\r\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\r\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\r\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\r\n\r\n      bodyItems.push(bodyItem);\r\n    });\r\n\r\n    return bodyItems;\r\n  }\r\n\r\n  getAfterBody(tooltipItems, options) {\r\n    return getBeforeAfterBodyLines(\r\n      invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems)\r\n    );\r\n  }\r\n\r\n  // Get the footer and beforeFooter and afterFooter lines\r\n  getFooter(tooltipItems, options) {\r\n    const {callbacks} = options;\r\n\r\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\r\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\r\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\r\n\r\n    let lines = [];\r\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\r\n    lines = pushOrConcat(lines, splitNewlines(footer));\r\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\r\n\r\n    return lines;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _createItems(options) {\r\n    const active = this._active;\r\n    const data = this.chart.data;\r\n    const labelColors = [];\r\n    const labelPointStyles = [];\r\n    const labelTextColors = [];\r\n    let tooltipItems = [];\r\n    let i, len;\r\n\r\n    for (i = 0, len = active.length; i < len; ++i) {\r\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\r\n    }\r\n\r\n    // If the user provided a filter function, use it to modify the tooltip items\r\n    if (options.filter) {\r\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\r\n    }\r\n\r\n    // If the user provided a sorting function, use it to modify the tooltip items\r\n    if (options.itemSort) {\r\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\r\n    }\r\n\r\n    // Determine colors for boxes\r\n    each(tooltipItems, (context) => {\r\n      const scoped = overrideCallbacks(options.callbacks, context);\r\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\r\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\r\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\r\n    });\r\n\r\n    this.labelColors = labelColors;\r\n    this.labelPointStyles = labelPointStyles;\r\n    this.labelTextColors = labelTextColors;\r\n    this.dataPoints = tooltipItems;\r\n    return tooltipItems;\r\n  }\r\n\r\n  update(changed, replay) {\r\n    const options = this.options.setContext(this.getContext());\r\n    const active = this._active;\r\n    let properties;\r\n    let tooltipItems = [];\r\n\r\n    if (!active.length) {\r\n      if (this.opacity !== 0) {\r\n        properties = {\r\n          opacity: 0\r\n        };\r\n      }\r\n    } else {\r\n      const position = positioners[options.position].call(this, active, this._eventPosition);\r\n      tooltipItems = this._createItems(options);\r\n\r\n      this.title = this.getTitle(tooltipItems, options);\r\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\r\n      this.body = this.getBody(tooltipItems, options);\r\n      this.afterBody = this.getAfterBody(tooltipItems, options);\r\n      this.footer = this.getFooter(tooltipItems, options);\r\n\r\n      const size = this._size = getTooltipSize(this, options);\r\n      const positionAndSize = Object.assign({}, position, size);\r\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\r\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\r\n\r\n      this.xAlign = alignment.xAlign;\r\n      this.yAlign = alignment.yAlign;\r\n\r\n      properties = {\r\n        opacity: 1,\r\n        x: backgroundPoint.x,\r\n        y: backgroundPoint.y,\r\n        width: size.width,\r\n        height: size.height,\r\n        caretX: position.x,\r\n        caretY: position.y\r\n      };\r\n    }\r\n\r\n    this._tooltipItems = tooltipItems;\r\n    this.$context = undefined;\r\n\r\n    if (properties) {\r\n      this._resolveAnimations().update(this, properties);\r\n    }\r\n\r\n    if (changed && options.external) {\r\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\r\n    }\r\n  }\r\n\r\n  drawCaret(tooltipPoint, ctx, size, options) {\r\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\r\n\r\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\r\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\r\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\r\n  }\r\n\r\n  getCaretPosition(tooltipPoint, size, options) {\r\n    const {xAlign, yAlign} = this;\r\n    const {caretSize, cornerRadius} = options;\r\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\r\n    const {x: ptX, y: ptY} = tooltipPoint;\r\n    const {width, height} = size;\r\n    let x1, x2, x3, y1, y2, y3;\r\n\r\n    if (yAlign === 'center') {\r\n      y2 = ptY + (height / 2);\r\n\r\n      if (xAlign === 'left') {\r\n        x1 = ptX;\r\n        x2 = x1 - caretSize;\r\n\r\n        // Left draws bottom -> top, this y1 is on the bottom\r\n        y1 = y2 + caretSize;\r\n        y3 = y2 - caretSize;\r\n      } else {\r\n        x1 = ptX + width;\r\n        x2 = x1 + caretSize;\r\n\r\n        // Right draws top -> bottom, thus y1 is on the top\r\n        y1 = y2 - caretSize;\r\n        y3 = y2 + caretSize;\r\n      }\r\n\r\n      x3 = x1;\r\n    } else {\r\n      if (xAlign === 'left') {\r\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\r\n      } else if (xAlign === 'right') {\r\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\r\n      } else {\r\n        x2 = this.caretX;\r\n      }\r\n\r\n      if (yAlign === 'top') {\r\n        y1 = ptY;\r\n        y2 = y1 - caretSize;\r\n\r\n        // Top draws left -> right, thus x1 is on the left\r\n        x1 = x2 - caretSize;\r\n        x3 = x2 + caretSize;\r\n      } else {\r\n        y1 = ptY + height;\r\n        y2 = y1 + caretSize;\r\n\r\n        // Bottom draws right -> left, thus x1 is on the right\r\n        x1 = x2 + caretSize;\r\n        x3 = x2 - caretSize;\r\n      }\r\n      y3 = y1;\r\n    }\r\n    return {x1, x2, x3, y1, y2, y3};\r\n  }\r\n\r\n  drawTitle(pt, ctx, options) {\r\n    const title = this.title;\r\n    const length = title.length;\r\n    let titleFont, titleSpacing, i;\r\n\r\n    if (length) {\r\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\r\n\r\n      pt.x = getAlignedX(this, options.titleAlign, options);\r\n\r\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\r\n      ctx.textBaseline = 'middle';\r\n\r\n      titleFont = toFont(options.titleFont);\r\n      titleSpacing = options.titleSpacing;\r\n\r\n      ctx.fillStyle = options.titleColor;\r\n      ctx.font = titleFont.string;\r\n\r\n      for (i = 0; i < length; ++i) {\r\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\r\n        pt.y += titleFont.lineHeight + titleSpacing; // Line Height and spacing\r\n\r\n        if (i + 1 === length) {\r\n          pt.y += options.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\r\n    const labelColors = this.labelColors[i];\r\n    const labelPointStyle = this.labelPointStyles[i];\r\n    const {boxHeight, boxWidth, boxPadding} = options;\r\n    const bodyFont = toFont(options.bodyFont);\r\n    const colorX = getAlignedX(this, 'left', options);\r\n    const rtlColorX = rtlHelper.x(colorX);\r\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\r\n    const colorY = pt.y + yOffSet;\r\n\r\n    if (options.usePointStyle) {\r\n      const drawOptions = {\r\n        radius: Math.min(boxWidth, boxHeight) / 2, // fit the circle in the box\r\n        pointStyle: labelPointStyle.pointStyle,\r\n        rotation: labelPointStyle.rotation,\r\n        borderWidth: 1\r\n      };\r\n      // Recalculate x and y for drawPoint() because its expecting\r\n      // x and y to be center of figure (instead of top left)\r\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\r\n      const centerY = colorY + boxHeight / 2;\r\n\r\n      // Fill the point with white so that colours merge nicely if the opacity is < 1\r\n      ctx.strokeStyle = options.multiKeyBackground;\r\n      ctx.fillStyle = options.multiKeyBackground;\r\n      drawPoint(ctx, drawOptions, centerX, centerY);\r\n\r\n      // Draw the point\r\n      ctx.strokeStyle = labelColors.borderColor;\r\n      ctx.fillStyle = labelColors.backgroundColor;\r\n      drawPoint(ctx, drawOptions, centerX, centerY);\r\n    } else {\r\n      // Border\r\n      ctx.lineWidth = isObject(labelColors.borderWidth) ? Math.max(...Object.values(labelColors.borderWidth)) : (labelColors.borderWidth || 1); // TODO, v4 remove fallback\r\n      ctx.strokeStyle = labelColors.borderColor;\r\n      ctx.setLineDash(labelColors.borderDash || []);\r\n      ctx.lineDashOffset = labelColors.borderDashOffset || 0;\r\n\r\n      // Fill a white rect so that colours merge nicely if the opacity is < 1\r\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);\r\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);\r\n      const borderRadius = toTRBLCorners(labelColors.borderRadius);\r\n\r\n      if (Object.values(borderRadius).some(v => v !== 0)) {\r\n        ctx.beginPath();\r\n        ctx.fillStyle = options.multiKeyBackground;\r\n        addRoundedRectPath(ctx, {\r\n          x: outerX,\r\n          y: colorY,\r\n          w: boxWidth,\r\n          h: boxHeight,\r\n          radius: borderRadius,\r\n        });\r\n        ctx.fill();\r\n        ctx.stroke();\r\n\r\n        // Inner square\r\n        ctx.fillStyle = labelColors.backgroundColor;\r\n        ctx.beginPath();\r\n        addRoundedRectPath(ctx, {\r\n          x: innerX,\r\n          y: colorY + 1,\r\n          w: boxWidth - 2,\r\n          h: boxHeight - 2,\r\n          radius: borderRadius,\r\n        });\r\n        ctx.fill();\r\n      } else {\r\n        // Normal rect\r\n        ctx.fillStyle = options.multiKeyBackground;\r\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\r\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\r\n        // Inner square\r\n        ctx.fillStyle = labelColors.backgroundColor;\r\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\r\n      }\r\n    }\r\n\r\n    // restore fillStyle\r\n    ctx.fillStyle = this.labelTextColors[i];\r\n  }\r\n\r\n  drawBody(pt, ctx, options) {\r\n    const {body} = this;\r\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\r\n    const bodyFont = toFont(options.bodyFont);\r\n    let bodyLineHeight = bodyFont.lineHeight;\r\n    let xLinePadding = 0;\r\n\r\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\r\n\r\n    const fillLineOfText = function(line) {\r\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\r\n      pt.y += bodyLineHeight + bodySpacing;\r\n    };\r\n\r\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\r\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\r\n\r\n    ctx.textAlign = bodyAlign;\r\n    ctx.textBaseline = 'middle';\r\n    ctx.font = bodyFont.string;\r\n\r\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\r\n\r\n    // Before body lines\r\n    ctx.fillStyle = options.bodyColor;\r\n    each(this.beforeBody, fillLineOfText);\r\n\r\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\r\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\r\n      : 0;\r\n\r\n    // Draw body lines now\r\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\r\n      bodyItem = body[i];\r\n      textColor = this.labelTextColors[i];\r\n\r\n      ctx.fillStyle = textColor;\r\n      each(bodyItem.before, fillLineOfText);\r\n\r\n      lines = bodyItem.lines;\r\n      // Draw Legend-like boxes if needed\r\n      if (displayColors && lines.length) {\r\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\r\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\r\n      }\r\n\r\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\r\n        fillLineOfText(lines[j]);\r\n        // Reset for any lines that don't include colorbox\r\n        bodyLineHeight = bodyFont.lineHeight;\r\n      }\r\n\r\n      each(bodyItem.after, fillLineOfText);\r\n    }\r\n\r\n    // Reset back to 0 for after body\r\n    xLinePadding = 0;\r\n    bodyLineHeight = bodyFont.lineHeight;\r\n\r\n    // After body lines\r\n    each(this.afterBody, fillLineOfText);\r\n    pt.y -= bodySpacing; // Remove last body spacing\r\n  }\r\n\r\n  drawFooter(pt, ctx, options) {\r\n    const footer = this.footer;\r\n    const length = footer.length;\r\n    let footerFont, i;\r\n\r\n    if (length) {\r\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\r\n\r\n      pt.x = getAlignedX(this, options.footerAlign, options);\r\n      pt.y += options.footerMarginTop;\r\n\r\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\r\n      ctx.textBaseline = 'middle';\r\n\r\n      footerFont = toFont(options.footerFont);\r\n\r\n      ctx.fillStyle = options.footerColor;\r\n      ctx.font = footerFont.string;\r\n\r\n      for (i = 0; i < length; ++i) {\r\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\r\n        pt.y += footerFont.lineHeight + options.footerSpacing;\r\n      }\r\n    }\r\n  }\r\n\r\n  drawBackground(pt, ctx, tooltipSize, options) {\r\n    const {xAlign, yAlign} = this;\r\n    const {x, y} = pt;\r\n    const {width, height} = tooltipSize;\r\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\r\n\r\n    ctx.fillStyle = options.backgroundColor;\r\n    ctx.strokeStyle = options.borderColor;\r\n    ctx.lineWidth = options.borderWidth;\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(x + topLeft, y);\r\n    if (yAlign === 'top') {\r\n      this.drawCaret(pt, ctx, tooltipSize, options);\r\n    }\r\n    ctx.lineTo(x + width - topRight, y);\r\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\r\n    if (yAlign === 'center' && xAlign === 'right') {\r\n      this.drawCaret(pt, ctx, tooltipSize, options);\r\n    }\r\n    ctx.lineTo(x + width, y + height - bottomRight);\r\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\r\n    if (yAlign === 'bottom') {\r\n      this.drawCaret(pt, ctx, tooltipSize, options);\r\n    }\r\n    ctx.lineTo(x + bottomLeft, y + height);\r\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\r\n    if (yAlign === 'center' && xAlign === 'left') {\r\n      this.drawCaret(pt, ctx, tooltipSize, options);\r\n    }\r\n    ctx.lineTo(x, y + topLeft);\r\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\r\n    ctx.closePath();\r\n\r\n    ctx.fill();\r\n\r\n    if (options.borderWidth > 0) {\r\n      ctx.stroke();\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Update x/y animation targets when _active elements are animating too\r\n\t * @private\r\n\t */\r\n  _updateAnimationTarget(options) {\r\n    const chart = this.chart;\r\n    const anims = this.$animations;\r\n    const animX = anims && anims.x;\r\n    const animY = anims && anims.y;\r\n    if (animX || animY) {\r\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\r\n      if (!position) {\r\n        return;\r\n      }\r\n      const size = this._size = getTooltipSize(this, options);\r\n      const positionAndSize = Object.assign({}, position, this._size);\r\n      const alignment = determineAlignment(chart, options, positionAndSize);\r\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\r\n      if (animX._to !== point.x || animY._to !== point.y) {\r\n        this.xAlign = alignment.xAlign;\r\n        this.yAlign = alignment.yAlign;\r\n        this.width = size.width;\r\n        this.height = size.height;\r\n        this.caretX = position.x;\r\n        this.caretY = position.y;\r\n        this._resolveAnimations().update(this, point);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determine if the tooltip will draw anything\r\n   * @returns {boolean} True if the tooltip will render\r\n   */\r\n  _willRender() {\r\n    return !!this.opacity;\r\n  }\r\n\r\n  draw(ctx) {\r\n    const options = this.options.setContext(this.getContext());\r\n    let opacity = this.opacity;\r\n\r\n    if (!opacity) {\r\n      return;\r\n    }\r\n\r\n    this._updateAnimationTarget(options);\r\n\r\n    const tooltipSize = {\r\n      width: this.width,\r\n      height: this.height\r\n    };\r\n    const pt = {\r\n      x: this.x,\r\n      y: this.y\r\n    };\r\n\r\n    // IE11/Edge does not like very small opacities, so snap to 0\r\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\r\n\r\n    const padding = toPadding(options.padding);\r\n\r\n    // Truthy/falsey value for empty tooltip\r\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\r\n\r\n    if (options.enabled && hasTooltipContent) {\r\n      ctx.save();\r\n      ctx.globalAlpha = opacity;\r\n\r\n      // Draw Background\r\n      this.drawBackground(pt, ctx, tooltipSize, options);\r\n\r\n      overrideTextDirection(ctx, options.textDirection);\r\n\r\n      pt.y += padding.top;\r\n\r\n      // Titles\r\n      this.drawTitle(pt, ctx, options);\r\n\r\n      // Body\r\n      this.drawBody(pt, ctx, options);\r\n\r\n      // Footer\r\n      this.drawFooter(pt, ctx, options);\r\n\r\n      restoreTextDirection(ctx, options.textDirection);\r\n\r\n      ctx.restore();\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Get active elements in the tooltip\r\n\t * @returns {Array} Array of elements that are active in the tooltip\r\n\t */\r\n  getActiveElements() {\r\n    return this._active || [];\r\n  }\r\n\r\n  /**\r\n\t * Set active elements in the tooltip\r\n\t * @param {array} activeElements Array of active datasetIndex/index pairs.\r\n\t * @param {object} eventPosition Synthetic event position used in positioning\r\n\t */\r\n  setActiveElements(activeElements, eventPosition) {\r\n    const lastActive = this._active;\r\n    const active = activeElements.map(({datasetIndex, index}) => {\r\n      const meta = this.chart.getDatasetMeta(datasetIndex);\r\n\r\n      if (!meta) {\r\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\r\n      }\r\n\r\n      return {\r\n        datasetIndex,\r\n        element: meta.data[index],\r\n        index,\r\n      };\r\n    });\r\n    const changed = !_elementsEqual(lastActive, active);\r\n    const positionChanged = this._positionChanged(active, eventPosition);\r\n\r\n    if (changed || positionChanged) {\r\n      this._active = active;\r\n      this._eventPosition = eventPosition;\r\n      this._ignoreReplayEvents = true;\r\n      this.update(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Handle an event\r\n\t * @param {ChartEvent} e - The event to handle\r\n\t * @param {boolean} [replay] - This is a replayed event (from update)\r\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\r\n\t * @returns {boolean} true if the tooltip changed\r\n\t */\r\n  handleEvent(e, replay, inChartArea = true) {\r\n    if (replay && this._ignoreReplayEvents) {\r\n      return false;\r\n    }\r\n    this._ignoreReplayEvents = false;\r\n\r\n    const options = this.options;\r\n    const lastActive = this._active || [];\r\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\r\n\r\n    // When there are multiple items shown, but the tooltip position is nearest mode\r\n    // an update may need to be made because our position may have changed even though\r\n    // the items are the same as before.\r\n    const positionChanged = this._positionChanged(active, e);\r\n\r\n    // Remember Last Actives\r\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\r\n\r\n    // Only handle target event on tooltip change\r\n    if (changed) {\r\n      this._active = active;\r\n\r\n      if (options.enabled || options.external) {\r\n        this._eventPosition = {\r\n          x: e.x,\r\n          y: e.y\r\n        };\r\n\r\n        this.update(true, replay);\r\n      }\r\n    }\r\n\r\n    return changed;\r\n  }\r\n\r\n  /**\r\n\t * Helper for determining the active elements for event\r\n\t * @param {ChartEvent} e - The event to handle\r\n\t * @param {InteractionItem[]} lastActive - Previously active elements\r\n\t * @param {boolean} [replay] - This is a replayed event (from update)\r\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\r\n\t * @returns {InteractionItem[]} - Active elements\r\n\t * @private\r\n\t */\r\n  _getActiveElements(e, lastActive, replay, inChartArea) {\r\n    const options = this.options;\r\n\r\n    if (e.type === 'mouseout') {\r\n      return [];\r\n    }\r\n\r\n    if (!inChartArea) {\r\n      // Let user control the active elements outside chartArea. Eg. using Legend.\r\n      return lastActive;\r\n    }\r\n\r\n    // Find Active Elements for tooltips\r\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\r\n\r\n    if (options.reverse) {\r\n      active.reverse();\r\n    }\r\n\r\n    return active;\r\n  }\r\n\r\n  /**\r\n\t * Determine if the active elements + event combination changes the\r\n\t * tooltip position\r\n\t * @param {array} active - Active elements\r\n\t * @param {ChartEvent} e - Event that triggered the position change\r\n\t * @returns {boolean} True if the position has changed\r\n\t */\r\n  _positionChanged(active, e) {\r\n    const {caretX, caretY, options} = this;\r\n    const position = positioners[options.position].call(this, active, e);\r\n    return position !== false && (caretX !== position.x || caretY !== position.y);\r\n  }\r\n}\r\n\r\nexport default {\r\n  id: 'tooltip',\r\n  _element: Tooltip,\r\n  positioners,\r\n\r\n  afterInit(chart, _args, options) {\r\n    if (options) {\r\n      chart.tooltip = new Tooltip({chart, options});\r\n    }\r\n  },\r\n\r\n  beforeUpdate(chart, _args, options) {\r\n    if (chart.tooltip) {\r\n      chart.tooltip.initialize(options);\r\n    }\r\n  },\r\n\r\n  reset(chart, _args, options) {\r\n    if (chart.tooltip) {\r\n      chart.tooltip.initialize(options);\r\n    }\r\n  },\r\n\r\n  afterDraw(chart) {\r\n    const tooltip = chart.tooltip;\r\n\r\n    if (tooltip && tooltip._willRender()) {\r\n      const args = {\r\n        tooltip\r\n      };\r\n\r\n      if (chart.notifyPlugins('beforeTooltipDraw', {...args, cancelable: true}) === false) {\r\n        return;\r\n      }\r\n\r\n      tooltip.draw(chart.ctx);\r\n\r\n      chart.notifyPlugins('afterTooltipDraw', args);\r\n    }\r\n  },\r\n\r\n  afterEvent(chart, args) {\r\n    if (chart.tooltip) {\r\n      // If the event is replayed from `update`, we should evaluate with the final positions.\r\n      const useFinalPosition = args.replay;\r\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\r\n        // notify chart about the change, so it will render\r\n        args.changed = true;\r\n      }\r\n    }\r\n  },\r\n\r\n  defaults: {\r\n    enabled: true,\r\n    external: null,\r\n    position: 'average',\r\n    backgroundColor: 'rgba(0,0,0,0.8)',\r\n    titleColor: '#fff',\r\n    titleFont: {\r\n      weight: 'bold',\r\n    },\r\n    titleSpacing: 2,\r\n    titleMarginBottom: 6,\r\n    titleAlign: 'left',\r\n    bodyColor: '#fff',\r\n    bodySpacing: 2,\r\n    bodyFont: {\r\n    },\r\n    bodyAlign: 'left',\r\n    footerColor: '#fff',\r\n    footerSpacing: 2,\r\n    footerMarginTop: 6,\r\n    footerFont: {\r\n      weight: 'bold',\r\n    },\r\n    footerAlign: 'left',\r\n    padding: 6,\r\n    caretPadding: 2,\r\n    caretSize: 5,\r\n    cornerRadius: 6,\r\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\r\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\r\n    multiKeyBackground: '#fff',\r\n    displayColors: true,\r\n    boxPadding: 0,\r\n    borderColor: 'rgba(0,0,0,0)',\r\n    borderWidth: 0,\r\n    animation: {\r\n      duration: 400,\r\n      easing: 'easeOutQuart',\r\n    },\r\n    animations: {\r\n      numbers: {\r\n        type: 'number',\r\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\r\n      },\r\n      opacity: {\r\n        easing: 'linear',\r\n        duration: 200\r\n      }\r\n    },\r\n    callbacks: defaultCallbacks\r\n  },\r\n\r\n  defaultRoutes: {\r\n    bodyFont: 'font',\r\n    footerFont: 'font',\r\n    titleFont: 'font'\r\n  },\r\n\r\n  descriptors: {\r\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\r\n    _indexable: false,\r\n    callbacks: {\r\n      _scriptable: false,\r\n      _indexable: false,\r\n    },\r\n    animation: {\r\n      _fallback: false\r\n    },\r\n    animations: {\r\n      _fallback: 'animation'\r\n    }\r\n  },\r\n\r\n  // Resolve additionally from `interaction` options and defaults.\r\n  additionalOptionScopes: ['interaction']\r\n};\r\n","import Scale from '../core/core.scale';\r\nimport {isNullOrUndef, valueOrDefault, _limitValue} from '../helpers';\r\n\r\nconst addIfString = (labels, raw, index, addedLabels) => {\r\n  if (typeof raw === 'string') {\r\n    index = labels.push(raw) - 1;\r\n    addedLabels.unshift({index, label: raw});\r\n  } else if (isNaN(raw)) {\r\n    index = null;\r\n  }\r\n  return index;\r\n};\r\n\r\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\r\n  const first = labels.indexOf(raw);\r\n  if (first === -1) {\r\n    return addIfString(labels, raw, index, addedLabels);\r\n  }\r\n  const last = labels.lastIndexOf(raw);\r\n  return first !== last ? index : first;\r\n}\r\n\r\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\r\n\r\nfunction _getLabelForValue(value) {\r\n  const labels = this.getLabels();\r\n\r\n  if (value >= 0 && value < labels.length) {\r\n    return labels[value];\r\n  }\r\n  return value;\r\n}\r\n\r\nexport default class CategoryScale extends Scale {\r\n\r\n  static id = 'category';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    ticks: {\r\n      callback: _getLabelForValue\r\n    }\r\n  };\r\n\r\n  constructor(cfg) {\r\n    super(cfg);\r\n\r\n    /** @type {number} */\r\n    this._startValue = undefined;\r\n    this._valueRange = 0;\r\n    this._addedLabels = [];\r\n  }\r\n\r\n  init(scaleOptions) {\r\n    const added = this._addedLabels;\r\n    if (added.length) {\r\n      const labels = this.getLabels();\r\n      for (const {index, label} of added) {\r\n        if (labels[index] === label) {\r\n          labels.splice(index, 1);\r\n        }\r\n      }\r\n      this._addedLabels = [];\r\n    }\r\n    super.init(scaleOptions);\r\n  }\r\n\r\n  parse(raw, index) {\r\n    if (isNullOrUndef(raw)) {\r\n      return null;\r\n    }\r\n    const labels = this.getLabels();\r\n    index = isFinite(index) && labels[index] === raw ? index\r\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\r\n    return validIndex(index, labels.length - 1);\r\n  }\r\n\r\n  determineDataLimits() {\r\n    const {minDefined, maxDefined} = this.getUserBounds();\r\n    let {min, max} = this.getMinMax(true);\r\n\r\n    if (this.options.bounds === 'ticks') {\r\n      if (!minDefined) {\r\n        min = 0;\r\n      }\r\n      if (!maxDefined) {\r\n        max = this.getLabels().length - 1;\r\n      }\r\n    }\r\n\r\n    this.min = min;\r\n    this.max = max;\r\n  }\r\n\r\n  buildTicks() {\r\n    const min = this.min;\r\n    const max = this.max;\r\n    const offset = this.options.offset;\r\n    const ticks = [];\r\n    let labels = this.getLabels();\r\n\r\n    // If we are viewing some subset of labels, slice the original array\r\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\r\n\r\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\r\n    this._startValue = this.min - (offset ? 0.5 : 0);\r\n\r\n    for (let value = min; value <= max; value++) {\r\n      ticks.push({value});\r\n    }\r\n    return ticks;\r\n  }\r\n\r\n  getLabelForValue(value) {\r\n    return _getLabelForValue.call(this, value);\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  configure() {\r\n    super.configure();\r\n\r\n    if (!this.isHorizontal()) {\r\n      // For backward compatibility, vertical category scale reverse is inverted.\r\n      this._reversePixels = !this._reversePixels;\r\n    }\r\n  }\r\n\r\n  // Used to get data value locations. Value can either be an index or a numerical value\r\n  getPixelForValue(value) {\r\n    if (typeof value !== 'number') {\r\n      value = this.parse(value);\r\n    }\r\n\r\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\r\n  }\r\n\r\n  // Must override base implementation because it calls getPixelForValue\r\n  // and category scale can have duplicate values\r\n  getPixelForTick(index) {\r\n    const ticks = this.ticks;\r\n    if (index < 0 || index > ticks.length - 1) {\r\n      return null;\r\n    }\r\n    return this.getPixelForValue(ticks[index].value);\r\n  }\r\n\r\n  getValueForPixel(pixel) {\r\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\r\n  }\r\n\r\n  getBasePixel() {\r\n    return this.bottom;\r\n  }\r\n}\r\n","import {isNullOrUndef} from '../helpers/helpers.core';\r\nimport {almostEquals, almostWhole, niceNum, _decimalPlaces, _setMinAndMaxByKey, sign, toRadians} from '../helpers/helpers.math';\r\nimport Scale from '../core/core.scale';\r\nimport {formatNumber} from '../helpers/helpers.intl';\r\n\r\n/**\r\n * Generate a set of linear ticks for an axis\r\n * 1. If generationOptions.min, generationOptions.max, and generationOptions.step are defined:\r\n *    if (max - min) / step is an integer, ticks are generated as [min, min + step, ..., max]\r\n *    Note that the generationOptions.maxCount setting is respected in this scenario\r\n *\r\n * 2. If generationOptions.min, generationOptions.max, and generationOptions.count is defined\r\n *    spacing = (max - min) / count\r\n *    Ticks are generated as [min, min + spacing, ..., max]\r\n *\r\n * 3. If generationOptions.count is defined\r\n *    spacing = (niceMax - niceMin) / count\r\n *\r\n * 4. Compute optimal spacing of ticks using niceNum algorithm\r\n *\r\n * @param generationOptions the options used to generate the ticks\r\n * @param dataRange the range of the data\r\n * @returns {object[]} array of tick objects\r\n */\r\nfunction generateTicks(generationOptions, dataRange) {\r\n  const ticks = [];\r\n  // To get a \"nice\" value for the tick spacing, we will use the appropriately named\r\n  // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\r\n  // for details.\r\n\r\n  const MIN_SPACING = 1e-14;\r\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\r\n  const unit = step || 1;\r\n  const maxSpaces = maxTicks - 1;\r\n  const {min: rmin, max: rmax} = dataRange;\r\n  const minDefined = !isNullOrUndef(min);\r\n  const maxDefined = !isNullOrUndef(max);\r\n  const countDefined = !isNullOrUndef(count);\r\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\r\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\r\n  let factor, niceMin, niceMax, numSpaces;\r\n\r\n  // Beyond MIN_SPACING floating point numbers being to lose precision\r\n  // such that we can't do the math necessary to generate ticks\r\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\r\n    return [{value: rmin}, {value: rmax}];\r\n  }\r\n\r\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\r\n  if (numSpaces > maxSpaces) {\r\n    // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\r\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\r\n  }\r\n\r\n  if (!isNullOrUndef(precision)) {\r\n    // If the user specified a precision, round to that number of decimal places\r\n    factor = Math.pow(10, precision);\r\n    spacing = Math.ceil(spacing * factor) / factor;\r\n  }\r\n\r\n  if (bounds === 'ticks') {\r\n    niceMin = Math.floor(rmin / spacing) * spacing;\r\n    niceMax = Math.ceil(rmax / spacing) * spacing;\r\n  } else {\r\n    niceMin = rmin;\r\n    niceMax = rmax;\r\n  }\r\n\r\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\r\n    // Case 1: If min, max and stepSize are set and they make an evenly spaced scale use it.\r\n    // spacing = step;\r\n    // numSpaces = (max - min) / spacing;\r\n    // Note that we round here to handle the case where almostWhole translated an FP error\r\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\r\n    spacing = (max - min) / numSpaces;\r\n    niceMin = min;\r\n    niceMax = max;\r\n  } else if (countDefined) {\r\n    // Cases 2 & 3, we have a count specified. Handle optional user defined edges to the range.\r\n    // Sometimes these are no-ops, but it makes the code a lot clearer\r\n    // and when a user defined range is specified, we want the correct ticks\r\n    niceMin = minDefined ? min : niceMin;\r\n    niceMax = maxDefined ? max : niceMax;\r\n    numSpaces = count - 1;\r\n    spacing = (niceMax - niceMin) / numSpaces;\r\n  } else {\r\n    // Case 4\r\n    numSpaces = (niceMax - niceMin) / spacing;\r\n\r\n    // If very close to our rounded value, use it.\r\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\r\n      numSpaces = Math.round(numSpaces);\r\n    } else {\r\n      numSpaces = Math.ceil(numSpaces);\r\n    }\r\n  }\r\n\r\n  // The spacing will have changed in cases 1, 2, and 3 so the factor cannot be computed\r\n  // until this point\r\n  const decimalPlaces = Math.max(\r\n    _decimalPlaces(spacing),\r\n    _decimalPlaces(niceMin)\r\n  );\r\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\r\n  niceMin = Math.round(niceMin * factor) / factor;\r\n  niceMax = Math.round(niceMax * factor) / factor;\r\n\r\n  let j = 0;\r\n  if (minDefined) {\r\n    if (includeBounds && niceMin !== min) {\r\n      ticks.push({value: min});\r\n\r\n      if (niceMin < min) {\r\n        j++; // Skip niceMin\r\n      }\r\n      // If the next nice tick is close to min, skip it\r\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\r\n        j++;\r\n      }\r\n    } else if (niceMin < min) {\r\n      j++;\r\n    }\r\n  }\r\n\r\n  for (; j < numSpaces; ++j) {\r\n    ticks.push({value: Math.round((niceMin + j * spacing) * factor) / factor});\r\n  }\r\n\r\n  if (maxDefined && includeBounds && niceMax !== max) {\r\n    // If the previous tick is too close to max, replace it with max, else add max\r\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\r\n      ticks[ticks.length - 1].value = max;\r\n    } else {\r\n      ticks.push({value: max});\r\n    }\r\n  } else if (!maxDefined || niceMax === max) {\r\n    ticks.push({value: niceMax});\r\n  }\r\n\r\n  return ticks;\r\n}\r\n\r\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\r\n  const rad = toRadians(minRotation);\r\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\r\n  const length = 0.75 * minSpacing * ('' + value).length;\r\n  return Math.min(minSpacing / ratio, length);\r\n}\r\n\r\nexport default class LinearScaleBase extends Scale {\r\n\r\n  constructor(cfg) {\r\n    super(cfg);\r\n\r\n    /** @type {number} */\r\n    this.start = undefined;\r\n    /** @type {number} */\r\n    this.end = undefined;\r\n    /** @type {number} */\r\n    this._startValue = undefined;\r\n    /** @type {number} */\r\n    this._endValue = undefined;\r\n    this._valueRange = 0;\r\n  }\r\n\r\n  parse(raw, index) { // eslint-disable-line no-unused-vars\r\n    if (isNullOrUndef(raw)) {\r\n      return null;\r\n    }\r\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\r\n      return null;\r\n    }\r\n\r\n    return +raw;\r\n  }\r\n\r\n  handleTickRangeOptions() {\r\n    const {beginAtZero} = this.options;\r\n    const {minDefined, maxDefined} = this.getUserBounds();\r\n    let {min, max} = this;\r\n\r\n    const setMin = v => (min = minDefined ? min : v);\r\n    const setMax = v => (max = maxDefined ? max : v);\r\n\r\n    if (beginAtZero) {\r\n      const minSign = sign(min);\r\n      const maxSign = sign(max);\r\n\r\n      if (minSign < 0 && maxSign < 0) {\r\n        setMax(0);\r\n      } else if (minSign > 0 && maxSign > 0) {\r\n        setMin(0);\r\n      }\r\n    }\r\n\r\n    if (min === max) {\r\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\r\n\r\n      setMax(max + offset);\r\n\r\n      if (!beginAtZero) {\r\n        setMin(min - offset);\r\n      }\r\n    }\r\n    this.min = min;\r\n    this.max = max;\r\n  }\r\n\r\n  getTickLimit() {\r\n    const tickOpts = this.options.ticks;\r\n    // eslint-disable-next-line prefer-const\r\n    let {maxTicksLimit, stepSize} = tickOpts;\r\n    let maxTicks;\r\n\r\n    if (stepSize) {\r\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\r\n      if (maxTicks > 1000) {\r\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\r\n        maxTicks = 1000;\r\n      }\r\n    } else {\r\n      maxTicks = this.computeTickLimit();\r\n      maxTicksLimit = maxTicksLimit || 11;\r\n    }\r\n\r\n    if (maxTicksLimit) {\r\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\r\n    }\r\n\r\n    return maxTicks;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  computeTickLimit() {\r\n    return Number.POSITIVE_INFINITY;\r\n  }\r\n\r\n  buildTicks() {\r\n    const opts = this.options;\r\n    const tickOpts = opts.ticks;\r\n\r\n    // Figure out what the max number of ticks we can support it is based on the size of\r\n    // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\r\n    // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\r\n    // the graph. Make sure we always have at least 2 ticks\r\n    let maxTicks = this.getTickLimit();\r\n    maxTicks = Math.max(2, maxTicks);\r\n\r\n    const numericGeneratorOptions = {\r\n      maxTicks,\r\n      bounds: opts.bounds,\r\n      min: opts.min,\r\n      max: opts.max,\r\n      precision: tickOpts.precision,\r\n      step: tickOpts.stepSize,\r\n      count: tickOpts.count,\r\n      maxDigits: this._maxDigits(),\r\n      horizontal: this.isHorizontal(),\r\n      minRotation: tickOpts.minRotation || 0,\r\n      includeBounds: tickOpts.includeBounds !== false\r\n    };\r\n    const dataRange = this._range || this;\r\n    const ticks = generateTicks(numericGeneratorOptions, dataRange);\r\n\r\n    // At this point, we need to update our max and min given the tick values,\r\n    // since we probably have expanded the range of the scale\r\n    if (opts.bounds === 'ticks') {\r\n      _setMinAndMaxByKey(ticks, this, 'value');\r\n    }\r\n\r\n    if (opts.reverse) {\r\n      ticks.reverse();\r\n\r\n      this.start = this.max;\r\n      this.end = this.min;\r\n    } else {\r\n      this.start = this.min;\r\n      this.end = this.max;\r\n    }\r\n\r\n    return ticks;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  configure() {\r\n    const ticks = this.ticks;\r\n    let start = this.min;\r\n    let end = this.max;\r\n\r\n    super.configure();\r\n\r\n    if (this.options.offset && ticks.length) {\r\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\r\n      start -= offset;\r\n      end += offset;\r\n    }\r\n    this._startValue = start;\r\n    this._endValue = end;\r\n    this._valueRange = end - start;\r\n  }\r\n\r\n  getLabelForValue(value) {\r\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\r\n  }\r\n}\r\n","import {isFinite} from '../helpers/helpers.core';\r\nimport LinearScaleBase from './scale.linearbase';\r\nimport Ticks from '../core/core.ticks';\r\nimport {toRadians} from '../helpers';\r\n\r\nexport default class LinearScale extends LinearScaleBase {\r\n\r\n  static id = 'linear';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    ticks: {\r\n      callback: Ticks.formatters.numeric\r\n    }\r\n  };\r\n\r\n\r\n  determineDataLimits() {\r\n    const {min, max} = this.getMinMax(true);\r\n\r\n    this.min = isFinite(min) ? min : 0;\r\n    this.max = isFinite(max) ? max : 1;\r\n\r\n    // Common base implementation to handle min, max, beginAtZero\r\n    this.handleTickRangeOptions();\r\n  }\r\n\r\n  /**\r\n\t * Returns the maximum number of ticks based on the scale dimension\r\n\t * @protected\r\n \t */\r\n  computeTickLimit() {\r\n    const horizontal = this.isHorizontal();\r\n    const length = horizontal ? this.width : this.height;\r\n    const minRotation = toRadians(this.options.ticks.minRotation);\r\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\r\n    const tickFont = this._resolveTickFontOptions(0);\r\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\r\n  }\r\n\r\n  // Utils\r\n  getPixelForValue(value) {\r\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\r\n  }\r\n\r\n  getValueForPixel(pixel) {\r\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\r\n  }\r\n}\r\n","import {finiteOrDefault, isFinite} from '../helpers/helpers.core';\r\nimport {formatNumber} from '../helpers/helpers.intl';\r\nimport {_setMinAndMaxByKey, log10} from '../helpers/helpers.math';\r\nimport Scale from '../core/core.scale';\r\nimport LinearScaleBase from './scale.linearbase';\r\nimport Ticks from '../core/core.ticks';\r\n\r\nconst log10Floor = v => Math.floor(log10(v));\r\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\r\n\r\nfunction isMajor(tickVal) {\r\n  const remain = tickVal / (Math.pow(10, log10Floor(tickVal)));\r\n  return remain === 1;\r\n}\r\n\r\nfunction steps(min, max, rangeExp) {\r\n  const rangeStep = Math.pow(10, rangeExp);\r\n  const start = Math.floor(min / rangeStep);\r\n  const end = Math.ceil(max / rangeStep);\r\n  return end - start;\r\n}\r\n\r\nfunction startExp(min, max) {\r\n  const range = max - min;\r\n  let rangeExp = log10Floor(range);\r\n  while (steps(min, max, rangeExp) > 10) {\r\n    rangeExp++;\r\n  }\r\n  while (steps(min, max, rangeExp) < 10) {\r\n    rangeExp--;\r\n  }\r\n  return Math.min(rangeExp, log10Floor(min));\r\n}\r\n\r\n\r\n/**\r\n * Generate a set of logarithmic ticks\r\n * @param generationOptions the options used to generate the ticks\r\n * @param dataRange the range of the data\r\n * @returns {object[]} array of tick objects\r\n */\r\nfunction generateTicks(generationOptions, {min, max}) {\r\n  min = finiteOrDefault(generationOptions.min, min);\r\n  const ticks = [];\r\n  const minExp = log10Floor(min);\r\n  let exp = startExp(min, max);\r\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\r\n  const stepSize = Math.pow(10, exp);\r\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\r\n  const start = Math.round((min - base) * precision) / precision;\r\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\r\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\r\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\r\n  while (value < max) {\r\n    ticks.push({value, major: isMajor(value), significand});\r\n    if (significand >= 10) {\r\n      significand = significand < 15 ? 15 : 20;\r\n    } else {\r\n      significand++;\r\n    }\r\n    if (significand >= 20) {\r\n      exp++;\r\n      significand = 2;\r\n      precision = exp >= 0 ? 1 : precision;\r\n    }\r\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\r\n  }\r\n  const lastTick = finiteOrDefault(generationOptions.max, value);\r\n  ticks.push({value: lastTick, major: isMajor(lastTick), significand});\r\n\r\n  return ticks;\r\n}\r\n\r\nexport default class LogarithmicScale extends Scale {\r\n\r\n  static id = 'logarithmic';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    ticks: {\r\n      callback: Ticks.formatters.logarithmic,\r\n      major: {\r\n        enabled: true\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  constructor(cfg) {\r\n    super(cfg);\r\n\r\n    /** @type {number} */\r\n    this.start = undefined;\r\n    /** @type {number} */\r\n    this.end = undefined;\r\n    /** @type {number} */\r\n    this._startValue = undefined;\r\n    this._valueRange = 0;\r\n  }\r\n\r\n  parse(raw, index) {\r\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\r\n    if (value === 0) {\r\n      this._zero = true;\r\n      return undefined;\r\n    }\r\n    return isFinite(value) && value > 0 ? value : null;\r\n  }\r\n\r\n  determineDataLimits() {\r\n    const {min, max} = this.getMinMax(true);\r\n\r\n    this.min = isFinite(min) ? Math.max(0, min) : null;\r\n    this.max = isFinite(max) ? Math.max(0, max) : null;\r\n\r\n    if (this.options.beginAtZero) {\r\n      this._zero = true;\r\n    }\r\n\r\n    // if data has `0` in it or `beginAtZero` is true, min (non zero) value is at bottom\r\n    // of scale, and it does not equal suggestedMin, lower the min bound by one exp.\r\n    if (this._zero && this.min !== this._suggestedMin && !isFinite(this._userMin)) {\r\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\r\n    }\r\n\r\n    this.handleTickRangeOptions();\r\n  }\r\n\r\n  handleTickRangeOptions() {\r\n    const {minDefined, maxDefined} = this.getUserBounds();\r\n    let min = this.min;\r\n    let max = this.max;\r\n\r\n    const setMin = v => (min = minDefined ? min : v);\r\n    const setMax = v => (max = maxDefined ? max : v);\r\n\r\n    if (min === max) {\r\n      if (min <= 0) { // includes null\r\n        setMin(1);\r\n        setMax(10);\r\n      } else {\r\n        setMin(changeExponent(min, -1));\r\n        setMax(changeExponent(max, +1));\r\n      }\r\n    }\r\n    if (min <= 0) {\r\n      setMin(changeExponent(max, -1));\r\n    }\r\n    if (max <= 0) {\r\n\r\n      setMax(changeExponent(min, +1));\r\n    }\r\n\r\n    this.min = min;\r\n    this.max = max;\r\n  }\r\n\r\n  buildTicks() {\r\n    const opts = this.options;\r\n\r\n    const generationOptions = {\r\n      min: this._userMin,\r\n      max: this._userMax\r\n    };\r\n    const ticks = generateTicks(generationOptions, this);\r\n\r\n    // At this point, we need to update our max and min given the tick values,\r\n    // since we probably have expanded the range of the scale\r\n    if (opts.bounds === 'ticks') {\r\n      _setMinAndMaxByKey(ticks, this, 'value');\r\n    }\r\n\r\n    if (opts.reverse) {\r\n      ticks.reverse();\r\n\r\n      this.start = this.max;\r\n      this.end = this.min;\r\n    } else {\r\n      this.start = this.min;\r\n      this.end = this.max;\r\n    }\r\n\r\n    return ticks;\r\n  }\r\n\r\n  /**\r\n\t * @param {number} value\r\n\t * @return {string}\r\n\t */\r\n  getLabelForValue(value) {\r\n    return value === undefined\r\n      ? '0'\r\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  configure() {\r\n    const start = this.min;\r\n\r\n    super.configure();\r\n\r\n    this._startValue = log10(start);\r\n    this._valueRange = log10(this.max) - log10(start);\r\n  }\r\n\r\n  getPixelForValue(value) {\r\n    if (value === undefined || value === 0) {\r\n      value = this.min;\r\n    }\r\n    if (value === null || isNaN(value)) {\r\n      return NaN;\r\n    }\r\n    return this.getPixelForDecimal(value === this.min\r\n      ? 0\r\n      : (log10(value) - this._startValue) / this._valueRange);\r\n  }\r\n\r\n  getValueForPixel(pixel) {\r\n    const decimal = this.getDecimalForPixel(pixel);\r\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\r\n  }\r\n}\r\n","import defaults from '../core/core.defaults';\r\nimport {_longestText, addRoundedRectPath, renderText} from '../helpers/helpers.canvas';\r\nimport {HALF_PI, TAU, toDegrees, toRadians, _normalizeAngle, PI} from '../helpers/helpers.math';\r\nimport LinearScaleBase from './scale.linearbase';\r\nimport Ticks from '../core/core.ticks';\r\nimport {valueOrDefault, isArray, isFinite, callback as callCallback, isNullOrUndef} from '../helpers/helpers.core';\r\nimport {createContext, toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options';\r\n\r\nfunction getTickBackdropHeight(opts) {\r\n  const tickOpts = opts.ticks;\r\n\r\n  if (tickOpts.display && opts.display) {\r\n    const padding = toPadding(tickOpts.backdropPadding);\r\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction measureLabelSize(ctx, font, label) {\r\n  label = isArray(label) ? label : [label];\r\n  return {\r\n    w: _longestText(ctx, font.string, label),\r\n    h: label.length * font.lineHeight\r\n  };\r\n}\r\n\r\nfunction determineLimits(angle, pos, size, min, max) {\r\n  if (angle === min || angle === max) {\r\n    return {\r\n      start: pos - (size / 2),\r\n      end: pos + (size / 2)\r\n    };\r\n  } else if (angle < min || angle > max) {\r\n    return {\r\n      start: pos - size,\r\n      end: pos\r\n    };\r\n  }\r\n\r\n  return {\r\n    start: pos,\r\n    end: pos + size\r\n  };\r\n}\r\n\r\n/**\r\n * Helper function to fit a radial linear scale with point labels\r\n */\r\nfunction fitWithPointLabels(scale) {\r\n\r\n  // Right, this is really confusing and there is a lot of maths going on here\r\n  // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\r\n  //\r\n  // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\r\n  //\r\n  // Solution:\r\n  //\r\n  // We assume the radius of the polygon is half the size of the canvas at first\r\n  // at each index we check if the text overlaps.\r\n  //\r\n  // Where it does, we store that angle and that index.\r\n  //\r\n  // After finding the largest index and angle we calculate how much we need to remove\r\n  // from the shape radius to move the point inwards by that x.\r\n  //\r\n  // We average the left and right distances to get the maximum shape radius that can fit in the box\r\n  // along with labels.\r\n  //\r\n  // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\r\n  // on each side, removing that from the size, halving it and adding the left x protrusion width.\r\n  //\r\n  // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\r\n  // and position it in the most space efficient manner\r\n  //\r\n  // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\r\n\r\n  // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\r\n  // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\r\n  const orig = {\r\n    l: scale.left + scale._padding.left,\r\n    r: scale.right - scale._padding.right,\r\n    t: scale.top + scale._padding.top,\r\n    b: scale.bottom - scale._padding.bottom\r\n  };\r\n  const limits = Object.assign({}, orig);\r\n  const labelSizes = [];\r\n  const padding = [];\r\n  const valueCount = scale._pointLabels.length;\r\n  const pointLabelOpts = scale.options.pointLabels;\r\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\r\n\r\n  for (let i = 0; i < valueCount; i++) {\r\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\r\n    padding[i] = opts.padding;\r\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\r\n    const plFont = toFont(opts.font);\r\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\r\n    labelSizes[i] = textSize;\r\n\r\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\r\n    const angle = Math.round(toDegrees(angleRadians));\r\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\r\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\r\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\r\n  }\r\n\r\n  scale.setCenterPoint(\r\n    orig.l - limits.l,\r\n    limits.r - orig.r,\r\n    orig.t - limits.t,\r\n    limits.b - orig.b\r\n  );\r\n\r\n  // Now that text size is determined, compute the full positions\r\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\r\n}\r\n\r\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\r\n  const sin = Math.abs(Math.sin(angle));\r\n  const cos = Math.abs(Math.cos(angle));\r\n  let x = 0;\r\n  let y = 0;\r\n  if (hLimits.start < orig.l) {\r\n    x = (orig.l - hLimits.start) / sin;\r\n    limits.l = Math.min(limits.l, orig.l - x);\r\n  } else if (hLimits.end > orig.r) {\r\n    x = (hLimits.end - orig.r) / sin;\r\n    limits.r = Math.max(limits.r, orig.r + x);\r\n  }\r\n  if (vLimits.start < orig.t) {\r\n    y = (orig.t - vLimits.start) / cos;\r\n    limits.t = Math.min(limits.t, orig.t - y);\r\n  } else if (vLimits.end > orig.b) {\r\n    y = (vLimits.end - orig.b) / cos;\r\n    limits.b = Math.max(limits.b, orig.b + y);\r\n  }\r\n}\r\n\r\nfunction buildPointLabelItems(scale, labelSizes, padding) {\r\n  const items = [];\r\n  const valueCount = scale._pointLabels.length;\r\n  const opts = scale.options;\r\n  const extra = getTickBackdropHeight(opts) / 2;\r\n  const outerDistance = scale.drawingArea;\r\n  const additionalAngle = opts.pointLabels.centerPointLabels ? PI / valueCount : 0;\r\n\r\n  for (let i = 0; i < valueCount; i++) {\r\n    const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);\r\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\r\n    const size = labelSizes[i];\r\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\r\n    const textAlign = getTextAlignForAngle(angle);\r\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\r\n\r\n    items.push({\r\n      // Text position\r\n      x: pointLabelPosition.x,\r\n      y,\r\n\r\n      // Text rendering data\r\n      textAlign,\r\n\r\n      // Bounding box\r\n      left,\r\n      top: y,\r\n      right: left + size.w,\r\n      bottom: y + size.h\r\n    });\r\n  }\r\n  return items;\r\n}\r\n\r\nfunction getTextAlignForAngle(angle) {\r\n  if (angle === 0 || angle === 180) {\r\n    return 'center';\r\n  } else if (angle < 180) {\r\n    return 'left';\r\n  }\r\n\r\n  return 'right';\r\n}\r\n\r\nfunction leftForTextAlign(x, w, align) {\r\n  if (align === 'right') {\r\n    x -= w;\r\n  } else if (align === 'center') {\r\n    x -= (w / 2);\r\n  }\r\n  return x;\r\n}\r\n\r\nfunction yForAngle(y, h, angle) {\r\n  if (angle === 90 || angle === 270) {\r\n    y -= (h / 2);\r\n  } else if (angle > 270 || angle < 90) {\r\n    y -= h;\r\n  }\r\n  return y;\r\n}\r\n\r\nfunction drawPointLabels(scale, labelCount) {\r\n  const {ctx, options: {pointLabels}} = scale;\r\n\r\n  for (let i = labelCount - 1; i >= 0; i--) {\r\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\r\n    const plFont = toFont(optsAtIndex.font);\r\n    const {x, y, textAlign, left, top, right, bottom} = scale._pointLabelItems[i];\r\n    const {backdropColor} = optsAtIndex;\r\n\r\n    if (!isNullOrUndef(backdropColor)) {\r\n      const borderRadius = toTRBLCorners(optsAtIndex.borderRadius);\r\n      const padding = toPadding(optsAtIndex.backdropPadding);\r\n      ctx.fillStyle = backdropColor;\r\n\r\n      const backdropLeft = left - padding.left;\r\n      const backdropTop = top - padding.top;\r\n      const backdropWidth = right - left + padding.width;\r\n      const backdropHeight = bottom - top + padding.height;\r\n\r\n      if (Object.values(borderRadius).some(v => v !== 0)) {\r\n        ctx.beginPath();\r\n        addRoundedRectPath(ctx, {\r\n          x: backdropLeft,\r\n          y: backdropTop,\r\n          w: backdropWidth,\r\n          h: backdropHeight,\r\n          radius: borderRadius,\r\n        });\r\n        ctx.fill();\r\n      } else {\r\n        ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\r\n      }\r\n    }\r\n\r\n    renderText(\r\n      ctx,\r\n      scale._pointLabels[i],\r\n      x,\r\n      y + (plFont.lineHeight / 2),\r\n      plFont,\r\n      {\r\n        color: optsAtIndex.color,\r\n        textAlign: textAlign,\r\n        textBaseline: 'middle'\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\r\n  const {ctx} = scale;\r\n  if (circular) {\r\n    // Draw circular arcs between the points\r\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\r\n  } else {\r\n    // Draw straight lines connecting each index\r\n    let pointPosition = scale.getPointPosition(0, radius);\r\n    ctx.moveTo(pointPosition.x, pointPosition.y);\r\n\r\n    for (let i = 1; i < labelCount; i++) {\r\n      pointPosition = scale.getPointPosition(i, radius);\r\n      ctx.lineTo(pointPosition.x, pointPosition.y);\r\n    }\r\n  }\r\n}\r\n\r\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\r\n  const ctx = scale.ctx;\r\n  const circular = gridLineOpts.circular;\r\n\r\n  const {color, lineWidth} = gridLineOpts;\r\n\r\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\r\n    return;\r\n  }\r\n\r\n  ctx.save();\r\n  ctx.strokeStyle = color;\r\n  ctx.lineWidth = lineWidth;\r\n  ctx.setLineDash(borderOpts.dash);\r\n  ctx.lineDashOffset = borderOpts.dashOffset;\r\n\r\n  ctx.beginPath();\r\n  pathRadiusLine(scale, radius, circular, labelCount);\r\n  ctx.closePath();\r\n  ctx.stroke();\r\n  ctx.restore();\r\n}\r\n\r\nfunction createPointLabelContext(parent, index, label) {\r\n  return createContext(parent, {\r\n    label,\r\n    index,\r\n    type: 'pointLabel'\r\n  });\r\n}\r\n\r\nexport default class RadialLinearScale extends LinearScaleBase {\r\n\r\n  static id = 'radialLinear';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    display: true,\r\n\r\n    // Boolean - Whether to animate scaling the chart from the centre\r\n    animate: true,\r\n    position: 'chartArea',\r\n\r\n    angleLines: {\r\n      display: true,\r\n      lineWidth: 1,\r\n      borderDash: [],\r\n      borderDashOffset: 0.0\r\n    },\r\n\r\n    grid: {\r\n      circular: false\r\n    },\r\n\r\n    startAngle: 0,\r\n\r\n    // label settings\r\n    ticks: {\r\n      // Boolean - Show a backdrop to the scale label\r\n      showLabelBackdrop: true,\r\n\r\n      callback: Ticks.formatters.numeric\r\n    },\r\n\r\n    pointLabels: {\r\n      backdropColor: undefined,\r\n\r\n      // Number - The backdrop padding above & below the label in pixels\r\n      backdropPadding: 2,\r\n\r\n      // Boolean - if true, show point labels\r\n      display: true,\r\n\r\n      // Number - Point label font size in pixels\r\n      font: {\r\n        size: 10\r\n      },\r\n\r\n      // Function - Used to convert point labels\r\n      callback(label) {\r\n        return label;\r\n      },\r\n\r\n      // Number - Additionl padding between scale and pointLabel\r\n      padding: 5,\r\n\r\n      // Boolean - if true, center point labels to slices in polar chart\r\n      centerPointLabels: false\r\n    }\r\n  };\r\n\r\n  static defaultRoutes = {\r\n    'angleLines.color': 'borderColor',\r\n    'pointLabels.color': 'color',\r\n    'ticks.color': 'color'\r\n  };\r\n\r\n  static descriptors = {\r\n    angleLines: {\r\n      _fallback: 'grid'\r\n    }\r\n  };\r\n\r\n  constructor(cfg) {\r\n    super(cfg);\r\n\r\n    /** @type {number} */\r\n    this.xCenter = undefined;\r\n    /** @type {number} */\r\n    this.yCenter = undefined;\r\n    /** @type {number} */\r\n    this.drawingArea = undefined;\r\n    /** @type {string[]} */\r\n    this._pointLabels = [];\r\n    this._pointLabelItems = [];\r\n  }\r\n\r\n  setDimensions() {\r\n    // Set the unconstrained dimension before label rotation\r\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\r\n    const w = this.width = this.maxWidth - padding.width;\r\n    const h = this.height = this.maxHeight - padding.height;\r\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\r\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\r\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\r\n  }\r\n\r\n  determineDataLimits() {\r\n    const {min, max} = this.getMinMax(false);\r\n\r\n    this.min = isFinite(min) && !isNaN(min) ? min : 0;\r\n    this.max = isFinite(max) && !isNaN(max) ? max : 0;\r\n\r\n    // Common base implementation to handle min, max, beginAtZero\r\n    this.handleTickRangeOptions();\r\n  }\r\n\r\n  /**\r\n\t * Returns the maximum number of ticks based on the scale dimension\r\n\t * @protected\r\n\t */\r\n  computeTickLimit() {\r\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\r\n  }\r\n\r\n  generateTickLabels(ticks) {\r\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\r\n\r\n    // Point labels\r\n    this._pointLabels = this.getLabels()\r\n      .map((value, index) => {\r\n        const label = callCallback(this.options.pointLabels.callback, [value, index], this);\r\n        return label || label === 0 ? label : '';\r\n      })\r\n      .filter((v, i) => this.chart.getDataVisibility(i));\r\n  }\r\n\r\n  fit() {\r\n    const opts = this.options;\r\n\r\n    if (opts.display && opts.pointLabels.display) {\r\n      fitWithPointLabels(this);\r\n    } else {\r\n      this.setCenterPoint(0, 0, 0, 0);\r\n    }\r\n  }\r\n\r\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\r\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\r\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\r\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\r\n  }\r\n\r\n  getIndexAngle(index) {\r\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\r\n    const startAngle = this.options.startAngle || 0;\r\n\r\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\r\n  }\r\n\r\n  getDistanceFromCenterForValue(value) {\r\n    if (isNullOrUndef(value)) {\r\n      return NaN;\r\n    }\r\n\r\n    // Take into account half font size + the yPadding of the top value\r\n    const scalingFactor = this.drawingArea / (this.max - this.min);\r\n    if (this.options.reverse) {\r\n      return (this.max - value) * scalingFactor;\r\n    }\r\n    return (value - this.min) * scalingFactor;\r\n  }\r\n\r\n  getValueForDistanceFromCenter(distance) {\r\n    if (isNullOrUndef(distance)) {\r\n      return NaN;\r\n    }\r\n\r\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\r\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\r\n  }\r\n\r\n  getPointLabelContext(index) {\r\n    const pointLabels = this._pointLabels || [];\r\n\r\n    if (index >= 0 && index < pointLabels.length) {\r\n      const pointLabel = pointLabels[index];\r\n      return createPointLabelContext(this.getContext(), index, pointLabel);\r\n    }\r\n  }\r\n\r\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\r\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\r\n    return {\r\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\r\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\r\n      angle\r\n    };\r\n  }\r\n\r\n  getPointPositionForValue(index, value) {\r\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\r\n  }\r\n\r\n  getBasePosition(index) {\r\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\r\n  }\r\n\r\n  getPointLabelPosition(index) {\r\n    const {left, top, right, bottom} = this._pointLabelItems[index];\r\n    return {\r\n      left,\r\n      top,\r\n      right,\r\n      bottom,\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawBackground() {\r\n    const {backgroundColor, grid: {circular}} = this.options;\r\n    if (backgroundColor) {\r\n      const ctx = this.ctx;\r\n      ctx.save();\r\n      ctx.beginPath();\r\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\r\n      ctx.closePath();\r\n      ctx.fillStyle = backgroundColor;\r\n      ctx.fill();\r\n      ctx.restore();\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawGrid() {\r\n    const ctx = this.ctx;\r\n    const opts = this.options;\r\n    const {angleLines, grid, border} = opts;\r\n    const labelCount = this._pointLabels.length;\r\n\r\n    let i, offset, position;\r\n\r\n    if (opts.pointLabels.display) {\r\n      drawPointLabels(this, labelCount);\r\n    }\r\n\r\n    if (grid.display) {\r\n      this.ticks.forEach((tick, index) => {\r\n        if (index !== 0) {\r\n          offset = this.getDistanceFromCenterForValue(tick.value);\r\n          const context = this.getContext(index);\r\n          const optsAtIndex = grid.setContext(context);\r\n          const optsAtIndexBorder = border.setContext(context);\r\n\r\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (angleLines.display) {\r\n      ctx.save();\r\n\r\n      for (i = labelCount - 1; i >= 0; i--) {\r\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\r\n        const {color, lineWidth} = optsAtIndex;\r\n\r\n        if (!lineWidth || !color) {\r\n          continue;\r\n        }\r\n\r\n        ctx.lineWidth = lineWidth;\r\n        ctx.strokeStyle = color;\r\n\r\n        ctx.setLineDash(optsAtIndex.borderDash);\r\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\r\n\r\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\r\n        position = this.getPointPosition(i, offset);\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.xCenter, this.yCenter);\r\n        ctx.lineTo(position.x, position.y);\r\n        ctx.stroke();\r\n      }\r\n\r\n      ctx.restore();\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawBorder() {}\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawLabels() {\r\n    const ctx = this.ctx;\r\n    const opts = this.options;\r\n    const tickOpts = opts.ticks;\r\n\r\n    if (!tickOpts.display) {\r\n      return;\r\n    }\r\n\r\n    const startAngle = this.getIndexAngle(0);\r\n    let offset, width;\r\n\r\n    ctx.save();\r\n    ctx.translate(this.xCenter, this.yCenter);\r\n    ctx.rotate(startAngle);\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'middle';\r\n\r\n    this.ticks.forEach((tick, index) => {\r\n      if (index === 0 && !opts.reverse) {\r\n        return;\r\n      }\r\n\r\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\r\n      const tickFont = toFont(optsAtIndex.font);\r\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\r\n\r\n      if (optsAtIndex.showLabelBackdrop) {\r\n        ctx.font = tickFont.string;\r\n        width = ctx.measureText(tick.label).width;\r\n        ctx.fillStyle = optsAtIndex.backdropColor;\r\n\r\n        const padding = toPadding(optsAtIndex.backdropPadding);\r\n        ctx.fillRect(\r\n          -width / 2 - padding.left,\r\n          -offset - tickFont.size / 2 - padding.top,\r\n          width + padding.width,\r\n          tickFont.size + padding.height\r\n        );\r\n      }\r\n\r\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\r\n        color: optsAtIndex.color,\r\n      });\r\n    });\r\n\r\n    ctx.restore();\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawTitle() {}\r\n}\r\n","import adapters from '../core/core.adapters';\r\nimport {callback as call, isFinite, isNullOrUndef, mergeIf, valueOrDefault} from '../helpers/helpers.core';\r\nimport {toRadians, isNumber, _limitValue} from '../helpers/helpers.math';\r\nimport Scale from '../core/core.scale';\r\nimport {_arrayUnique, _filterBetween, _lookup} from '../helpers/helpers.collection';\r\n\r\n/**\r\n * @typedef { import(\"../core/core.adapters\").TimeUnit } Unit\r\n * @typedef {{common: boolean, size: number, steps?: number}} Interval\r\n * @typedef { import(\"../core/core.adapters\").DateAdapter } DateAdapter\r\n */\r\n\r\n/**\r\n * @type {Object<Unit, Interval>}\r\n */\r\nconst INTERVALS = {\r\n  millisecond: {common: true, size: 1, steps: 1000},\r\n  second: {common: true, size: 1000, steps: 60},\r\n  minute: {common: true, size: 60000, steps: 60},\r\n  hour: {common: true, size: 3600000, steps: 24},\r\n  day: {common: true, size: 86400000, steps: 30},\r\n  week: {common: false, size: 604800000, steps: 4},\r\n  month: {common: true, size: 2.628e9, steps: 12},\r\n  quarter: {common: false, size: 7.884e9, steps: 4},\r\n  year: {common: true, size: 3.154e10}\r\n};\r\n\r\n/**\r\n * @type {Unit[]}\r\n */\r\nconst UNITS = /** @type Unit[] */ /* #__PURE__ */ (Object.keys(INTERVALS));\r\n\r\n/**\r\n * @param {number} a\r\n * @param {number} b\r\n */\r\nfunction sorter(a, b) {\r\n  return a - b;\r\n}\r\n\r\n/**\r\n * @param {TimeScale} scale\r\n * @param {*} input\r\n * @return {number}\r\n */\r\nfunction parse(scale, input) {\r\n  if (isNullOrUndef(input)) {\r\n    return null;\r\n  }\r\n\r\n  const adapter = scale._adapter;\r\n  const {parser, round, isoWeekday} = scale._parseOpts;\r\n  let value = input;\r\n\r\n  if (typeof parser === 'function') {\r\n    value = parser(value);\r\n  }\r\n\r\n  // Only parse if its not a timestamp already\r\n  if (!isFinite(value)) {\r\n    value = typeof parser === 'string'\r\n      ? adapter.parse(value, /** @type {Unit} */ (parser))\r\n      : adapter.parse(value);\r\n  }\r\n\r\n  if (value === null) {\r\n    return null;\r\n  }\r\n\r\n  if (round) {\r\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\r\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\r\n      : adapter.startOf(value, round);\r\n  }\r\n\r\n  return +value;\r\n}\r\n\r\n/**\r\n * Figures out what unit results in an appropriate number of auto-generated ticks\r\n * @param {Unit} minUnit\r\n * @param {number} min\r\n * @param {number} max\r\n * @param {number} capacity\r\n * @return {object}\r\n */\r\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\r\n  const ilen = UNITS.length;\r\n\r\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\r\n    const interval = INTERVALS[UNITS[i]];\r\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\r\n\r\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\r\n      return UNITS[i];\r\n    }\r\n  }\r\n\r\n  return UNITS[ilen - 1];\r\n}\r\n\r\n/**\r\n * Figures out what unit to format a set of ticks with\r\n * @param {TimeScale} scale\r\n * @param {number} numTicks\r\n * @param {Unit} minUnit\r\n * @param {number} min\r\n * @param {number} max\r\n * @return {Unit}\r\n */\r\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\r\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\r\n    const unit = UNITS[i];\r\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\r\n      return unit;\r\n    }\r\n  }\r\n\r\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\r\n}\r\n\r\n/**\r\n * @param {Unit} unit\r\n * @return {object}\r\n */\r\nfunction determineMajorUnit(unit) {\r\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\r\n    if (INTERVALS[UNITS[i]].common) {\r\n      return UNITS[i];\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {object} ticks\r\n * @param {number} time\r\n * @param {number[]} [timestamps] - if defined, snap to these timestamps\r\n */\r\nfunction addTick(ticks, time, timestamps) {\r\n  if (!timestamps) {\r\n    ticks[time] = true;\r\n  } else if (timestamps.length) {\r\n    const {lo, hi} = _lookup(timestamps, time);\r\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\r\n    ticks[timestamp] = true;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {TimeScale} scale\r\n * @param {object[]} ticks\r\n * @param {object} map\r\n * @param {Unit} majorUnit\r\n * @return {object[]}\r\n */\r\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\r\n  const adapter = scale._adapter;\r\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\r\n  const last = ticks[ticks.length - 1].value;\r\n  let major, index;\r\n\r\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\r\n    index = map[major];\r\n    if (index >= 0) {\r\n      ticks[index].major = true;\r\n    }\r\n  }\r\n  return ticks;\r\n}\r\n\r\n/**\r\n * @param {TimeScale} scale\r\n * @param {number[]} values\r\n * @param {Unit|undefined} [majorUnit]\r\n * @return {object[]}\r\n */\r\nfunction ticksFromTimestamps(scale, values, majorUnit) {\r\n  const ticks = [];\r\n  /** @type {Object<number,object>} */\r\n  const map = {};\r\n  const ilen = values.length;\r\n  let i, value;\r\n\r\n  for (i = 0; i < ilen; ++i) {\r\n    value = values[i];\r\n    map[value] = i;\r\n\r\n    ticks.push({\r\n      value,\r\n      major: false\r\n    });\r\n  }\r\n\r\n  // We set the major ticks separately from the above loop because calling startOf for every tick\r\n  // is expensive when there is a large number of ticks\r\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\r\n}\r\n\r\nexport default class TimeScale extends Scale {\r\n\r\n  static id = 'time';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    /**\r\n     * Scale boundary strategy (bypassed by min/max time options)\r\n     * - `data`: make sure data are fully visible, ticks outside are removed\r\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\r\n     * @see https://github.com/chartjs/Chart.js/pull/4556\r\n     * @since 2.7.0\r\n     */\r\n    bounds: 'data',\r\n\r\n    adapters: {},\r\n    time: {\r\n      parser: false, // false == a pattern string from or a custom callback that converts its argument to a timestamp\r\n      unit: false, // false == automatic or override with week, month, year, etc.\r\n      round: false, // none, or override with week, month, year, etc.\r\n      isoWeekday: false, // override week start day\r\n      minUnit: 'millisecond',\r\n      displayFormats: {}\r\n    },\r\n    ticks: {\r\n      /**\r\n       * Ticks generation input values:\r\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\r\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\r\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\r\n       * @see https://github.com/chartjs/Chart.js/pull/4507\r\n       * @since 2.7.0\r\n       */\r\n      source: 'auto',\r\n\r\n      callback: false,\r\n\r\n      major: {\r\n        enabled: false\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n\t * @param {object} props\r\n\t */\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    /** @type {{data: number[], labels: number[], all: number[]}} */\r\n    this._cache = {\r\n      data: [],\r\n      labels: [],\r\n      all: []\r\n    };\r\n\r\n    /** @type {Unit} */\r\n    this._unit = 'day';\r\n    /** @type {Unit=} */\r\n    this._majorUnit = undefined;\r\n    this._offsets = {};\r\n    this._normalized = false;\r\n    this._parseOpts = undefined;\r\n  }\r\n\r\n  init(scaleOpts, opts = {}) {\r\n    const time = scaleOpts.time || (scaleOpts.time = {});\r\n    /** @type {DateAdapter} */\r\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\r\n\r\n    adapter.init(opts);\r\n\r\n    // Backward compatibility: before introducing adapter, `displayFormats` was\r\n    // supposed to contain *all* unit/string pairs but this can't be resolved\r\n    // when loading the scale (adapters are loaded afterward), so let's populate\r\n    // missing formats on update\r\n    mergeIf(time.displayFormats, adapter.formats());\r\n\r\n    this._parseOpts = {\r\n      parser: time.parser,\r\n      round: time.round,\r\n      isoWeekday: time.isoWeekday\r\n    };\r\n\r\n    super.init(scaleOpts);\r\n\r\n    this._normalized = opts.normalized;\r\n  }\r\n\r\n  /**\r\n\t * @param {*} raw\r\n\t * @param {number?} [index]\r\n\t * @return {number}\r\n\t */\r\n  parse(raw, index) { // eslint-disable-line no-unused-vars\r\n    if (raw === undefined) {\r\n      return null;\r\n    }\r\n    return parse(this, raw);\r\n  }\r\n\r\n  beforeLayout() {\r\n    super.beforeLayout();\r\n    this._cache = {\r\n      data: [],\r\n      labels: [],\r\n      all: []\r\n    };\r\n  }\r\n\r\n  determineDataLimits() {\r\n    const options = this.options;\r\n    const adapter = this._adapter;\r\n    const unit = options.time.unit || 'day';\r\n    // eslint-disable-next-line prefer-const\r\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\r\n\r\n    /**\r\n\t\t * @param {object} bounds\r\n\t\t */\r\n    function _applyBounds(bounds) {\r\n      if (!minDefined && !isNaN(bounds.min)) {\r\n        min = Math.min(min, bounds.min);\r\n      }\r\n      if (!maxDefined && !isNaN(bounds.max)) {\r\n        max = Math.max(max, bounds.max);\r\n      }\r\n    }\r\n\r\n    // If we have user provided `min` and `max` labels / data bounds can be ignored\r\n    if (!minDefined || !maxDefined) {\r\n      // Labels are always considered, when user did not force bounds\r\n      _applyBounds(this._getLabelBounds());\r\n\r\n      // If `bounds` is `'ticks'` and `ticks.source` is `'labels'`,\r\n      // data bounds are ignored (and don't need to be determined)\r\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\r\n        _applyBounds(this.getMinMax(false));\r\n      }\r\n    }\r\n\r\n    min = isFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\r\n    max = isFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\r\n\r\n    // Make sure that max is strictly higher than min (required by the timeseries lookup table)\r\n    this.min = Math.min(min, max - 1);\r\n    this.max = Math.max(min + 1, max);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getLabelBounds() {\r\n    const arr = this.getLabelTimestamps();\r\n    let min = Number.POSITIVE_INFINITY;\r\n    let max = Number.NEGATIVE_INFINITY;\r\n\r\n    if (arr.length) {\r\n      min = arr[0];\r\n      max = arr[arr.length - 1];\r\n    }\r\n    return {min, max};\r\n  }\r\n\r\n  /**\r\n\t * @return {object[]}\r\n\t */\r\n  buildTicks() {\r\n    const options = this.options;\r\n    const timeOpts = options.time;\r\n    const tickOpts = options.ticks;\r\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\r\n\r\n    if (options.bounds === 'ticks' && timestamps.length) {\r\n      this.min = this._userMin || timestamps[0];\r\n      this.max = this._userMax || timestamps[timestamps.length - 1];\r\n    }\r\n\r\n    const min = this.min;\r\n    const max = this.max;\r\n\r\n    const ticks = _filterBetween(timestamps, min, max);\r\n\r\n    // PRIVATE\r\n    // determineUnitForFormatting relies on the number of ticks so we don't use it when\r\n    // autoSkip is enabled because we don't yet know what the final number of ticks will be\r\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\r\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\r\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\r\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\r\n      : determineMajorUnit(this._unit);\r\n    this.initOffsets(timestamps);\r\n\r\n    if (options.reverse) {\r\n      ticks.reverse();\r\n    }\r\n\r\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\r\n  }\r\n\r\n  afterAutoSkip() {\r\n    // Offsets for bar charts need to be handled with the auto skipped\r\n    // ticks. Once ticks have been skipped, we re-compute the offsets.\r\n    if (this.options.offsetAfterAutoskip) {\r\n      this.initOffsets(this.ticks.map(tick => +tick.value));\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Returns the start and end offsets from edges in the form of {start, end}\r\n\t * where each value is a relative width to the scale and ranges between 0 and 1.\r\n\t * They add extra margins on the both sides by scaling down the original scale.\r\n\t * Offsets are added when the `offset` option is true.\r\n\t * @param {number[]} timestamps\r\n\t * @protected\r\n\t */\r\n  initOffsets(timestamps = []) {\r\n    let start = 0;\r\n    let end = 0;\r\n    let first, last;\r\n\r\n    if (this.options.offset && timestamps.length) {\r\n      first = this.getDecimalForValue(timestamps[0]);\r\n      if (timestamps.length === 1) {\r\n        start = 1 - first;\r\n      } else {\r\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\r\n      }\r\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\r\n      if (timestamps.length === 1) {\r\n        end = last;\r\n      } else {\r\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\r\n      }\r\n    }\r\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\r\n    start = _limitValue(start, 0, limit);\r\n    end = _limitValue(end, 0, limit);\r\n\r\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\r\n  }\r\n\r\n  /**\r\n\t * Generates a maximum of `capacity` timestamps between min and max, rounded to the\r\n\t * `minor` unit using the given scale time `options`.\r\n\t * Important: this method can return ticks outside the min and max range, it's the\r\n\t * responsibility of the calling code to clamp values if needed.\r\n\t * @private\r\n\t */\r\n  _generate() {\r\n    const adapter = this._adapter;\r\n    const min = this.min;\r\n    const max = this.max;\r\n    const options = this.options;\r\n    const timeOpts = options.time;\r\n    // @ts-ignore\r\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\r\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\r\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\r\n    const hasWeekday = isNumber(weekday) || weekday === true;\r\n    const ticks = {};\r\n    let first = min;\r\n    let time, count;\r\n\r\n    // For 'week' unit, handle the first day of week option\r\n    if (hasWeekday) {\r\n      first = +adapter.startOf(first, 'isoWeek', weekday);\r\n    }\r\n\r\n    // Align first ticks on unit\r\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\r\n\r\n    // Prevent browser from freezing in case user options request millions of milliseconds\r\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\r\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\r\n    }\r\n\r\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\r\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\r\n      addTick(ticks, time, timestamps);\r\n    }\r\n\r\n    if (time === max || options.bounds === 'ticks' || count === 1) {\r\n      addTick(ticks, time, timestamps);\r\n    }\r\n\r\n    // @ts-ignore\r\n    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);\r\n  }\r\n\r\n  /**\r\n\t * @param {number} value\r\n\t * @return {string}\r\n\t */\r\n  getLabelForValue(value) {\r\n    const adapter = this._adapter;\r\n    const timeOpts = this.options.time;\r\n\r\n    if (timeOpts.tooltipFormat) {\r\n      return adapter.format(value, timeOpts.tooltipFormat);\r\n    }\r\n    return adapter.format(value, timeOpts.displayFormats.datetime);\r\n  }\r\n\r\n  /**\r\n\t * Function to format an individual tick mark\r\n\t * @param {number} time\r\n\t * @param {number} index\r\n\t * @param {object[]} ticks\r\n\t * @param {string|undefined} [format]\r\n\t * @return {string}\r\n\t * @private\r\n\t */\r\n  _tickFormatFunction(time, index, ticks, format) {\r\n    const options = this.options;\r\n    const formatter = options.ticks.callback;\r\n\r\n    if (formatter) {\r\n      return call(formatter, [time, index, ticks], this);\r\n    }\r\n\r\n    const formats = options.time.displayFormats;\r\n    const unit = this._unit;\r\n    const majorUnit = this._majorUnit;\r\n    const minorFormat = unit && formats[unit];\r\n    const majorFormat = majorUnit && formats[majorUnit];\r\n    const tick = ticks[index];\r\n    const major = majorUnit && majorFormat && tick && tick.major;\r\n\r\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\r\n  }\r\n\r\n  /**\r\n\t * @param {object[]} ticks\r\n\t */\r\n  generateTickLabels(ticks) {\r\n    let i, ilen, tick;\r\n\r\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\r\n      tick = ticks[i];\r\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\r\n\t * @return {number}\r\n\t */\r\n  getDecimalForValue(value) {\r\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\r\n  }\r\n\r\n  /**\r\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\r\n\t * @return {number}\r\n\t */\r\n  getPixelForValue(value) {\r\n    const offsets = this._offsets;\r\n    const pos = this.getDecimalForValue(value);\r\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\r\n  }\r\n\r\n  /**\r\n\t * @param {number} pixel\r\n\t * @return {number}\r\n\t */\r\n  getValueForPixel(pixel) {\r\n    const offsets = this._offsets;\r\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\r\n    return this.min + pos * (this.max - this.min);\r\n  }\r\n\r\n  /**\r\n\t * @param {string} label\r\n\t * @return {{w:number, h:number}}\r\n\t * @private\r\n\t */\r\n  _getLabelSize(label) {\r\n    const ticksOpts = this.options.ticks;\r\n    const tickLabelWidth = this.ctx.measureText(label).width;\r\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\r\n    const cosRotation = Math.cos(angle);\r\n    const sinRotation = Math.sin(angle);\r\n    const tickFontSize = this._resolveTickFontOptions(0).size;\r\n\r\n    return {\r\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\r\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * @param {number} exampleTime\r\n\t * @return {number}\r\n\t * @private\r\n\t */\r\n  _getLabelCapacity(exampleTime) {\r\n    const timeOpts = this.options.time;\r\n    const displayFormats = timeOpts.displayFormats;\r\n\r\n    // pick the longest format (milliseconds) for guestimation\r\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\r\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\r\n    const size = this._getLabelSize(exampleLabel);\r\n    // subtract 1 - if offset then there's one less label than tick\r\n    // if not offset then one half label padding is added to each end leaving room for one less label\r\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\r\n    return capacity > 0 ? capacity : 1;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getDataTimestamps() {\r\n    let timestamps = this._cache.data || [];\r\n    let i, ilen;\r\n\r\n    if (timestamps.length) {\r\n      return timestamps;\r\n    }\r\n\r\n    const metas = this.getMatchingVisibleMetas();\r\n\r\n    if (this._normalized && metas.length) {\r\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\r\n    }\r\n\r\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\r\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\r\n    }\r\n\r\n    return (this._cache.data = this.normalize(timestamps));\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getLabelTimestamps() {\r\n    const timestamps = this._cache.labels || [];\r\n    let i, ilen;\r\n\r\n    if (timestamps.length) {\r\n      return timestamps;\r\n    }\r\n\r\n    const labels = this.getLabels();\r\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\r\n      timestamps.push(parse(this, labels[i]));\r\n    }\r\n\r\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\r\n  }\r\n\r\n  /**\r\n\t * @param {number[]} values\r\n\t * @protected\r\n\t */\r\n  normalize(values) {\r\n    // It seems to be somewhat faster to do sorting first\r\n    return _arrayUnique(values.sort(sorter));\r\n  }\r\n}\r\n","import TimeScale from './scale.time';\r\nimport {_lookupByKey} from '../helpers/helpers.collection';\r\n\r\n/**\r\n * Linearly interpolates the given source `val` using the table. If value is out of bounds, values\r\n * at edges are used for the interpolation.\r\n * @param {object} table\r\n * @param {number} val\r\n * @param {boolean} [reverse] lookup time based on position instead of vice versa\r\n * @return {object}\r\n */\r\nfunction interpolate(table, val, reverse) {\r\n  let lo = 0;\r\n  let hi = table.length - 1;\r\n  let prevSource, nextSource, prevTarget, nextTarget;\r\n  if (reverse) {\r\n    if (val >= table[lo].pos && val <= table[hi].pos) {\r\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\r\n    }\r\n    ({pos: prevSource, time: prevTarget} = table[lo]);\r\n    ({pos: nextSource, time: nextTarget} = table[hi]);\r\n  } else {\r\n    if (val >= table[lo].time && val <= table[hi].time) {\r\n      ({lo, hi} = _lookupByKey(table, 'time', val));\r\n    }\r\n    ({time: prevSource, pos: prevTarget} = table[lo]);\r\n    ({time: nextSource, pos: nextTarget} = table[hi]);\r\n  }\r\n\r\n  const span = nextSource - prevSource;\r\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\r\n}\r\n\r\nclass TimeSeriesScale extends TimeScale {\r\n\r\n  static id = 'timeseries';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = TimeScale.defaults;\r\n\r\n  /**\r\n\t * @param {object} props\r\n\t */\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    /** @type {object[]} */\r\n    this._table = [];\r\n    /** @type {number} */\r\n    this._minPos = undefined;\r\n    /** @type {number} */\r\n    this._tableRange = undefined;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  initOffsets() {\r\n    const timestamps = this._getTimestampsForTable();\r\n    const table = this._table = this.buildLookupTable(timestamps);\r\n    this._minPos = interpolate(table, this.min);\r\n    this._tableRange = interpolate(table, this.max) - this._minPos;\r\n    super.initOffsets(timestamps);\r\n  }\r\n\r\n  /**\r\n\t * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\r\n\t * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\r\n\t * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\r\n\t * extremity (left + width or top + height). Note that it would be more optimized to directly\r\n\t * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\r\n\t * to create the lookup table. The table ALWAYS contains at least two items: min and max.\r\n\t * @param {number[]} timestamps\r\n\t * @return {object[]}\r\n\t * @protected\r\n\t */\r\n  buildLookupTable(timestamps) {\r\n    const {min, max} = this;\r\n    const items = [];\r\n    const table = [];\r\n    let i, ilen, prev, curr, next;\r\n\r\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\r\n      curr = timestamps[i];\r\n      if (curr >= min && curr <= max) {\r\n        items.push(curr);\r\n      }\r\n    }\r\n\r\n    if (items.length < 2) {\r\n      // In case there is less that 2 timestamps between min and max, the scale is defined by min and max\r\n      return [\r\n        {time: min, pos: 0},\r\n        {time: max, pos: 1}\r\n      ];\r\n    }\r\n\r\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\r\n      next = items[i + 1];\r\n      prev = items[i - 1];\r\n      curr = items[i];\r\n\r\n      // only add points that breaks the scale linearity\r\n      if (Math.round((next + prev) / 2) !== curr) {\r\n        table.push({time: curr, pos: i / (ilen - 1)});\r\n      }\r\n    }\r\n    return table;\r\n  }\r\n\r\n  /**\r\n\t * Returns all timestamps\r\n\t * @return {number[]}\r\n\t * @private\r\n\t */\r\n  _getTimestampsForTable() {\r\n    let timestamps = this._cache.all || [];\r\n\r\n    if (timestamps.length) {\r\n      return timestamps;\r\n    }\r\n\r\n    const data = this.getDataTimestamps();\r\n    const label = this.getLabelTimestamps();\r\n    if (data.length && label.length) {\r\n      // If combining labels and data (data might not contain all labels),\r\n      // we need to recheck uniqueness and sort\r\n      timestamps = this.normalize(data.concat(label));\r\n    } else {\r\n      timestamps = data.length ? data : label;\r\n    }\r\n    timestamps = this._cache.all = timestamps;\r\n\r\n    return timestamps;\r\n  }\r\n\r\n  /**\r\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\r\n\t * @return {number}\r\n\t */\r\n  getDecimalForValue(value) {\r\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\r\n  }\r\n\r\n  /**\r\n\t * @param {number} pixel\r\n\t * @return {number}\r\n\t */\r\n  getValueForPixel(pixel) {\r\n    const offsets = this._offsets;\r\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\r\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\r\n  }\r\n}\r\n\r\nexport default TimeSeriesScale;\r\n","// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n// @ts-nocheck\r\n\r\n/**\r\n * @namespace Chart\r\n */\r\nimport Chart from './core/core.controller';\r\n\r\nimport * as helpers from './helpers';\r\nimport _adapters from './core/core.adapters';\r\nimport Animation from './core/core.animation';\r\nimport animator from './core/core.animator';\r\nimport Animations from './core/core.animations';\r\nimport * as controllers from './controllers';\r\nimport DatasetController from './core/core.datasetController';\r\nimport Element from './core/core.element';\r\nimport * as elements from './elements/index';\r\nimport Interaction from './core/core.interaction';\r\nimport layouts from './core/core.layouts';\r\nimport * as platforms from './platform/index';\r\nimport * as plugins from './plugins';\r\nimport registry from './core/core.registry';\r\nimport Scale from './core/core.scale';\r\nimport * as scales from './scales';\r\nimport Ticks from './core/core.ticks';\r\n\r\n// Register built-ins\r\nChart.register(controllers, scales, elements, plugins);\r\n\r\nChart.helpers = {...helpers};\r\nChart._adapters = _adapters;\r\nChart.Animation = Animation;\r\nChart.Animations = Animations;\r\nChart.animator = animator;\r\nChart.controllers = registry.controllers.items;\r\nChart.DatasetController = DatasetController;\r\nChart.Element = Element;\r\nChart.elements = elements;\r\nChart.Interaction = Interaction;\r\nChart.layouts = layouts;\r\nChart.platforms = platforms;\r\nChart.Scale = Scale;\r\nChart.Ticks = Ticks;\r\n\r\n// Compatibility with ESM extensions\r\nObject.assign(Chart, controllers, scales, elements, plugins, platforms);\r\nChart.Chart = Chart;\r\n\r\nif (typeof window !== 'undefined') {\r\n  window.Chart = Chart;\r\n}\r\n\r\nexport default Chart;\r\n\r\n"],"names":["id","uid","isNullOrUndef","value","Array","isArray","isNumberFinite","defaultValue","type","slice","isObject","Object","prototype","toString","call","i","len","Number","isFinite","fn","finiteOrDefault","valueOrDefault","v1","dimension","endsWith","parseFloat","callback","args","thisArg","apply","each","loopable","reverse","source","length","keys","k","target","isValidKey","_elementsEqual","a0","a1","tval","sval","merge","options","v0","datasetIndex","index","clone","merger","ilen","current","sources","create","klen","mergeIf","indexOf","key","_merger","v","o","y","parts","split","tmp","part","_mergerIf","resolveObjectKey","obj","_capitalize","str","hasOwnProperty","keyResolvers","x","e","INFINITY","POSITIVE_INFINITY","RAD_PER_DEG","PI","HALF_PI","QUARTER_PI","TWO_THIRDS_PI","log10","sign","abs","epsilon","Math","almostEquals","roundedRange","round","range","niceFraction","niceRange","pow","floor","result","sqrt","_factorize","b","a","push","almostWhole","sort","isNaN","array","degrees","property","toDegrees","radians","min","max","toRadians","p","angle","distance","radialDistanceFromCenter","distanceBetweenPoints","getAngleFromPoint","centrePoint","anglePoint","distanceFromXCenter","distanceFromYCenter","_normalizeAngle","TAU","angleToStart","endToAngle","angleToEnd","_angleDiff","_limitValue","_lookup","table","cmp","mid","hi","lo","end","last","values","start","_rlookupByKey","defineProperty","enumerable","listener","arrayEvents","_chartjs","base","listeners","stub","method","splice","this","forEach","object","res","unlistenArrayEvents","Set","set","items","requestAnimFrame","window","requestAnimationFrame","updateFn","ticking","rest","updateArgs","timeout","debounce","delay","check","meta","align","clearTimeout","setTimeout","_toLeftRightCenter","left","right","rtl","ymax","_getStartAndCountOfVisiblePoints","points","animationsDisabled","Animator","constructor","_request","anims","numSteps","callbacks","chart","initial","_notify","date","duration","currentStep","_running","_charts","item","_active","remaining","draw","_total","tick","charts","get","running","complete","progress","event","Date","cur","_getAnims","has","now","reduce","acc","_duration","_refresh","lim","l","h","p2b","n2b","b2n","n2p","map$1","A","B","C","D","E","F","c","d","f","hex","h1","h2","eq","hexString","r","g","isShort","alpha","undefined","HUE_RE","hsl2rgbn","s","n","hsv2rgbn","hwb2rgbn","w","rgb","rgb2hsl","hueValue","calln","map","hsl2rgb","hue","hueParse","m","exec","p1","p2","hwb2rgb","hsv2rgb","Z","Y","X","W","V","U","T","S","R","Q","P","O","N","M","L","K","G","H","I","J","names$1","OiceXe","antiquewEte","aqua","aquamarRe","azuY","beige","bisque","black","blanKedOmond","Xe","XeviTet","bPwn","burlywood","caMtXe","KartYuse","KocTate","cSO","cSnflowerXe","cSnsilk","crimson","cyan","xXe","xcyan","xgTMnPd","xWay","xgYF","xgYy","xkhaki","xmagFta","xTivegYF","xSange","xScEd","xYd","xsOmon","xsHgYF","xUXe","xUWay","xUgYy","xQe","xviTet","dAppRk","dApskyXe","dimWay","dimgYy","dodgerXe","fiYbrick","flSOwEte","foYstWAn","fuKsia","gaRsbSo","ghostwEte","gTd","gTMnPd","Way","gYF","gYFLw","gYy","honeyMw","hotpRk","RdianYd","Rdigo","ivSy","khaki","lavFMr","lavFMrXsh","lawngYF","NmoncEffon","ZXe","ZcSO","Zcyan","ZgTMnPdLw","ZWay","ZgYF","ZgYy","ZpRk","ZsOmon","ZsHgYF","ZskyXe","ZUWay","ZUgYy","ZstAlXe","ZLw","lime","limegYF","lRF","magFta","maPon","VaquamarRe","VXe","VScEd","VpurpN","VsHgYF","VUXe","VsprRggYF","VQe","VviTetYd","midnightXe","mRtcYam","mistyPse","moccasR","navajowEte","navy","Tdlace","Tive","TivedBb","Sange","SangeYd","ScEd","pOegTMnPd","pOegYF","pOeQe","pOeviTetYd","papayawEp","pHKpuff","peru","pRk","plum","powMrXe","purpN","YbeccapurpN","Yd","Psybrown","PyOXe","saddNbPwn","sOmon","sandybPwn","sHgYF","sHshell","siFna","silver","skyXe","UXe","UWay","UgYy","snow","sprRggYF","stAlXe","tan","teO","tEstN","tomato","Qe","viTet","JHt","wEte","wEtesmoke","Lw","LwgYF","names","nameParse","unpacked","tkeys","j","ok","nk","replace","parseInt","unpack","transparent","toLowerCase","RGB_RE","to","from","modHSL","ratio","proto","assign","fromObject","input","functionParse","charAt","rgbParse","Color","ret","_rgb","_valid","valid","rgbString","hslString","mix","color","weight","c1","c2","w2","w1","interpolate","t","rgb1","rgb2","clearer","greyscale","val","opaquer","negate","lighten","darken","saturate","desaturate","rotate","deg","index_esm","isPatternOrGradient","colorLib","getHoverColor","numbers","colors","intlCache","Map","formatNumber","num","locale","cacheKey","JSON","stringify","formatter","Intl","NumberFormat","getNumberFormat","format","formatters","notation","delta","numeric","tickValue","numDecimal","maximumFractionDigits","maxTick","ticks","calculateDelta","logDelta","minimumFractionDigits","remain","logarithmic","significand","overrides","descriptors","node","root","scope","getScope","Defaults","_descriptors","_appliers","events","backgroundColor","borderColor","datasets","devicePixelRatio","context","platform","getDevicePixelRatio","elements","font","family","size","style","lineHeight","hover","intersect","includeInvisible","ctx","hoverBorderColor","maintainAspectRatio","onHover","onClick","mode","scales","showLine","drawActiveElementsOnTop","describe","responsive","scale","defineProperties","route","name","targetScope","targetName","scopeObject","_scriptable","privateName","applyAnimationsDefaults","applyLayoutsDefaults","applyScaleDefaults","targetScopeObject","defaults","easing","loop","_fallback","_indexable","properties","active","animation","resize","show","animations","visible","hide","autoPadding","padding","top","bottom","display","offset","beginAtZero","drawOnChartArea","tickColor","grid","dash","dashOffset","width","tickWidth","_ctx","lineWidth","text","title","minRotation","mirror","labelOffset","maxRotation","Ticks","minor","major","crossAlign","showLabelBackdrop","backdropColor","backdropPadding","startsWith","parent","document","valueInPixels","domNode","getComputedStyle","element","ownerDocument","getStyle","getPropertyValue","styleValue","parentNode","parentProperty","defaultView","pos","el","styles","getPositionedStyle","suffix","touches","offsetX","offsetY","box","positions","evt","maxWidth","maxHeight","canvas","currentDevicePixelRatio","height","clientHeight","paddings","borders","container","clientX","rect","shadowRoot","useOffsetPos","borderBox","boxSizing","xOffset","yOffset","containerBorder","containerStyle","containerPadding","round1","maintainHeight","aspectRatio","parseMaxStyle","containerSize","_getParentNode","bbHeight","margins","getContainerSize","bbWidth","pixelRatio","forceStyle","retinaScale","forceRatio","passiveSupported","deviceHeight","deviceWidth","matches","setTransform","textWidth","longest","_longestText","arrayOfThings","cache","_measureText","data","gc","string","thing","garbageCollect","jlen","nestedThing","restore","gcLen","halfWidth","save","resetTransform","drawPointLegend","pixel","translate","clearCanvas","radius","clearRect","ellipse","cornerRadius","xOffsetW","yOffsetW","pointStyle","rotation","sin","rad","lineTo","closePath","drawImage","arc","moveTo","cos","SQRT1_2","stroke","margin","area","clipArea","unclipArea","_steppedLineTo","midpoint","previous","fill","lines","point","line","setRenderOpts","opts","flip","decorateText","_bezierCurveTo","fillStyle","textAlign","cp1x","cp2x","cp1y","cp2y","renderText","strokeWidth","strokeColor","translation","yDecoration","strikethrough","strokeStyle","beginPath","strokeText","fillText","topLeft","scopes","fallback","getTarget","override","Symbol","_cacheable","_scopes","_rootScopes","rootScopes","_createResolver","prefixes","Proxy","deleteProperty","prop","Reflect","getPrototypeOf","_cached","parsed","_resolveWithPrefixes","getOwnPropertyDescriptor","_stack","descriptorDefaults","ownKeys","getKeysFromAllScopes","storage","_storage","_resolveWithContext","_keys","configurable","_attachContext","proxy","subProxy","_proxy","_context","setContext","_allKeys","isIndexable","isFunction","_subProxy","isScriptable","receiver","Error","join","createSubResolver","resolveFallback","needsSubResolver","add","allScopes","defined","filter","arr","resolver","addScopesFromKey","_resolveArray","allKeys","resolve","_resolveScriptable","delete","scriptable","indexable","readKey","subGetTarget","parentScopes","parentFallback","resolveKeysFromAllScopes","count","addScopes","EPSILON","getPoint","skip","getValueAxis","indexAxis","splineCurve","firstPoint","middlePoint","afterPoint","next","d01","d12","s01","s12","fa","fb","deltaK","splineCurveMonotone","pointAfter","valueAxis","pointsLen","monotoneAdjust","pointBefore","pointCurrent","inAreaNext","inAreaPrev","_isPointInArea","inArea","slopeDelta","tauK","alphaK","betaK","squaredMagnitude","mK","capControlPoint","iPixel","vPixel","pt","capBezierPoints","spanGaps","_updateBezierControlPoints","controlPoints","prev","atEdge","elasticIn","elasticOut","effects","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeOutBounce","easeInOutBounce","_steppedInterpolation","_bezierInterpolation","_pointInLine","cp2","cp1","LINE_HEIGHT","RegExp","FONT_STYLE","toLineHeight","match","_readValueToProps","props","objProps","read","toTRBLCorners","inputs","info","cacheable","console","warn","minmax","change","getRtlAdapter","rectX","setWidth","xPlus","leftForLtr","itemWidth","getRightToLeftAdapter","_itemWidth","overrideTextDirection","direction","original","getPropertyPriority","setProperty","prevTextDirection","restoreTextDirection","between","_angleBetween","compare","_isBetween","normalize","bounds","shouldStop","endIsBefore","startBound","endBound","propertyFn","segment","getSegment","prevValue","inside","subStart","shouldStart","_boundSegment","normalizeSegment","segments","sub","_computeSegments","segmentOptions","dir","splitByStyles","stop","findStartAndEnd","completeLoop","doSplitByStyles","solidSegments","_fullLoop","chartContext","_chart","getContext","addStyle","prevStyle","readStyle","st","borderCapStyle","borderWidth","borderDashOffset","p0DataIndex","p1DataIndex","pixelSize","fontStyle","fontFamily","binarySearch","metaset","axis","controller","lookupMethod","iScale","_sorted","_reversePixels","_lookupByKey","_sharedOptions","getRange","metasets","handler","deltaX","getSortedVisibleDatasetMetas","position","isPointInArea","useFinalPosition","evaluateInteractionItems","chartArea","inRange","minDistance","useX","pt1","pt2","deltaY","useY","intersectsItem","center","getCenterPoint","distanceMetric","getRelativePosition","getNearestCartesianItems","getNearestRadialItems","getAxisItems","Interaction","STATIC_POSITIONS","filterByPosition","filterDynamicPositionByAxis","layouts","stacks","wrap","includes","stack","stackWeight","vBoxMaxWidth","fullSize","hBoxMaxHeight","params","layout","factor","availableHeight","sortByWeight","boxPadding","maxPadding","updateDims","horizontal","updateMaxPadding","getPadding","newWidth","newHeight","widthChanged","heightChanged","other","handleMaxPadding","marginForPositions","fitBoxes","boxes","refit","same","getMargins","refitBoxes","changed","placeBoxes","userPadding","setBoxDims","placed","height1","width1","addBox","_layers","verticalBoxes","horizontalBoxes","layoutItem","minPadding","visibleVerticalBoxCount","availableWidth","layoutBoxes","buildStacks","centerHorizontal","centerVertical","concat","vertical","rightAndBottom","getCombinedMax","total","freeze","outerWidth","toPadding","updatePos","BasePlatform","acquireContext","releaseContext","BasicPlatform","config","touchend","EVENT_TYPES","pointerout","touchmove","pointerenter","pointerdown","pointermove","pointerup","pointerleave","renderHeight","renderWidth","isNullOrEmpty","nodeListContains","nodeList","eventListenerOptions","childList","subtree","observer","trigger","entry","addedNodes","entries","removedNodes","observe","drpListeningCharts","oldDevicePixelRatio","addEventListener","dpr","removeEventListener","onWindowResize","throttled","contentRect","releaseObserver","disconnect","clientWidth","unlistenDevicePixelRatioChanges","native","fromNativeEvent","EXPANDO_KEY","getAttribute","displayWidth","displayHeight","readUsedSize","initCanvas","proxies","createAttachObserver","createResizeObserver","getMaximumSize","attach","detach","createProxyAndListen","_detectPlatform","_isDomSupported","OffscreenCanvas","DomPlatform","interpolators","boolean","number","c0","helpersColor","Animation","cfg","currentValue","_loop","_target","_prop","_from","_to","_promises","update","_start","elapsed","promises","Promise","_fn","rej","resolved","Animations","_properties","configure","animationOptions","animatedProps","getOwnPropertyNames","option","_animateOptions","newOptions","$animations","resolveTargetOptions","_createAnimations","$shared","anim","wait","all","awaitAll","then","allowedOverflow","yScale","filterVisible","otherValue","singleMode","dsIndex","convertObjectDataToArray","isStacked","stacked","indexScale","getOrCreateStack","stackKey","indexValue","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","iAxis","vAxis","_stacks","getUserBounds","valueScale","getStackKey","itemStacks","_top","getFirstScaleId","createContext","shift","clearStacks","_parsed","cloneIfNotShared","getSortedDatasetIndices","cached","shared","DatasetController","static","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","getMeta","datasetElementType","dataElementType","_parsing","_data","_objectData","linkScales","_stacked","addElements","updateIndex","_cachedMeta","isPluginEnabled","dataset","yid","rid","vAxisID","getScaleForId","chooseId","xid","xAxisID","yAxisID","rAxisID","iid","iAxisID","vid","xScale","rScale","getDataset","_update","_destroy","adata","oldStacked","listenArrayEvents","stackChanged","_dataCheck","resetNewElements","_resyncElements","parsePrimitiveData","scopeKeys","datasetScopeKeys","_type","getOptionScopes","_cachedDataOpts","sorted","labels","parse","singleScale","parseArrayData","parsedValue","parseObjectData","xAxisKey","otherScale","updateRangeFromParsed","yAxisKey","getParsed","getDataElement","applyStack","NaN","label","toClip","_getOtherScale","canStack","hidden","createStack","NEGATIVE_INFINITY","otherMax","minDefined","maxDefined","otherMin","_skip","dataIndex","getMaxOverflow","getLabelAndValue","getLabelForValue","elementType","disabled","_drawStart","raw","resolveDataElementOptions","getSharedOptions","firstOpts","updateSharedOptions","sharedOptions","includeOptions","_resolveElementOptions","sharing","removeHoverStyle","setHoverStyle","resolveNamedOptions","arg2","numData","transition","_insertElements","_removeElements","datasetAnimationScopeKeys","move","isDirectUpdateMode","_animationsDisabled","removed","previouslySharedOptions","_setStyle","_resolveAnimations","_removeDatasetHoverStyle","_setDatasetHoverStyle","Element","tooltipPosition","getProps","hasValue","isNumber","final","autoSkip","tickLength","_tickSize","maxScale","_length","_maxLength","maxChart","majorIndices","newTicks","tickOpts","enabled","getMajorIndices","spacing","numMajorIndices","majorStart","ceil","ticksLimit","evenMajorSpacing","getEvenSpacing","factors","determineMaxTicks","avgMajorSpacing","first","majorEnd","diff","offsetFromEdge","edge","sample","numItems","increment","validIndex","_startPixel","getPixelForGridLine","offsetGridLines","_endPixel","lineValue","getPixelForTick","getTickMarkLength","drawTicks","titleY","positionAxisID","reverseAlign","Scale","super","paddingTop","paddingLeft","labelRotation","_margins","paddingBottom","_borderValue","_cache","_dataLimitsCached","_gridLineItems","_labelItems","init","_userMin","_suggestedMax","_userMax","_suggestedMin","_ticksLength","metas","getMinMax","sampleSize","paddingRight","getLabels","isHorizontal","xLabels","yLabels","afterBuildTicks","beforeUpdate","grace","beforeFit","fit","afterFit","endPixel","_labelSizes","beforeSetDimensions","setDimensions","afterSetDimensions","reversePixels","afterDataLimits","_range","_addGrace","beforeBuildTicks","buildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","afterUpdate","startPixel","_callHooks","_alignToPixels","alignToPixels","notifyPlugins","labelSizes","maxLabelDiagonal","beforeTickToLabelConversion","generateTickLabels","minSize","tickPadding","angleRadians","numTicks","labelHeight","_getLabelSizes","widest","labelWidth","_calculatePadding","maxLabelWidth","getTitleHeight","maxLabelHeight","asin","highest","offsetLeft","titleOpts","gridOpts","titleHeight","_handleMargins","isRotated","labelsBelowTicks","offsetRight","tickFont","_resolveTickFontOptions","widths","heights","afterTickToLabelConversion","_computeLabelSizes","decimal","_longestTextCache","caches","getPixelForValue","nestedLabel","widestLabelSize","highestLabelSize","fontString","optionTicks","autoSkipPadding","toFont","valueAt","idx","ticksLength","alignBorderValue","ty2","tl","getPixelForDecimal","_alignPixel","x2","maxTicksLimit","lineColor","optsAtIndex","tickBorderDashOffset","alignedLineValue","tx2","titleX","_alignStartEnd","y2","titleArgs","y1","borderDash","tickBorderDash","borderValue","tickAndPadding","hTickAndPadding","borderOpts","border","axisWidth","axisHalfWidth","x1","_getYAxisLabelAlignment","tx1","textBaseline","ty1","lineCount","positionAxisID1","value1","limit","step","optsAtIndexBorder","textOffset","backdrop","labelPadding","_getXAxisLabelAlignment","tickTextAlign","ret1","halfCount","textStrokeColor","textStrokeWidth","fillRect","getLineWidthForValue","lineDashOffset","drawLine","lastLineWidth","_computeLabelArea","drawBackground","findIndex","_computeGridLineItems","_isVisible","setLineDash","tz","gz","z","bz","drawBorder","isForType","isPrototypeOf","parentScope","register","registerDefaults","propertyParts","sourceName","sourceScope","routes","isIChartComponent","pop","routeDefaults","defaultRoutes","TypedRegistry","plugins","_typedRegistries","controllers","_each","remove","addControllers","addPlugins","getController","_get","getElement","getPlugin","reg","removeElements","removePlugins","component","camelMethod","removeScales","typedRegistry","arg","_getRegistryForType","PluginService","_init","descriptor","_createDescriptors","callCallback","plugin","hook","_oldCache","invalidate","previousDescriptors","localIds","registry","getOpts","local","i1","pluginOpts","allPlugins","createDescriptors","_notifyStateChanges","some","createResolver","getIndexAxis","datasetDefaults","determineAxis","scaleOptions","initOptions","chartDefaults","configScales","chartIndexAxis","scaleConf","error","defaultId","getDefaultScaleIDFromAxis","defaultScaleOptions","defaultID","getAxisFromDefaultScaleID","mergeScaleConfig","initData","keyCache","keysCached","cachedKeys","generate","addIfFound","Config","_config","initConfig","_scopeCache","_resolverCache","clearCache","clear","datasetType","datasetElementScopeKeys","additionalOptionScopes","mainScope","keyLists","resetCache","_cachedScopes","needContext","subResolver","chartOptionScopes","subPrefixes","getResolver","hasFunction","KNOWN_POSITIONS","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","getChart","instances","intKey","inChartArea","invalidatePlugins","userConfig","existingChart","initialCanvas","updateConfig","_aspectRatio","_lastEvent","_plugins","$proxies","_hiddenIndices","attached","_doResize","_dataChanges","_listeners","_responsiveListeners","animator","listen","_initialize","_options","_resize","_resizeBeforeDraw","newSize","newRatio","axisOptions","axisID","onResize","scaleOpts","updated","render","dposition","buildOrUpdateScales","scaleClass","scaleType","dtype","hasUpdated","positionIsHorizontal","getScale","numMeta","_updateMetasets","_metasets","newControllers","getDatasetMeta","_sortedMetasets","order","isDatasetVisible","_dataset","_removeUnreferencedMetasets","ControllerClass","cancelable","reset","_resetElements","_minPadding","animsDisabled","_updateScales","_checkEventBindings","buildOrUpdateControllers","_updateHoverStyles","buildOrUpdateElements","removeBox","setsEqual","newEvents","_updateDatasets","_getUniformDataChanges","moveNumericKeys","_eventHandler","makeSet","ensureScalesHaveIDs","existingEvents","noArea","changes","datasetCount","changeSet","_updateLayout","ilen1","layers","_drawDataset","useClip","getDatasetArea","clip","getElementsAtEventForMode","_clip","toggleDataVisibility","getDataVisibility","modes","_updateVisibility","destroy","getVisibleDatasetCount","setDatasetVisibility","_remove","_destroyDatasetMeta","_stop","_add","detached","unbindEvents","toBase64Image","toDataURL","bindEvents","updateHoverStyle","deactivated","replay","activated","eventFilter","prefix","activeElements","lastActive","notify","lastEvent","isClick","abstract","formats","DateAdapterBase","members","endOf","updateMinAndPrev","$bar","visibleMetas","getAllParsedValues","_arrayUnique","curr","thickness","parseValue","barEnd","barStart","startValue","endValue","_custom","parseArrayOrPrimitive","isFloatBar","borderProps","custom","setBorderSkipped","borderSkipped","parseEdge","swap","startEnd","v2","orig","inflateAmount","setInflateAmount","grouped","DoughnutController","animateRotate","animateScale","circumference","generateLabels","legend","legendItem","innerRadius","outerRadius","getter","_getRotation","_getRotationExtents","getMaxBorderWidth","cutout","toPercentage","radiusLength","arcs","getMaxOffset","maxSize","chartWeight","startX","startY","startAngle","endX","endAngle","endY","calcMax","calcMin","maxX","maxY","minX","minY","ratioX","ratioY","getRatioAndOffset","maxRadius","toDimension","updateElements","_getVisibleDatasetWeightTotal","_getRingWeightOffset","animationOpts","centerX","_circumference","centerY","_getSharedOptions","updateElement","metaData","calculateCircumference","calculateTotal","ringWeightOffset","borderAlign","hoverBorderWidth","hoverOffset","categoryPercentage","barPercentage","_value_","vAxisKey","iAxisKey","vpixels","enableBorderRadius","ipixels","skipNull","head","_calculateBarValuePixels","_calculateBarIndexPixels","ruler","_bottom","bars","pixels","_getStackCount","barSign","barThickness","computeMinSampleSize","halfGrid","baseValue","minBarLength","maxBarThickness","stackCount","floating","rects","actualBase","percent","chunk","initialize","getBasePixel","_scaleRangesChanged","_datasetIndex","_decimated","resolveDatasetElementOptions","animated","maxGapLength","directUpdate","pointsCount","prevParsed","nullData","lastPoint","circular","pointLabels","_parseObjectDataRadialScale","bind","_updateRadius","cutoutPercentage","datasetStartAngle","xCenter","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","pointPosition","getPointPositionForValue","clipArc","pixelMargin","angleMargin","parseBorderRadius","angleDelta","borderRadius","halfThickness","innerLimit","innerStart","innerEnd","outerArcLimit","outerStart","computeOuterLimit","theta","rThetaToXY","innerR","pathArc","outerStartAdjustedAngle","outerEndAdjustedAngle","pCenter","innerEndAdjustedAngle","spacingOffset","avNogSpacingRadius","angleOffset","innerStartAdjustedAngle","outerEnd","outerStartAdjustedRadius","outerEndAdjustedRadius","innerStartAdjustedRadius","innerEndAdjustedRadius","outerEndY","p4","drawArc","pCenter1","p8","pCenter3","outerStartY","outerEndX","borderJoinStyle","inner","lineJoin","fullCircles","drawFullCircleBorders","getLineMethod","pathVars","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","stepped","tension","cubicInterpolationMode","lastY","prevX","avgX","countX","pointIndex","useFastPath","truncX","strokePathWithCache","drawX","path","strokePathDirect","fastPathSegment","usePath2D","_path","Path2D","segmentMethod","_getSegmentMethod","LineElement","_points","_pointsUpdated","interpolated","_segments","_boundSegments","hitRadius","getBarBounds","bar","half","skipOrLimit","boundingRects","toTRBL","maxH","maxW","enableBorder","topRight","maxR","bottomLeft","bottomRight","outer","skipX","hasRadius","skipY","amount","refRect","chartX","chartY","withinRadius","halfAngle","fix","rAdjust","hoverRadius","mouseX","mouseY","inXRange","drawPoint","addRectPath","inflateRect","addRoundedRectPath","addNormalRectPath","inYRange","cleanDecimatedDataset","cleanDecimatedData","algorithm","xAxis","parsing","pointCount","getStartAndCountOfVisiblePointsSimplified","threshold","decimated","samples","sampledIndex","bucketWidth","endIndex","avgRangeStart","nextA","avgRangeEnd","avgY","avgRangeLength","pointAx","rangeOffs","maxArea","rangeTo","maxAreaPoint","minMaxDecimation","lttbDecimation","minIndex","maxIndex","startIndex","xMax","xMin","lastIndex","intermediateIndex1","intermediateIndex2","_getBounds","_findSegmentEnd","_getEdge","boundary","linePoints","_resolveTarget","propagate","visited","_decodeFill","parseFillOption","firstCh","decodeTargetIndex","sourcePoint","linesBelow","postponed","pointValue","findPoint","simpleArc","_getTarget","getLineByIndex","below","unshift","addPointsBelow","sourcePoints","_buildStackLine","computeLinearBoundary","getBaseValue","_getTargetPixel","computeCircularBoundary","_drawfill","lineOpts","fillOption","above","clipVertical","doFill","clipY","lineLoop","tpoints","targetSegments","tgt","subBounds","fillSources","fillSource","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","drawTime","updateControlPoints","beforeDatasetsDraw","$filler","_shouldApplyFill","beforeDatasetDraw","labelOpts","fontSize","boxHeight","boxWidth","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","_hoveredItem","lineWidths","buildLabels","legendItems","labelFont","_fitRows","getBoxSize","_fitCols","legendHitBoxes","row","measureText","hitboxes","totalHeight","_itemHeight","columnSizes","heightLimit","totalWidth","currentColHeight","currentColWidth","legendItemText","fontLineHeight","calculateLegendItemHeight","calculateItemHeight","col","rtlHelper","adjustHitBoxes","hitbox","hitbox1","defaultColor","_draw","drawLegendBox","cursor","drawTitle","lineCap","textDirection","fontColor","realX","SQRT2","lineDash","halfFontSize","drawOptions","yBoxTop","xBoxLeft","_textX","titleFont","topPaddingPlusHalfFontSize","titlePadding","_computeTitleHeight","_getLegendItemAt","lh","isListened","hoveredItem","hitBox","onLeave","sameItem","calculateItemSize","calculateItemWidth","_element","_args","ci","handleEvent","usePointStyle","useBorderRadius","_getSortedDatasetMetas","Title","_padding","textSize","_drawArgs","fontOpts","plugin_title","titleBlock","createTitle","WeakMap","plugin_subtitle","positioners","average","nearest","nearestElement","eventPosition","tp","toPush","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","tooltip","getTooltipSize","body","footer","footerMarginTop","maxLineWidth","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","footerSpacing","widthPadding","determineYAlign","displayColors","doesNotFitWithAlign","caretSize","determineXAlign","yAlign","xAlign","chartWidth","caret","caretPadding","determineAlignment","alignment","pushOrConcat","paddingAndSize","beforeTitle","tooltipItems","noop","getAlignedX","getBeforeAfterBodyLines","splitNewlines","tooltipItem","defaultCallbacks","formattedValue","labelCount","labelTextColor","labelPointStyle","beforeFooter","bodyColor","afterLabel","invokeCallbackWithFallback","opacity","_eventPosition","_cachedAnimations","labelPointStyles","labelTextColors","scoped","bodyItems","afterFooter","afterTitle","getBeforeBody","overrideCallbacks","labelColors","_createItems","getBody","itemSort","caretX","caretY","external","drawCaret","getCaretPosition","getTitle","ptX","ptY","tooltipPoint","y3","getFooter","_size","caretPosition","_tooltipItems","x3","colorY","titleAlign","innerX","rtlColorX","multiKeyBackground","bodySpacing","bodyAlign","bodyLineHeight","fillLineOfText","xLinePadding","bodyAlignForCalculation","textColor","outerX","drawFooter","tooltipSize","quadraticCurveTo","animX","footerAlign","footerColor","animY","positionAndSize","getBackgroundPoint","drawBody","_updateAnimationTarget","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","Tooltip","afterInit","_ignoreReplayEvents","afterDraw","_getActiveElements","_willRender","afterEvent","findOrAddLabel","addedLabels","addIfString","lastIndexOf","_getLabelForValue","relativeLabelSize","minSpacing","LinearScaleBase","_endValue","_valueRange","minSign","setMax","handleTickRangeOptions","setMin","maxSign","maxTicks","stepSize","getTickLimit","precision","dataRange","_setMinAndMaxByKey","MIN_SPACING","rmax","unit","maxSpaces","rmin","countDefined","numSpaces","niceMax","niceNum","niceMin","decimalPlaces","includeBounds","_startValue","generateTicks","LinearScale","determineDataLimits","computeTickLimit","getValueForPixel","log10Floor","changeExponent","isMajor","tickVal","steps","rangeExp","rangeStep","generationOptions","exp","minExp","lastTick","LogarithmicScale","_zero","getDecimalForPixel","getTickBackdropHeight","determineLimits","fitWithPointLabels","valueCount","pointLabelOpts","additionalAngle","centerPointLabels","getPointPosition","plFont","hLimits","vLimits","setCenterPoint","limits","_pointLabelItems","updateLimits","extra","outerDistance","pointLabelPosition","getTextAlignForAngle","leftForTextAlign","buildPointLabelItems","pathRadiusLine","yCenter","drawRadiusLine","RadialLinearScale","angleLines","drawingArea","_pointLabels","rightMovement","bottomMovement","angleMultiplier","topMovement","leftMovement","scalingFactor","getPointLabelContext","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","drawPointLabels","drawGrid","backdropLeft","backdropTop","backdropWidth","backdropHeight","gridLineOpts","drawLabels","second","INTERVALS","common","year","adapter","_adapter","parser","isoWeekday","startOf","minUnit","capacity","UNITS","interval","MAX_SAFE_INTEGER","addTick","majorUnit","timestamps","time","adapters","_normalized","setMajorTicks","_applyBounds","_majorUnit","_offsets","_date","displayFormats","_parseOpts","timeOpts","normalized","initOffsets","getDecimalForValue","_getLabelBounds","getLabelTimestamps","_unit","determineUnitForAutoTicks","_getLabelCapacity","determineUnitForFormatting","determineMajorUnit","ticksFromTimestamps","afterAutoSkip","offsets","cosRotation","sinRotation","exampleLabel","_tickFormatFunction","exampleTime","hasWeekday","getDataTimestamps","tooltipFormat","datetime","prevSource","nextSource","prevTarget","nextTarget","TimeScale","span","_table","_minPos","_tableRange","added","_addedLabels","Chart","helpers","platforms"],"mappings":"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"}